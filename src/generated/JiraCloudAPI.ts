import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { Interceptors } from './core/OpenAPI';
import { FetchHttpRequest } from './core/FetchHttpRequest';

import { AnnouncementBannerService } from './services.gen';
import { AppDataPoliciesService } from './services.gen';
import { ApplicationRolesService } from './services.gen';
import { AppMigrationService } from './services.gen';
import { AppPropertiesService } from './services.gen';
import { AuditRecordsService } from './services.gen';
import { AvatarsService } from './services.gen';
import { ClassificationLevelsService } from './services.gen';
import { DashboardsService } from './services.gen';
import { DynamicModulesService } from './services.gen';
import { FiltersService } from './services.gen';
import { FilterSharingService } from './services.gen';
import { GroupAndUserPickerService } from './services.gen';
import { GroupsService } from './services.gen';
import { IssueAttachmentsService } from './services.gen';
import { IssueCommentPropertiesService } from './services.gen';
import { IssueCommentsService } from './services.gen';
import { IssueCustomFieldConfigurationAppsService } from './services.gen';
import { IssueCustomFieldContextsService } from './services.gen';
import { IssueCustomFieldOptionsService } from './services.gen';
import { IssueCustomFieldOptionsAppsService } from './services.gen';
import { IssueCustomFieldValuesAppsService } from './services.gen';
import { IssueFieldConfigurationsService } from './services.gen';
import { IssueFieldsService } from './services.gen';
import { IssueLinksService } from './services.gen';
import { IssueLinkTypesService } from './services.gen';
import { IssueNavigatorSettingsService } from './services.gen';
import { IssueNotificationSchemesService } from './services.gen';
import { IssuePrioritiesService } from './services.gen';
import { IssuePropertiesService } from './services.gen';
import { IssueRemoteLinksService } from './services.gen';
import { IssueResolutionsService } from './services.gen';
import { IssuesService } from './services.gen';
import { IssueSearchService } from './services.gen';
import { IssueSecurityLevelService } from './services.gen';
import { IssueSecuritySchemesService } from './services.gen';
import { IssueTypePropertiesService } from './services.gen';
import { IssueTypesService } from './services.gen';
import { IssueTypeSchemesService } from './services.gen';
import { IssueTypeScreenSchemesService } from './services.gen';
import { IssueVotesService } from './services.gen';
import { IssueWatchersService } from './services.gen';
import { IssueWorklogPropertiesService } from './services.gen';
import { IssueWorklogsService } from './services.gen';
import { JiraExpressionsService } from './services.gen';
import { JiraSettingsService } from './services.gen';
import { JqlService } from './services.gen';
import { JqlFunctionsAppsService } from './services.gen';
import { LabelsService } from './services.gen';
import { LicenseMetricsService } from './services.gen';
import { MyselfService } from './services.gen';
import { PermissionsService } from './services.gen';
import { PermissionSchemesService } from './services.gen';
import { PrioritySchemesService } from './services.gen';
import { ProjectAvatarsService } from './services.gen';
import { ProjectCategoriesService } from './services.gen';
import { ProjectClassificationLevelsService } from './services.gen';
import { ProjectComponentsService } from './services.gen';
import { ProjectEmailService } from './services.gen';
import { ProjectFeaturesService } from './services.gen';
import { ProjectKeyAndNameValidationService } from './services.gen';
import { ProjectPermissionSchemesService } from './services.gen';
import { ProjectPropertiesService } from './services.gen';
import { ProjectRoleActorsService } from './services.gen';
import { ProjectRolesService } from './services.gen';
import { ProjectsService } from './services.gen';
import { ProjectTypesService } from './services.gen';
import { ProjectVersionsService } from './services.gen';
import { ScreensService } from './services.gen';
import { ScreenSchemesService } from './services.gen';
import { ScreenTabFieldsService } from './services.gen';
import { ScreenTabsService } from './services.gen';
import { ServerInfoService } from './services.gen';
import { ServiceRegistryService } from './services.gen';
import { StatusService } from './services.gen';
import { TasksService } from './services.gen';
import { TimeTrackingService } from './services.gen';
import { UiModificationsAppsService } from './services.gen';
import { UserPropertiesService } from './services.gen';
import { UsersService } from './services.gen';
import { UserSearchService } from './services.gen';
import { WebhooksService } from './services.gen';
import { WorkflowsService } from './services.gen';
import { WorkflowSchemeDraftsService } from './services.gen';
import { WorkflowSchemeProjectAssociationsService } from './services.gen';
import { WorkflowSchemesService } from './services.gen';
import { WorkflowStatusCategoriesService } from './services.gen';
import { WorkflowStatusesService } from './services.gen';
import { WorkflowTransitionPropertiesService } from './services.gen';
import { WorkflowTransitionRulesService } from './services.gen';

type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;

export class JiraCloudAPI {

	public readonly announcementBanner: AnnouncementBannerService;
	public readonly appDataPolicies: AppDataPoliciesService;
	public readonly applicationRoles: ApplicationRolesService;
	public readonly appMigration: AppMigrationService;
	public readonly appProperties: AppPropertiesService;
	public readonly auditRecords: AuditRecordsService;
	public readonly avatars: AvatarsService;
	public readonly classificationLevels: ClassificationLevelsService;
	public readonly dashboards: DashboardsService;
	public readonly dynamicModules: DynamicModulesService;
	public readonly filters: FiltersService;
	public readonly filterSharing: FilterSharingService;
	public readonly groupAndUserPicker: GroupAndUserPickerService;
	public readonly groups: GroupsService;
	public readonly issueAttachments: IssueAttachmentsService;
	public readonly issueCommentProperties: IssueCommentPropertiesService;
	public readonly issueComments: IssueCommentsService;
	public readonly issueCustomFieldConfigurationApps: IssueCustomFieldConfigurationAppsService;
	public readonly issueCustomFieldContexts: IssueCustomFieldContextsService;
	public readonly issueCustomFieldOptions: IssueCustomFieldOptionsService;
	public readonly issueCustomFieldOptionsApps: IssueCustomFieldOptionsAppsService;
	public readonly issueCustomFieldValuesApps: IssueCustomFieldValuesAppsService;
	public readonly issueFieldConfigurations: IssueFieldConfigurationsService;
	public readonly issueFields: IssueFieldsService;
	public readonly issueLinks: IssueLinksService;
	public readonly issueLinkTypes: IssueLinkTypesService;
	public readonly issueNavigatorSettings: IssueNavigatorSettingsService;
	public readonly issueNotificationSchemes: IssueNotificationSchemesService;
	public readonly issuePriorities: IssuePrioritiesService;
	public readonly issueProperties: IssuePropertiesService;
	public readonly issueRemoteLinks: IssueRemoteLinksService;
	public readonly issueResolutions: IssueResolutionsService;
	public readonly issues: IssuesService;
	public readonly issueSearch: IssueSearchService;
	public readonly issueSecurityLevel: IssueSecurityLevelService;
	public readonly issueSecuritySchemes: IssueSecuritySchemesService;
	public readonly issueTypeProperties: IssueTypePropertiesService;
	public readonly issueTypes: IssueTypesService;
	public readonly issueTypeSchemes: IssueTypeSchemesService;
	public readonly issueTypeScreenSchemes: IssueTypeScreenSchemesService;
	public readonly issueVotes: IssueVotesService;
	public readonly issueWatchers: IssueWatchersService;
	public readonly issueWorklogProperties: IssueWorklogPropertiesService;
	public readonly issueWorklogs: IssueWorklogsService;
	public readonly jiraExpressions: JiraExpressionsService;
	public readonly jiraSettings: JiraSettingsService;
	public readonly jql: JqlService;
	public readonly jqlFunctionsApps: JqlFunctionsAppsService;
	public readonly labels: LabelsService;
	public readonly licenseMetrics: LicenseMetricsService;
	public readonly myself: MyselfService;
	public readonly permissions: PermissionsService;
	public readonly permissionSchemes: PermissionSchemesService;
	public readonly prioritySchemes: PrioritySchemesService;
	public readonly projectAvatars: ProjectAvatarsService;
	public readonly projectCategories: ProjectCategoriesService;
	public readonly projectClassificationLevels: ProjectClassificationLevelsService;
	public readonly projectComponents: ProjectComponentsService;
	public readonly projectEmail: ProjectEmailService;
	public readonly projectFeatures: ProjectFeaturesService;
	public readonly projectKeyAndNameValidation: ProjectKeyAndNameValidationService;
	public readonly projectPermissionSchemes: ProjectPermissionSchemesService;
	public readonly projectProperties: ProjectPropertiesService;
	public readonly projectRoleActors: ProjectRoleActorsService;
	public readonly projectRoles: ProjectRolesService;
	public readonly projects: ProjectsService;
	public readonly projectTypes: ProjectTypesService;
	public readonly projectVersions: ProjectVersionsService;
	public readonly screens: ScreensService;
	public readonly screenSchemes: ScreenSchemesService;
	public readonly screenTabFields: ScreenTabFieldsService;
	public readonly screenTabs: ScreenTabsService;
	public readonly serverInfo: ServerInfoService;
	public readonly serviceRegistry: ServiceRegistryService;
	public readonly status: StatusService;
	public readonly tasks: TasksService;
	public readonly timeTracking: TimeTrackingService;
	public readonly uiModificationsApps: UiModificationsAppsService;
	public readonly userProperties: UserPropertiesService;
	public readonly users: UsersService;
	public readonly userSearch: UserSearchService;
	public readonly webhooks: WebhooksService;
	public readonly workflows: WorkflowsService;
	public readonly workflowSchemeDrafts: WorkflowSchemeDraftsService;
	public readonly workflowSchemeProjectAssociations: WorkflowSchemeProjectAssociationsService;
	public readonly workflowSchemes: WorkflowSchemesService;
	public readonly workflowStatusCategories: WorkflowStatusCategoriesService;
	public readonly workflowStatuses: WorkflowStatusesService;
	public readonly workflowTransitionProperties: WorkflowTransitionPropertiesService;
	public readonly workflowTransitionRules: WorkflowTransitionRulesService;

	public readonly request: BaseHttpRequest;

	constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {
		this.request = new HttpRequest({
			BASE: config?.BASE ?? 'https://your-domain.atlassian.net',
			VERSION: config?.VERSION ?? '1001.0.0-SNAPSHOT-b4fe8954d6f64958c06c397321883702c979bafb',
			WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
			CREDENTIALS: config?.CREDENTIALS ?? 'include',
			TOKEN: config?.TOKEN,
			USERNAME: config?.USERNAME,
			PASSWORD: config?.PASSWORD,
			HEADERS: config?.HEADERS,
			ENCODE_PATH: config?.ENCODE_PATH,
			interceptors: {
				request: config?.interceptors?.request ?? new Interceptors(),
				response: config?.interceptors?.response ?? new Interceptors(),
      },
		});

		this.announcementBanner = new AnnouncementBannerService(this.request);
		this.appDataPolicies = new AppDataPoliciesService(this.request);
		this.applicationRoles = new ApplicationRolesService(this.request);
		this.appMigration = new AppMigrationService(this.request);
		this.appProperties = new AppPropertiesService(this.request);
		this.auditRecords = new AuditRecordsService(this.request);
		this.avatars = new AvatarsService(this.request);
		this.classificationLevels = new ClassificationLevelsService(this.request);
		this.dashboards = new DashboardsService(this.request);
		this.dynamicModules = new DynamicModulesService(this.request);
		this.filters = new FiltersService(this.request);
		this.filterSharing = new FilterSharingService(this.request);
		this.groupAndUserPicker = new GroupAndUserPickerService(this.request);
		this.groups = new GroupsService(this.request);
		this.issueAttachments = new IssueAttachmentsService(this.request);
		this.issueCommentProperties = new IssueCommentPropertiesService(this.request);
		this.issueComments = new IssueCommentsService(this.request);
		this.issueCustomFieldConfigurationApps = new IssueCustomFieldConfigurationAppsService(this.request);
		this.issueCustomFieldContexts = new IssueCustomFieldContextsService(this.request);
		this.issueCustomFieldOptions = new IssueCustomFieldOptionsService(this.request);
		this.issueCustomFieldOptionsApps = new IssueCustomFieldOptionsAppsService(this.request);
		this.issueCustomFieldValuesApps = new IssueCustomFieldValuesAppsService(this.request);
		this.issueFieldConfigurations = new IssueFieldConfigurationsService(this.request);
		this.issueFields = new IssueFieldsService(this.request);
		this.issueLinks = new IssueLinksService(this.request);
		this.issueLinkTypes = new IssueLinkTypesService(this.request);
		this.issueNavigatorSettings = new IssueNavigatorSettingsService(this.request);
		this.issueNotificationSchemes = new IssueNotificationSchemesService(this.request);
		this.issuePriorities = new IssuePrioritiesService(this.request);
		this.issueProperties = new IssuePropertiesService(this.request);
		this.issueRemoteLinks = new IssueRemoteLinksService(this.request);
		this.issueResolutions = new IssueResolutionsService(this.request);
		this.issues = new IssuesService(this.request);
		this.issueSearch = new IssueSearchService(this.request);
		this.issueSecurityLevel = new IssueSecurityLevelService(this.request);
		this.issueSecuritySchemes = new IssueSecuritySchemesService(this.request);
		this.issueTypeProperties = new IssueTypePropertiesService(this.request);
		this.issueTypes = new IssueTypesService(this.request);
		this.issueTypeSchemes = new IssueTypeSchemesService(this.request);
		this.issueTypeScreenSchemes = new IssueTypeScreenSchemesService(this.request);
		this.issueVotes = new IssueVotesService(this.request);
		this.issueWatchers = new IssueWatchersService(this.request);
		this.issueWorklogProperties = new IssueWorklogPropertiesService(this.request);
		this.issueWorklogs = new IssueWorklogsService(this.request);
		this.jiraExpressions = new JiraExpressionsService(this.request);
		this.jiraSettings = new JiraSettingsService(this.request);
		this.jql = new JqlService(this.request);
		this.jqlFunctionsApps = new JqlFunctionsAppsService(this.request);
		this.labels = new LabelsService(this.request);
		this.licenseMetrics = new LicenseMetricsService(this.request);
		this.myself = new MyselfService(this.request);
		this.permissions = new PermissionsService(this.request);
		this.permissionSchemes = new PermissionSchemesService(this.request);
		this.prioritySchemes = new PrioritySchemesService(this.request);
		this.projectAvatars = new ProjectAvatarsService(this.request);
		this.projectCategories = new ProjectCategoriesService(this.request);
		this.projectClassificationLevels = new ProjectClassificationLevelsService(this.request);
		this.projectComponents = new ProjectComponentsService(this.request);
		this.projectEmail = new ProjectEmailService(this.request);
		this.projectFeatures = new ProjectFeaturesService(this.request);
		this.projectKeyAndNameValidation = new ProjectKeyAndNameValidationService(this.request);
		this.projectPermissionSchemes = new ProjectPermissionSchemesService(this.request);
		this.projectProperties = new ProjectPropertiesService(this.request);
		this.projectRoleActors = new ProjectRoleActorsService(this.request);
		this.projectRoles = new ProjectRolesService(this.request);
		this.projects = new ProjectsService(this.request);
		this.projectTypes = new ProjectTypesService(this.request);
		this.projectVersions = new ProjectVersionsService(this.request);
		this.screens = new ScreensService(this.request);
		this.screenSchemes = new ScreenSchemesService(this.request);
		this.screenTabFields = new ScreenTabFieldsService(this.request);
		this.screenTabs = new ScreenTabsService(this.request);
		this.serverInfo = new ServerInfoService(this.request);
		this.serviceRegistry = new ServiceRegistryService(this.request);
		this.status = new StatusService(this.request);
		this.tasks = new TasksService(this.request);
		this.timeTracking = new TimeTrackingService(this.request);
		this.uiModificationsApps = new UiModificationsAppsService(this.request);
		this.userProperties = new UserPropertiesService(this.request);
		this.users = new UsersService(this.request);
		this.userSearch = new UserSearchService(this.request);
		this.webhooks = new WebhooksService(this.request);
		this.workflows = new WorkflowsService(this.request);
		this.workflowSchemeDrafts = new WorkflowSchemeDraftsService(this.request);
		this.workflowSchemeProjectAssociations = new WorkflowSchemeProjectAssociationsService(this.request);
		this.workflowSchemes = new WorkflowSchemesService(this.request);
		this.workflowStatusCategories = new WorkflowStatusCategoriesService(this.request);
		this.workflowStatuses = new WorkflowStatusesService(this.request);
		this.workflowTransitionProperties = new WorkflowTransitionPropertiesService(this.request);
		this.workflowTransitionRules = new WorkflowTransitionRulesService(this.request);
	}
}
