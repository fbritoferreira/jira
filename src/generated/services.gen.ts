// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetBannerResponse, SetBannerData, SetBannerResponse, UpdateMultipleCustomFieldValuesData, UpdateMultipleCustomFieldValuesResponse, UpdateCustomFieldValueData, UpdateCustomFieldValueResponse, GetCustomFieldConfigurationData, GetCustomFieldConfigurationResponse, UpdateCustomFieldConfigurationData, UpdateCustomFieldConfigurationResponse, GetApplicationPropertyData, GetApplicationPropertyResponse, GetAdvancedSettingsResponse, SetApplicationPropertyData, SetApplicationPropertyResponse, GetConfigurationResponse, GetAllApplicationRolesResponse, GetApplicationRoleData, GetApplicationRoleResponse, GetAttachmentContentData, GetAttachmentContentResponse, GetAttachmentMetaResponse, GetAttachmentThumbnailData, GetAttachmentThumbnailResponse, RemoveAttachmentData, RemoveAttachmentResponse, GetAttachmentData, GetAttachmentResponse, ExpandAttachmentForHumansData, ExpandAttachmentForHumansResponse, ExpandAttachmentForMachinesData, ExpandAttachmentForMachinesResponse, AddAttachmentData, AddAttachmentResponse, GetAuditRecordsData, GetAuditRecordsResponse, GetAllSystemAvatarsData, GetAllSystemAvatarsResponse, GetAvatarsData, GetAvatarsResponse, StoreAvatarData, StoreAvatarResponse, DeleteAvatarData, DeleteAvatarResponse, GetAvatarImageByTypeData, GetAvatarImageByTypeResponse, GetAvatarImageByIdData, GetAvatarImageByIdResponse, GetAvatarImageByOwnerData, GetAvatarImageByOwnerResponse, GetAllUserDataClassificationLevelsData, GetAllUserDataClassificationLevelsResponse, GetCommentsByIdsData, GetCommentsByIdsResponse, GetCommentsData, GetCommentsResponse, AddCommentData, AddCommentResponse, DeleteCommentData, DeleteCommentResponse, GetCommentData, GetCommentResponse, UpdateCommentData, UpdateCommentResponse, GetCommentPropertyKeysData, GetCommentPropertyKeysResponse, DeleteCommentPropertyData, DeleteCommentPropertyResponse, GetCommentPropertyData, GetCommentPropertyResponse, SetCommentPropertyData, SetCommentPropertyResponse, FindComponentsForProjectsData, FindComponentsForProjectsResponse, CreateComponentData, CreateComponentResponse, DeleteComponentData, DeleteComponentResponse, GetComponentData, GetComponentResponse, UpdateComponentData, UpdateComponentResponse, GetComponentRelatedIssuesData, GetComponentRelatedIssuesResponse, GetProjectComponentsPaginatedData, GetProjectComponentsPaginatedResponse, GetProjectComponentsData, GetProjectComponentsResponse, GetSelectedTimeTrackingImplementationResponse, SelectTimeTrackingImplementationData, SelectTimeTrackingImplementationResponse, GetAvailableTimeTrackingImplementationsResponse, GetSharedTimeTrackingConfigurationResponse, SetSharedTimeTrackingConfigurationData, SetSharedTimeTrackingConfigurationResponse, GetCustomFieldOptionData, GetCustomFieldOptionResponse, GetOptionsForContextData, GetOptionsForContextResponse, CreateCustomFieldOptionData, CreateCustomFieldOptionResponse, UpdateCustomFieldOptionData, UpdateCustomFieldOptionResponse, ReorderCustomFieldOptionsData, ReorderCustomFieldOptionsResponse, DeleteCustomFieldOptionData, DeleteCustomFieldOptionResponse, ReplaceCustomFieldOptionData, GetAllDashboardsData, GetAllDashboardsResponse, CreateDashboardData, CreateDashboardResponse, BulkEditDashboardsData, BulkEditDashboardsResponse, GetAllAvailableDashboardGadgetsResponse, GetDashboardsPaginatedData, GetDashboardsPaginatedResponse, GetAllGadgetsData, GetAllGadgetsResponse, AddGadgetData, AddGadgetResponse, RemoveGadgetData, RemoveGadgetResponse, UpdateGadgetData, UpdateGadgetResponse, GetDashboardItemPropertyKeysData, GetDashboardItemPropertyKeysResponse, DeleteDashboardItemPropertyData, DeleteDashboardItemPropertyResponse, GetDashboardItemPropertyData, GetDashboardItemPropertyResponse, SetDashboardItemPropertyData, SetDashboardItemPropertyResponse, DeleteDashboardData, DeleteDashboardResponse, GetDashboardData, GetDashboardResponse, UpdateDashboardData, UpdateDashboardResponse, CopyDashboardData, CopyDashboardResponse, GetPolicyResponse, GetPoliciesData, GetPoliciesResponse, GetEventsResponse, CreateIssueData, CreateIssueResponse, ArchiveIssuesAsyncData, ArchiveIssuesAsyncResponse, ArchiveIssuesData, ArchiveIssuesResponse, CreateIssuesData, CreateIssuesResponse, GetCreateIssueMetaData, GetCreateIssueMetaResponse, GetCreateIssueMetaIssueTypesData, GetCreateIssueMetaIssueTypesResponse, GetCreateIssueMetaIssueTypeIdData, GetCreateIssueMetaIssueTypeIdResponse, GetIssueLimitReportData, GetIssueLimitReportResponse, UnarchiveIssuesData, UnarchiveIssuesResponse, DeleteIssueData, DeleteIssueResponse, GetIssueData, GetIssueResponse, EditIssueData, EditIssueResponse, AssignIssueData, AssignIssueResponse, GetChangeLogsData, GetChangeLogsResponse, GetChangeLogsByIdsData, GetChangeLogsByIdsResponse, GetEditIssueMetaData, GetEditIssueMetaResponse, NotifyData, NotifyResponse, GetTransitionsData, GetTransitionsResponse, DoTransitionData, DoTransitionResponse, ExportArchivedIssuesData, ExportArchivedIssuesResponse, AnalyseExpressionData, AnalyseExpressionResponse, EvaluateJiraExpressionData, EvaluateJiraExpressionResponse, GetFieldsResponse, CreateCustomFieldData, CreateCustomFieldResponse, GetFieldsPaginatedData, GetFieldsPaginatedResponse, GetTrashedFieldsPaginatedData, GetTrashedFieldsPaginatedResponse, UpdateCustomFieldData, UpdateCustomFieldResponse, GetContextsForFieldDeprecatedData, GetContextsForFieldDeprecatedResponse, DeleteCustomFieldData, RestoreCustomFieldData, RestoreCustomFieldResponse, TrashCustomFieldData, TrashCustomFieldResponse, GetContextsForFieldData, GetContextsForFieldResponse, CreateCustomFieldContextData, CreateCustomFieldContextResponse, GetDefaultValuesData, GetDefaultValuesResponse, SetDefaultValuesData, SetDefaultValuesResponse, GetIssueTypeMappingsForContextsData, GetIssueTypeMappingsForContextsResponse, GetCustomFieldContextsForProjectsAndIssueTypesData, GetCustomFieldContextsForProjectsAndIssueTypesResponse, GetProjectContextMappingData, GetProjectContextMappingResponse, DeleteCustomFieldContextData, DeleteCustomFieldContextResponse, UpdateCustomFieldContextData, UpdateCustomFieldContextResponse, AddIssueTypesToContextData, AddIssueTypesToContextResponse, RemoveIssueTypesFromContextData, RemoveIssueTypesFromContextResponse, AssignProjectsToCustomFieldContextData, AssignProjectsToCustomFieldContextResponse, RemoveCustomFieldContextFromProjectsData, RemoveCustomFieldContextFromProjectsResponse, GetScreensForFieldData, GetScreensForFieldResponse, GetScreensData, GetScreensResponse, CreateScreenData, CreateScreenResponse, AddFieldToDefaultScreenData, AddFieldToDefaultScreenResponse, DeleteScreenData, DeleteScreenResponse, UpdateScreenData, UpdateScreenResponse, GetAvailableScreenFieldsData, GetAvailableScreenFieldsResponse, GetAllIssueFieldOptionsData, GetAllIssueFieldOptionsResponse, CreateIssueFieldOptionData, CreateIssueFieldOptionResponse, GetSelectableIssueFieldOptionsData, GetSelectableIssueFieldOptionsResponse, GetVisibleIssueFieldOptionsData, GetVisibleIssueFieldOptionsResponse, DeleteIssueFieldOptionData, DeleteIssueFieldOptionResponse, GetIssueFieldOptionData, GetIssueFieldOptionResponse, UpdateIssueFieldOptionData, UpdateIssueFieldOptionResponse, ReplaceIssueFieldOptionData, GetAllFieldConfigurationsData, GetAllFieldConfigurationsResponse, CreateFieldConfigurationData, CreateFieldConfigurationResponse, DeleteFieldConfigurationData, DeleteFieldConfigurationResponse, UpdateFieldConfigurationData, UpdateFieldConfigurationResponse, GetFieldConfigurationItemsData, GetFieldConfigurationItemsResponse, UpdateFieldConfigurationItemsData, UpdateFieldConfigurationItemsResponse, GetAllFieldConfigurationSchemesData, GetAllFieldConfigurationSchemesResponse, CreateFieldConfigurationSchemeData, CreateFieldConfigurationSchemeResponse, GetFieldConfigurationSchemeMappingsData, GetFieldConfigurationSchemeMappingsResponse, GetFieldConfigurationSchemeProjectMappingData, GetFieldConfigurationSchemeProjectMappingResponse, AssignFieldConfigurationSchemeToProjectData, AssignFieldConfigurationSchemeToProjectResponse, DeleteFieldConfigurationSchemeData, DeleteFieldConfigurationSchemeResponse, UpdateFieldConfigurationSchemeData, UpdateFieldConfigurationSchemeResponse, SetFieldConfigurationSchemeMappingData, SetFieldConfigurationSchemeMappingResponse, RemoveIssueTypesFromGlobalFieldConfigurationSchemeData, RemoveIssueTypesFromGlobalFieldConfigurationSchemeResponse, CreateFilterData, CreateFilterResponse, GetFavouriteFiltersData, GetFavouriteFiltersResponse, GetMyFiltersData, GetMyFiltersResponse, GetFiltersPaginatedData, GetFiltersPaginatedResponse, DeleteFilterData, DeleteFilterResponse, GetFilterData, GetFilterResponse, UpdateFilterData, UpdateFilterResponse, ResetColumnsData, ResetColumnsResponse, GetColumnsData, GetColumnsResponse, SetColumnsData, SetColumnsResponse, DeleteFavouriteForFilterData, DeleteFavouriteForFilterResponse, SetFavouriteForFilterData, SetFavouriteForFilterResponse, ChangeFilterOwnerData, ChangeFilterOwnerResponse, GetDefaultShareScopeResponse, SetDefaultShareScopeData, SetDefaultShareScopeResponse, GetSharePermissionsData, GetSharePermissionsResponse, AddSharePermissionData, AddSharePermissionResponse, DeleteSharePermissionData, DeleteSharePermissionResponse, GetSharePermissionData, GetSharePermissionResponse, RemoveGroupData, RemoveGroupResponse, GetGroupData, GetGroupResponse, CreateGroupData, CreateGroupResponse, BulkGetGroupsData, BulkGetGroupsResponse, GetUsersFromGroupData, GetUsersFromGroupResponse, RemoveUserFromGroupData, RemoveUserFromGroupResponse, AddUserToGroupData, AddUserToGroupResponse, FindGroupsData, FindGroupsResponse, FindUsersAndGroupsData, FindUsersAndGroupsResponse, GetLicenseResponse, GetApproximateLicenseCountResponse, GetApproximateApplicationLicenseCountData, GetApproximateApplicationLicenseCountResponse, GetIssuePickerResourceData, GetIssuePickerResourceResponse, MatchIssuesData, MatchIssuesResponse, SearchForIssuesUsingJqlData, SearchForIssuesUsingJqlResponse, SearchForIssuesUsingJqlPostData, SearchForIssuesUsingJqlPostResponse, SearchForIssuesIdsData, SearchForIssuesIdsResponse, BulkSetIssuesPropertiesListData, BulkSetIssuePropertiesByIssueData, BulkDeleteIssuePropertyData, BulkSetIssuePropertyData, GetIssuePropertyKeysData, GetIssuePropertyKeysResponse, DeleteIssuePropertyData, DeleteIssuePropertyResponse, GetIssuePropertyData, GetIssuePropertyResponse, SetIssuePropertyData, SetIssuePropertyResponse, GetIsWatchingIssueBulkData, GetIsWatchingIssueBulkResponse, RemoveWatcherData, RemoveWatcherResponse, GetIssueWatchersData, GetIssueWatchersResponse, AddWatcherData, AddWatcherResponse, DeleteRemoteIssueLinkByGlobalIdData, DeleteRemoteIssueLinkByGlobalIdResponse, GetRemoteIssueLinksData, GetRemoteIssueLinksResponse, CreateOrUpdateRemoteIssueLinkData, CreateOrUpdateRemoteIssueLinkResponse, DeleteRemoteIssueLinkByIdData, DeleteRemoteIssueLinkByIdResponse, GetRemoteIssueLinkByIdData, GetRemoteIssueLinkByIdResponse, UpdateRemoteIssueLinkData, UpdateRemoteIssueLinkResponse, RemoveVoteData, RemoveVoteResponse, GetVotesData, GetVotesResponse, AddVoteData, AddVoteResponse, GetIssueWorklogData, GetIssueWorklogResponse, AddWorklogData, AddWorklogResponse, DeleteWorklogData, DeleteWorklogResponse, GetWorklogData, GetWorklogResponse, UpdateWorklogData, UpdateWorklogResponse, GetIdsOfWorklogsDeletedSinceData, GetIdsOfWorklogsDeletedSinceResponse, GetWorklogsForIdsData, GetWorklogsForIdsResponse, GetIdsOfWorklogsModifiedSinceData, GetIdsOfWorklogsModifiedSinceResponse, GetWorklogPropertyKeysData, GetWorklogPropertyKeysResponse, DeleteWorklogPropertyData, DeleteWorklogPropertyResponse, GetWorklogPropertyData, GetWorklogPropertyResponse, SetWorklogPropertyData, SetWorklogPropertyResponse, LinkIssuesData, LinkIssuesResponse, DeleteIssueLinkData, DeleteIssueLinkResponse, GetIssueLinkData, GetIssueLinkResponse, GetIssueLinkTypesResponse, CreateIssueLinkTypeData, CreateIssueLinkTypeResponse, DeleteIssueLinkTypeData, DeleteIssueLinkTypeResponse, GetIssueLinkTypeData, GetIssueLinkTypeResponse, UpdateIssueLinkTypeData, UpdateIssueLinkTypeResponse, GetIssueSecuritySchemesResponse, CreateIssueSecuritySchemeData, CreateIssueSecuritySchemeResponse, GetSecurityLevelsData, GetSecurityLevelsResponse, SetDefaultLevelsData, SetDefaultLevelsResponse, GetSecurityLevelMembersData, GetSecurityLevelMembersResponse, SearchProjectsUsingSecuritySchemesData, SearchProjectsUsingSecuritySchemesResponse, AssociateSchemesToProjectsData, SearchSecuritySchemesData, SearchSecuritySchemesResponse, GetIssueSecuritySchemeData, GetIssueSecuritySchemeResponse, UpdateIssueSecuritySchemeData, UpdateIssueSecuritySchemeResponse, DeleteSecuritySchemeData, DeleteSecuritySchemeResponse, AddSecurityLevelData, AddSecurityLevelResponse, RemoveLevelData, UpdateSecurityLevelData, UpdateSecurityLevelResponse, AddSecurityLevelMembersData, AddSecurityLevelMembersResponse, RemoveMemberFromSecurityLevelData, RemoveMemberFromSecurityLevelResponse, GetIssueSecurityLevelMembersData, GetIssueSecurityLevelMembersResponse, GetIssueSecurityLevelData, GetIssueSecurityLevelResponse, GetIssueAllTypesResponse, CreateIssueTypeData, CreateIssueTypeResponse, GetIssueTypesForProjectData, GetIssueTypesForProjectResponse, DeleteIssueTypeData, DeleteIssueTypeResponse, GetIssueTypeData, GetIssueTypeResponse, UpdateIssueTypeData, UpdateIssueTypeResponse, GetAlternativeIssueTypesData, GetAlternativeIssueTypesResponse, CreateIssueTypeAvatarData, CreateIssueTypeAvatarResponse, GetIssueTypePropertyKeysData, GetIssueTypePropertyKeysResponse, DeleteIssueTypePropertyData, DeleteIssueTypePropertyResponse, GetIssueTypePropertyData, GetIssueTypePropertyResponse, SetIssueTypePropertyData, SetIssueTypePropertyResponse, GetAllIssueTypeSchemesData, GetAllIssueTypeSchemesResponse, CreateIssueTypeSchemeData, CreateIssueTypeSchemeResponse, GetIssueTypeSchemesMappingData, GetIssueTypeSchemesMappingResponse, GetIssueTypeSchemeForProjectsData, GetIssueTypeSchemeForProjectsResponse, AssignIssueTypeSchemeToProjectData, AssignIssueTypeSchemeToProjectResponse, DeleteIssueTypeSchemeData, DeleteIssueTypeSchemeResponse, UpdateIssueTypeSchemeData, UpdateIssueTypeSchemeResponse, AddIssueTypesToIssueTypeSchemeData, AddIssueTypesToIssueTypeSchemeResponse, ReorderIssueTypesInIssueTypeSchemeData, ReorderIssueTypesInIssueTypeSchemeResponse, RemoveIssueTypeFromIssueTypeSchemeData, RemoveIssueTypeFromIssueTypeSchemeResponse, GetIssueTypeScreenSchemesData, GetIssueTypeScreenSchemesResponse, CreateIssueTypeScreenSchemeData, CreateIssueTypeScreenSchemeResponse, GetIssueTypeScreenSchemeMappingsData, GetIssueTypeScreenSchemeMappingsResponse, GetIssueTypeScreenSchemeProjectAssociationsData, GetIssueTypeScreenSchemeProjectAssociationsResponse, AssignIssueTypeScreenSchemeToProjectData, AssignIssueTypeScreenSchemeToProjectResponse, DeleteIssueTypeScreenSchemeData, DeleteIssueTypeScreenSchemeResponse, UpdateIssueTypeScreenSchemeData, UpdateIssueTypeScreenSchemeResponse, AppendMappingsForIssueTypeScreenSchemeData, AppendMappingsForIssueTypeScreenSchemeResponse, UpdateDefaultScreenSchemeData, UpdateDefaultScreenSchemeResponse, RemoveMappingsFromIssueTypeScreenSchemeData, RemoveMappingsFromIssueTypeScreenSchemeResponse, GetProjectsForIssueTypeScreenSchemeData, GetProjectsForIssueTypeScreenSchemeResponse, GetAutoCompleteResponse, GetAutoCompletePostData, GetAutoCompletePostResponse, GetFieldAutoCompleteForQueryStringData, GetFieldAutoCompleteForQueryStringResponse, ParseJqlQueriesData, ParseJqlQueriesResponse, MigrateQueriesData, MigrateQueriesResponse, SanitiseJqlQueriesData, SanitiseJqlQueriesResponse, GetPrecomputationsData, GetPrecomputationsResponse, UpdatePrecomputationsData, UpdatePrecomputationsResponse, GetAllLabelsData, GetAllLabelsResponse, GetMyPermissionsData, GetMyPermissionsResponse, GetAllPermissionsResponse, GetBulkPermissionsData, GetBulkPermissionsResponse, GetPermittedProjectsData, GetPermittedProjectsResponse, RemovePreferenceData, RemovePreferenceResponse, GetPreferenceData, GetPreferenceResponse, SetPreferenceData, SetPreferenceResponse, DeleteLocaleResponse, GetLocaleResponse, SetLocaleData, SetLocaleResponse, GetCurrentUserData, GetCurrentUserResponse, GetNotificationSchemesData, GetNotificationSchemesResponse, CreateNotificationSchemeData, CreateNotificationSchemeResponse, GetNotificationSchemeToProjectMappingsData, GetNotificationSchemeToProjectMappingsResponse, GetNotificationSchemeData, GetNotificationSchemeResponse, UpdateNotificationSchemeData, UpdateNotificationSchemeResponse, AddNotificationsData, AddNotificationsResponse, DeleteNotificationSchemeData, DeleteNotificationSchemeResponse, RemoveNotificationFromNotificationSchemeData, RemoveNotificationFromNotificationSchemeResponse, GetAllPermissionSchemesData, GetAllPermissionSchemesResponse, CreatePermissionSchemeData, CreatePermissionSchemeResponse, DeletePermissionSchemeData, DeletePermissionSchemeResponse, GetPermissionSchemeData, GetPermissionSchemeResponse, UpdatePermissionSchemeData, UpdatePermissionSchemeResponse, GetPermissionSchemeGrantsData, GetPermissionSchemeGrantsResponse, CreatePermissionGrantData, CreatePermissionGrantResponse, DeletePermissionSchemeEntityData, DeletePermissionSchemeEntityResponse, GetPermissionSchemeGrantData, GetPermissionSchemeGrantResponse, GetPrioritiesResponse, CreatePriorityData, CreatePriorityResponse, SetDefaultPriorityData, SetDefaultPriorityResponse, MovePrioritiesData, MovePrioritiesResponse, SearchPrioritiesData, SearchPrioritiesResponse, DeletePriorityData, GetPriorityData, GetPriorityResponse, UpdatePriorityData, UpdatePriorityResponse, GetPrioritySchemesData, GetPrioritySchemesResponse, CreatePrioritySchemeData, CreatePrioritySchemeResponse, SuggestedPrioritiesForMappingsData, SuggestedPrioritiesForMappingsResponse, GetAvailablePrioritiesByPrioritySchemeData, GetAvailablePrioritiesByPrioritySchemeResponse, DeletePrioritySchemeData, DeletePrioritySchemeResponse, UpdatePrioritySchemeData, UpdatePrioritySchemeResponse, GetPrioritiesByPrioritySchemeData, GetPrioritiesByPrioritySchemeResponse, GetProjectsByPrioritySchemeData, GetProjectsByPrioritySchemeResponse, GetAllProjectsData, GetAllProjectsResponse, CreateProjectData, CreateProjectResponse, GetRecentData, GetRecentResponse, SearchProjectsData, SearchProjectsResponse, DeleteProjectData, DeleteProjectResponse, GetProjectData, GetProjectResponse, UpdateProjectData, UpdateProjectResponse, ArchiveProjectData, ArchiveProjectResponse, DeleteProjectAsynchronouslyData, RestoreData, RestoreResponse, GetAllStatusesData, GetAllStatusesResponse, GetHierarchyData, GetHierarchyResponse, GetNotificationSchemeForProjectData, GetNotificationSchemeForProjectResponse, GetAllProjectTypesResponse, GetAllAccessibleProjectTypesResponse, GetProjectTypeByKeyData, GetProjectTypeByKeyResponse, GetAccessibleProjectTypeByKeyData, GetAccessibleProjectTypeByKeyResponse, UpdateProjectAvatarData, UpdateProjectAvatarResponse, DeleteProjectAvatarData, DeleteProjectAvatarResponse, CreateProjectAvatarData, CreateProjectAvatarResponse, GetAllProjectAvatarsData, GetAllProjectAvatarsResponse, RemoveDefaultProjectClassificationData, RemoveDefaultProjectClassificationResponse, GetDefaultProjectClassificationData, GetDefaultProjectClassificationResponse, UpdateDefaultProjectClassificationData, UpdateDefaultProjectClassificationResponse, GetFeaturesForProjectData, GetFeaturesForProjectResponse, ToggleFeatureForProjectData, ToggleFeatureForProjectResponse, GetProjectPropertyKeysData, GetProjectPropertyKeysResponse, DeleteProjectPropertyData, DeleteProjectPropertyResponse, GetProjectPropertyData, GetProjectPropertyResponse, SetProjectPropertyData, SetProjectPropertyResponse, GetProjectRolesData, GetProjectRolesResponse, GetProjectRoleData, GetProjectRoleResponse, GetProjectRoleDetailsData, GetProjectRoleDetailsResponse, GetAllProjectRolesResponse, CreateProjectRoleData, CreateProjectRoleResponse, DeleteProjectRoleData, DeleteProjectRoleResponse, GetProjectRoleByIdData, GetProjectRoleByIdResponse, PartialUpdateProjectRoleData, PartialUpdateProjectRoleResponse, FullyUpdateProjectRoleData, FullyUpdateProjectRoleResponse, DeleteActorData, DeleteActorResponse, AddActorUsersData, AddActorUsersResponse, SetActorsData, SetActorsResponse, DeleteProjectRoleActorsFromRoleData, DeleteProjectRoleActorsFromRoleResponse, GetProjectRoleActorsForRoleData, GetProjectRoleActorsForRoleResponse, AddProjectRoleActorsToRoleData, AddProjectRoleActorsToRoleResponse, GetProjectVersionsPaginatedData, GetProjectVersionsPaginatedResponse, GetProjectVersionsData, GetProjectVersionsResponse, CreateVersionData, CreateVersionResponse, DeleteVersionData, DeleteVersionResponse, GetVersionData, GetVersionResponse, UpdateVersionData, UpdateVersionResponse, MergeVersionsData, MergeVersionsResponse, MoveVersionData, MoveVersionResponse, GetVersionRelatedIssuesData, GetVersionRelatedIssuesResponse, GetRelatedWorkData, GetRelatedWorkResponse, CreateRelatedWorkData, CreateRelatedWorkResponse, UpdateRelatedWorkData, UpdateRelatedWorkResponse, DeleteAndReplaceVersionData, DeleteAndReplaceVersionResponse, GetVersionUnresolvedIssuesData, GetVersionUnresolvedIssuesResponse, DeleteRelatedWorkData, DeleteRelatedWorkResponse, GetProjectEmailData, GetProjectEmailResponse, UpdateProjectEmailData, UpdateProjectEmailResponse, GetProjectIssueSecuritySchemeData, GetProjectIssueSecuritySchemeResponse, GetAssignedPermissionSchemeData, GetAssignedPermissionSchemeResponse, AssignPermissionSchemeData, AssignPermissionSchemeResponse, GetSecurityLevelsForProjectData, GetSecurityLevelsForProjectResponse, GetAllProjectCategoriesResponse, CreateProjectCategoryData, CreateProjectCategoryResponse, RemoveProjectCategoryData, RemoveProjectCategoryResponse, GetProjectCategoryByIdData, GetProjectCategoryByIdResponse, UpdateProjectCategoryData, UpdateProjectCategoryResponse, ValidateProjectKeyData, ValidateProjectKeyResponse, GetValidProjectKeyData, GetValidProjectKeyResponse, GetValidProjectNameData, GetValidProjectNameResponse, GetResolutionsResponse, CreateResolutionData, CreateResolutionResponse, SetDefaultResolutionData, SetDefaultResolutionResponse, MoveResolutionsData, MoveResolutionsResponse, SearchResolutionsData, SearchResolutionsResponse, DeleteResolutionData, GetResolutionData, GetResolutionResponse, UpdateResolutionData, UpdateResolutionResponse, GetBulkScreenTabsData, GetBulkScreenTabsResponse, GetAllScreenTabsData, GetAllScreenTabsResponse, AddScreenTabData, AddScreenTabResponse, DeleteScreenTabData, DeleteScreenTabResponse, RenameScreenTabData, RenameScreenTabResponse, MoveScreenTabData, MoveScreenTabResponse, GetAllScreenTabFieldsData, GetAllScreenTabFieldsResponse, AddScreenTabFieldData, AddScreenTabFieldResponse, RemoveScreenTabFieldData, RemoveScreenTabFieldResponse, MoveScreenTabFieldData, MoveScreenTabFieldResponse, GetScreenSchemesData, GetScreenSchemesResponse, CreateScreenSchemeData, CreateScreenSchemeResponse, DeleteScreenSchemeData, DeleteScreenSchemeResponse, UpdateScreenSchemeData, UpdateScreenSchemeResponse, GetServerInfoResponse, GetIssueNavigatorDefaultColumnsResponse, SetIssueNavigatorDefaultColumnsData, SetIssueNavigatorDefaultColumnsResponse, GetStatusesResponse, GetStatusData, GetStatusResponse, GetStatusCategoriesResponse, GetStatusCategoryData, GetStatusCategoryResponse, DeleteStatusesByIdData, DeleteStatusesByIdResponse, GetStatusesByIdData, GetStatusesByIdResponse, CreateStatusesData, CreateStatusesResponse, UpdateStatusesData, UpdateStatusesResponse, SearchData, SearchResponse, GetTaskData, GetTaskResponse, CancelTaskData, CancelTaskResponse, GetUiModificationsData, GetUiModificationsResponse, CreateUiModificationData, CreateUiModificationResponse, DeleteUiModificationData, DeleteUiModificationResponse, UpdateUiModificationData, UpdateUiModificationResponse, RemoveUserData, RemoveUserResponse, GetUserData, GetUserResponse, CreateUserData, CreateUserResponse, BulkGetUsersData, BulkGetUsersResponse, BulkGetUsersMigrationData, BulkGetUsersMigrationResponse, ResetUserColumnsData, ResetUserColumnsResponse, GetUserDefaultColumnsData, GetUserDefaultColumnsResponse, SetUserColumnsData, SetUserColumnsResponse, GetUserEmailData, GetUserEmailResponse, GetUserEmailBulkData, GetUserEmailBulkResponse, GetUserGroupsData, GetUserGroupsResponse, GetAllUsersDefaultData, GetAllUsersDefaultResponse, GetAllUsersData, GetAllUsersResponse, FindBulkAssignableUsersData, FindBulkAssignableUsersResponse, FindAssignableUsersData, FindAssignableUsersResponse, FindUsersWithAllPermissionsData, FindUsersWithAllPermissionsResponse, FindUsersForPickerData, FindUsersForPickerResponse, FindUsersData, FindUsersResponse, FindUsersByQueryData, FindUsersByQueryResponse, FindUserKeysByQueryData, FindUserKeysByQueryResponse, FindUsersWithBrowsePermissionData, FindUsersWithBrowsePermissionResponse, GetUserPropertyKeysData, GetUserPropertyKeysResponse, DeleteUserPropertyData, DeleteUserPropertyResponse, GetUserPropertyData, GetUserPropertyResponse, SetUserPropertyData, SetUserPropertyResponse, DeleteWebhookByIdData, DeleteWebhookByIdResponse, GetDynamicWebhooksForAppData, GetDynamicWebhooksForAppResponse, RegisterDynamicWebhooksData, RegisterDynamicWebhooksResponse, GetFailedWebhooksData, GetFailedWebhooksResponse, RefreshWebhooksData, RefreshWebhooksResponse, GetAllWorkflowsData, GetAllWorkflowsResponse, CreateWorkflowData, CreateWorkflowResponse, GetWorkflowsPaginatedData, GetWorkflowsPaginatedResponse, DeleteInactiveWorkflowData, DeleteInactiveWorkflowResponse, ReadWorkflowsData, ReadWorkflowsResponse, WorkflowCapabilitiesData, WorkflowCapabilitiesResponse, CreateWorkflowsData, CreateWorkflowsResponse, ValidateCreateWorkflowsData, ValidateCreateWorkflowsResponse, UpdateWorkflowsData, UpdateWorkflowsResponse, ValidateUpdateWorkflowsData, ValidateUpdateWorkflowsResponse, GetWorkflowTransitionRuleConfigurationsData, GetWorkflowTransitionRuleConfigurationsResponse, UpdateWorkflowTransitionRuleConfigurationsData, UpdateWorkflowTransitionRuleConfigurationsResponse, DeleteWorkflowTransitionRuleConfigurationsData, DeleteWorkflowTransitionRuleConfigurationsResponse, DeleteWorkflowTransitionPropertyData, DeleteWorkflowTransitionPropertyResponse, GetWorkflowTransitionPropertiesData, GetWorkflowTransitionPropertiesResponse, CreateWorkflowTransitionPropertyData, CreateWorkflowTransitionPropertyResponse, UpdateWorkflowTransitionPropertyData, UpdateWorkflowTransitionPropertyResponse, GetAllWorkflowSchemesData, GetAllWorkflowSchemesResponse, CreateWorkflowSchemeData, CreateWorkflowSchemeResponse, ReadWorkflowSchemesData, ReadWorkflowSchemesResponse, UpdateSchemesData, UpdateSchemesResponse, UpdateWorkflowSchemeMappingsData, UpdateWorkflowSchemeMappingsResponse, DeleteWorkflowSchemeData, DeleteWorkflowSchemeResponse, GetWorkflowSchemeData, GetWorkflowSchemeResponse, UpdateWorkflowSchemeData, UpdateWorkflowSchemeResponse, DeleteDefaultWorkflowData, DeleteDefaultWorkflowResponse, GetDefaultWorkflowData, GetDefaultWorkflowResponse, UpdateDefaultWorkflowData, UpdateDefaultWorkflowResponse, DeleteWorkflowSchemeIssueTypeData, DeleteWorkflowSchemeIssueTypeResponse, GetWorkflowSchemeIssueTypeData, GetWorkflowSchemeIssueTypeResponse, SetWorkflowSchemeIssueTypeData, SetWorkflowSchemeIssueTypeResponse, DeleteWorkflowMappingData, DeleteWorkflowMappingResponse, GetWorkflowData, GetWorkflowResponse, UpdateWorkflowMappingData, UpdateWorkflowMappingResponse, GetWorkflowSchemeProjectAssociationsData, GetWorkflowSchemeProjectAssociationsResponse, AssignSchemeToProjectData, AssignSchemeToProjectResponse, CreateWorkflowSchemeDraftFromParentData, CreateWorkflowSchemeDraftFromParentResponse, DeleteWorkflowSchemeDraftData, DeleteWorkflowSchemeDraftResponse, GetWorkflowSchemeDraftData, GetWorkflowSchemeDraftResponse, UpdateWorkflowSchemeDraftData, UpdateWorkflowSchemeDraftResponse, DeleteDraftDefaultWorkflowData, DeleteDraftDefaultWorkflowResponse, GetDraftDefaultWorkflowData, GetDraftDefaultWorkflowResponse, UpdateDraftDefaultWorkflowData, UpdateDraftDefaultWorkflowResponse, DeleteWorkflowSchemeDraftIssueTypeData, DeleteWorkflowSchemeDraftIssueTypeResponse, GetWorkflowSchemeDraftIssueTypeData, GetWorkflowSchemeDraftIssueTypeResponse, SetWorkflowSchemeDraftIssueTypeData, SetWorkflowSchemeDraftIssueTypeResponse, PublishDraftWorkflowSchemeData, PublishDraftWorkflowSchemeResponse, DeleteDraftWorkflowMappingData, DeleteDraftWorkflowMappingResponse, GetDraftWorkflowData, GetDraftWorkflowResponse, UpdateDraftWorkflowMappingData, UpdateDraftWorkflowMappingResponse, AddonPropertiesResourceGetAddonPropertiesGetData, AddonPropertiesResourceGetAddonPropertiesGetResponse, AddonPropertiesResourceDeleteAddonPropertyDeleteData, AddonPropertiesResourceDeleteAddonPropertyDeleteResponse, AddonPropertiesResourceGetAddonPropertyGetData, AddonPropertiesResourceGetAddonPropertyGetResponse, AddonPropertiesResourcePutAddonPropertyPutData, AddonPropertiesResourcePutAddonPropertyPutResponse, DeleteForgeAppPropertyData, DeleteForgeAppPropertyResponse, PutForgeAppPropertyData, PutForgeAppPropertyResponse, DynamicModulesResourceRemoveModulesDeleteData, DynamicModulesResourceRemoveModulesDeleteResponse, DynamicModulesResourceGetModulesGetResponse, DynamicModulesResourceRegisterModulesPostData, DynamicModulesResourceRegisterModulesPostResponse, AppIssueFieldValueUpdateResourceUpdateIssueFieldsPutData, AppIssueFieldValueUpdateResourceUpdateIssueFieldsPutResponse, MigrationResourceUpdateEntityPropertiesValuePutData, MigrationResourceUpdateEntityPropertiesValuePutResponse, MigrationResourceWorkflowRuleSearchPostData, MigrationResourceWorkflowRuleSearchPostResponse, ServiceRegistryResourceServicesGetData, ServiceRegistryResourceServicesGetResponse } from './types.gen';

export class AnnouncementBannerService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get announcement banner configuration
     * Returns the current announcement banner configuration.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns AnnouncementBannerConfiguration Returned if the request is successful.
     * @throws ApiError
     */
    public getBanner(): CancelablePromise<GetBannerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/announcementBanner',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Update announcement banner configuration
     * Updates the announcement banner configuration.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setBanner(data: SetBannerData): CancelablePromise<SetBannerResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/announcementBanner',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if an invalid parameter is passed.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
}

export class IssueCustomFieldValuesAppsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Update custom fields
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.
     *
     * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
     *
     * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.generateChangelog Whether to generate a changelog for this update.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateMultipleCustomFieldValues(data: UpdateMultipleCustomFieldValuesData): CancelablePromise<UpdateMultipleCustomFieldValuesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/app/field/value',
            query: {
                generateChangelog: data.generateChangelog
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the request is not authenticated as the app that provided all the fields.',
                404: 'Returned if any field is not found.'
            }
        });
    }
    
    /**
     * Update custom field value
     * Updates the value of a custom field on one or more issues.
     *
     * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
     *
     * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     * @param data The data for the request.
     * @param data.fieldIdOrKey The ID or key of the custom field. For example, `customfield_10010`.
     * @param data.requestBody
     * @param data.generateChangelog Whether to generate a changelog for this update.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateCustomFieldValue(data: UpdateCustomFieldValueData): CancelablePromise<UpdateCustomFieldValueResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/app/field/{fieldIdOrKey}/value',
            path: {
                fieldIdOrKey: data.fieldIdOrKey
            },
            query: {
                generateChangelog: data.generateChangelog
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the request is not authenticated as the app that provided the field.',
                404: 'Returned if the field is not found.'
            }
        });
    }
    
}

export class IssueCustomFieldConfigurationAppsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get custom field configurations
     * Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
     *
     * The result can be filtered by one of these criteria:
     *
     * *  `id`.
     * *  `fieldContextId`.
     * *  `issueId`.
     * *  `projectKeyOrId` and `issueTypeId`.
     *
     * Otherwise, all configurations are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.
     * @param data The data for the request.
     * @param data.fieldIdOrKey The ID or key of the custom field, for example `customfield_10000`.
     * @param data.id The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
     * @param data.fieldContextId The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
     * @param data.issueId The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.
     * @param data.projectKeyOrId The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.
     * @param data.issueTypeId The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanContextualConfiguration Returned if the request is successful.
     * @throws ApiError
     */
    public getCustomFieldConfiguration(data: GetCustomFieldConfigurationData): CancelablePromise<GetCustomFieldConfigurationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration',
            path: {
                fieldIdOrKey: data.fieldIdOrKey
            },
            query: {
                id: data.id,
                fieldContextId: data.fieldContextId,
                issueId: data.issueId,
                projectKeyOrId: data.projectKeyOrId,
                issueTypeId: data.issueTypeId,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
    /**
     * Update custom field configurations
     * Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.
     * @param data The data for the request.
     * @param data.fieldIdOrKey The ID or key of the custom field, for example `customfield_10000`.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateCustomFieldConfiguration(data: UpdateCustomFieldConfigurationData): CancelablePromise<UpdateCustomFieldConfigurationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration',
            path: {
                fieldIdOrKey: data.fieldIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
}

export class JiraSettingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get application property
     * Returns all application properties or an application property.
     *
     * If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.key The key of the application property.
     * @param data.permissionLevel The permission level of all items being returned in the list.
     * @param data.keyFilter When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.
     * @returns ApplicationProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getApplicationProperty(data: GetApplicationPropertyData = {}): CancelablePromise<GetApplicationPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/application-properties',
            query: {
                key: data.key,
                permissionLevel: data.permissionLevel,
                keyFilter: data.keyFilter
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the application property is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get advanced settings
     * Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns ApplicationProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getAdvancedSettings(): CancelablePromise<GetAdvancedSettingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/application-properties/advanced-settings',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not an administrator.'
            }
        });
    }
    
    /**
     * Set application property
     * Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
     *
     * #### Advanced settings ####
     *
     * The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |
     * | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |
     * | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |
     * | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |
     * | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |
     * | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |
     * | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |
     * | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |
     * | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |
     *
     *
     * #### Look and feel ####
     *
     * The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |
     * | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |
     * | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |
     * | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |
     * | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |
     * | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |
     * | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |
     * | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |
     * | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |
     * | `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |
     * | `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |
     * | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |
     * | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |
     * | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |
     * | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |
     *
     *
     * #### Other settings ####
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |
     *
     *
     * *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The key of the application property to update.
     * @param data.requestBody
     * @returns ApplicationProperty Returned if the request is successful.
     * @throws ApiError
     */
    public setApplicationProperty(data: SetApplicationPropertyData): CancelablePromise<SetApplicationPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/application-properties/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to edit the property.',
                404: 'Returned if the property is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get global settings
     * Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns Configuration Returned if the request is successful.
     * @throws ApiError
     */
    public getConfiguration(): CancelablePromise<GetConfigurationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/configuration',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
}

export class ApplicationRolesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all application roles
     * Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns ApplicationRole Returned if the request is successful.
     * @throws ApiError
     */
    public getAllApplicationRoles(): CancelablePromise<GetAllApplicationRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/applicationrole',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not an administrator.'
            }
        });
    }
    
    /**
     * Get application role
     * Returns an application role.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.key The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role.
     * @returns ApplicationRole Returned if the request is successful.
     * @throws ApiError
     */
    public getApplicationRole(data: GetApplicationRoleData): CancelablePromise<GetApplicationRoleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/applicationrole/{key}',
            path: {
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not an administrator.',
                404: 'Returned if the role is not found.'
            }
        });
    }
    
}

export class IssueAttachmentsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get attachment content
     * Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.
     *
     * To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @param data.redirect Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
     * @returns unknown Returned if the request is successful when `redirect` is set to `false`.
     * @throws ApiError
     */
    public getAttachmentContent(data: GetAttachmentContentData): CancelablePromise<GetAttachmentContentResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/content/{id}',
            path: {
                id: data.id
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                303: 'Returned if the request is successful. See the `Location` header for the download URL.',
                400: 'Returned if the range supplied in the `Range` header is malformed.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'The user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.`,
                416: 'Returned if the server is unable to satisfy the range of bytes provided.'
            }
        });
    }
    
    /**
     * Get Jira attachment settings
     * Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
     *
     * Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns AttachmentSettings Returned if the request is successful.
     * @throws ApiError
     */
    public getAttachmentMeta(): CancelablePromise<GetAttachmentMetaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/meta',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get attachment thumbnail
     * Returns the thumbnail of an attachment.
     *
     * To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @param data.redirect Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
     * @param data.fallbackToDefault Whether a default thumbnail is returned when the requested thumbnail is not found.
     * @param data.width The maximum width to scale the thumbnail to.
     * @param data.height The maximum height to scale the thumbnail to.
     * @returns unknown Returned if the request is successful when `redirect` is set to `false`.
     * @throws ApiError
     */
    public getAttachmentThumbnail(data: GetAttachmentThumbnailData): CancelablePromise<GetAttachmentThumbnailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/thumbnail/{id}',
            path: {
                id: data.id
            },
            query: {
                redirect: data.redirect,
                fallbackToDefault: data.fallbackToDefault,
                width: data.width,
                height: data.height
            },
            errors: {
                303: 'Returned if the request is successful. See the `Location` header for the download URL.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'The user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.
 *  \`fallbackToDefault\` is \`false\` and the request thumbnail cannot be downloaded.`
            }
        });
    }
    
    /**
     * Delete attachment
     * Deletes an attachment from an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
     *
     * *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
     * *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeAttachment(data: RemoveAttachmentData): CancelablePromise<RemoveAttachmentResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/attachment/{id}',
            path: {
                id: data.id
            },
            errors: {
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.`
            }
        });
    }
    
    /**
     * Get attachment metadata
     * Returns the metadata for an attachment. Note that the attachment itself is not returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @returns AttachmentMetadata Returned if the request is successful.
     * @throws ApiError
     */
    public getAttachment(data: GetAttachmentData): CancelablePromise<GetAttachmentResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.`
            }
        });
    }
    
    /**
     * Get all metadata for an expanded attachment
     * Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
     *
     * Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @returns AttachmentArchiveMetadataReadable Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
     * @throws ApiError
     */
    public expandAttachmentForHumans(data: ExpandAttachmentForHumansData): CancelablePromise<ExpandAttachmentForHumansResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/{id}/expand/human',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'The user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.`,
                409: 'Returned if the attachment is an archive, but not a supported archive format.'
            }
        });
    }
    
    /**
     * Get contents metadata for an expanded attachment
     * Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
     *
     * Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.id The ID of the attachment.
     * @returns AttachmentArchiveImpl Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
     * @throws ApiError
     */
    public expandAttachmentForMachines(data: ExpandAttachmentForMachinesData): CancelablePromise<ExpandAttachmentForMachinesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/attachment/{id}/expand/raw',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'The user does not have the necessary permission.',
                404: `Returned if:

 *  the attachment is not found.
 *  attachments are disabled in the Jira settings.`,
                409: 'Returned if the attachment is an archive, but not a supported archive format.'
            }
        });
    }
    
    /**
     * Add attachment
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
     *
     * Note that:
     *
     * *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
     * *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
     *
     * The following examples upload a file called *myfile.txt* to the issue *TEST-123*:
     *
     * #### curl ####
     *
     * curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
     * -u 'email@example.com:<api_token>'
     * -H 'X-Atlassian-Token: no-check'
     * --form 'file=@"myfile.txt"'
     *
     * #### Node.js ####
     *
     * // This code sample uses the 'node-fetch' and 'form-data' libraries:
     * // https://www.npmjs.com/package/node-fetch
     * // https://www.npmjs.com/package/form-data
     * const fetch = require('node-fetch');
     * const FormData = require('form-data');
     * const fs = require('fs');
     *
     * const filePath = 'myfile.txt';
     * const form = new FormData();
     * const stats = fs.statSync(filePath);
     * const fileSizeInBytes = stats.size;
     * const fileStream = fs.createReadStream(filePath);
     *
     * form.append('file', fileStream, {knownLength: fileSizeInBytes});
     *
     * fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
     * method: 'POST',
     * body: form,
     * headers: {
     * 'Authorization': `Basic ${Buffer.from(
     * 'email@example.com:'
     * ).toString('base64')}`,
     * 'Accept': 'application/json',
     * 'X-Atlassian-Token': 'no-check'
     * }
     * })
     * .then(response => {
     * console.log(
     * `Response: ${response.status} ${response.statusText}`
     * );
     * return response.text();
     * })
     * .then(text => console.log(text))
     * .catch(err => console.error(err));
     *
     * #### Java ####
     *
     * // This code sample uses the  'Unirest' library:
     * // http://unirest.io/java.html
     * HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
     * .basicAuth("email@example.com", "")
     * .header("Accept", "application/json")
     * .header("X-Atlassian-Token", "no-check")
     * .field("file", new File("myfile.txt"))
     * .asJson();
     *
     * System.out.println(response.getBody());
     *
     * #### Python ####
     *
     * # This code sample uses the 'requests' library:
     * # http://docs.python-requests.org
     * import requests
     * from requests.auth import HTTPBasicAuth
     * import json
     *
     * url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
     *
     * auth = HTTPBasicAuth("email@example.com", "")
     *
     * headers = {
     * "Accept": "application/json",
     * "X-Atlassian-Token": "no-check"
     * }
     *
     * response = requests.request(
     * "POST",
     * url,
     * headers = headers,
     * auth = auth,
     * files = {
     * "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
     * }
     * )
     *
     * print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))
     *
     * #### PHP ####
     *
     * // This code sample uses the 'Unirest' library:
     * // http://unirest.io/php.html
     * Unirest\Request::auth('email@example.com', '');
     *
     * $headers = array(
     * 'Accept' => 'application/json',
     * 'X-Atlassian-Token' => 'no-check'
     * );
     *
     * $parameters = array(
     * 'file' => File::add('myfile.txt')
     * );
     *
     * $response = Unirest\Request::post(
     * 'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
     * $headers,
     * $parameters
     * );
     *
     * var_dump($response)
     *
     * #### Forge ####
     *
     * // This sample uses Atlassian Forge and the `form-data` library.
     * // https://developer.atlassian.com/platform/forge/
     * // https://www.npmjs.com/package/form-data
     * import api from "@forge/api";
     * import FormData from "form-data";
     *
     * const form = new FormData();
     * form.append('file', fileStream, {knownLength: fileSizeInBytes});
     *
     * const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
     * method: 'POST',
     * body: form,
     * headers: {
     * 'Accept': 'application/json',
     * 'X-Atlassian-Token': 'no-check'
     * }
     * });
     *
     * console.log(`Response: ${response.status} ${response.statusText}`);
     * console.log(await response.json());
     *
     * Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue that attachments are added to.
     * @param data.formData
     * @returns Attachment Returned if the request is successful.
     * @throws ApiError
     */
    public addAttachment(data: AddAttachmentData): CancelablePromise<AddAttachmentResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/attachments',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            formData: data.formData as unknown as Record<string, unknown>,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  the issue is not found.
 *  the user does not have permission to view the issue.`,
                413: `Returned if any of the following is true:

 *  the attachments exceed the maximum attachment size for issues.
 *  more than 60 files are requested to be uploaded.
 *  the per-issue limit for attachments has been breached.

See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.`
            }
        });
    }
    
}

export class AuditRecordsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get audit records
     * Returns a list of audit records. The list can be filtered to include items:
     *
     * *  where each item in `filter` has at least one match in any of these fields:
     *
     * *  `summary`
     * *  `category`
     * *  `eventSource`
     * *  `objectItem.name` If the object is a user, account ID is available to filter.
     * *  `objectItem.parentName`
     * *  `objectItem.typeName`
     * *  `changedValues.changedFrom`
     * *  `changedValues.changedTo`
     * *  `remoteAddress`
     *
     * For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
     * *  created on or after a date and time.
     * *  created or or before a date and time.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.offset The number of records to skip before returning the first result.
     * @param data.limit The maximum number of results to return.
     * @param data.filter The strings to match with audit field content, space separated.
     * @param data.from The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.
     * @param data.to The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.
     * @returns AuditRecords Returned if the request is successful.
     * @throws ApiError
     */
    public getAuditRecords(data: GetAuditRecordsData = {}): CancelablePromise<GetAuditRecordsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/auditing/record',
            query: {
                offset: data.offset,
                limit: data.limit,
                filter: data.filter,
                from: data.from,
                to: data.to
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: `Returned if:

 *  the user does not have the required permissions.
 *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.`
            }
        });
    }
    
}

export class AvatarsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get system avatars by type
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.type The avatar type.
     * @returns SystemAvatars Returned if the request is successful.
     * @throws ApiError
     */
    public getAllSystemAvatars(data: GetAllSystemAvatarsData): CancelablePromise<GetAllSystemAvatarsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/avatar/{type}/system',
            path: {
                type: data.type
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                500: 'Returned if an error occurs while retrieving the list of avatars.'
            }
        });
    }
    
    /**
     * Get avatars
     * Returns the system and custom avatars for a project or issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     * *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * *  for system avatars, none.
     * @param data The data for the request.
     * @param data.type The avatar type.
     * @param data.entityId The ID of the item the avatar is associated with.
     * @returns Avatars Returned if the request is successful.
     * @throws ApiError
     */
    public getAvatars(data: GetAvatarsData): CancelablePromise<GetAvatarsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}',
            path: {
                type: data.type,
                entityId: data.entityId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.'
            }
        });
    }
    
    /**
     * Load avatar
     * Loads a custom avatar for a project or issue type.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     * *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     * *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST `
     *
     * `--user email@example.com:<api_token> `
     *
     * `--header 'X-Atlassian-Token: no-check' `
     *
     * `--header 'Content-Type: image/< image_type>' `
     *
     * `--data-binary "<@/path/to/file/with/your/avatar>" `
     *
     * `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar use:
     *
     * *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
     * *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.type The avatar type.
     * @param data.entityId The ID of the item the avatar is associated with.
     * @param data.requestBody
     * @param data.x The X coordinate of the top-left corner of the crop region.
     * @param data.y The Y coordinate of the top-left corner of the crop region.
     * @param data.size The length of each side of the crop region.
     * @returns Avatar Returned if the request is successful.
     * @throws ApiError
     */
    public storeAvatar(data: StoreAvatarData): CancelablePromise<StoreAvatarResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}',
            path: {
                type: data.type,
                entityId: data.entityId
            },
            query: {
                x: data.x,
                y: data.y,
                size: data.size
            },
            body: data.requestBody,
            mediaType: '*/*',
            errors: {
                400: `Returned if:

 *  an image isn't included in the request.
 *  the image type is unsupported.
 *  the crop parameters extend the crop area beyond the edge of the image.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.',
                404: 'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.'
            }
        });
    }
    
    /**
     * Delete avatar
     * Deletes an avatar from a project or issue type.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.type The avatar type.
     * @param data.owningObjectId The ID of the item the avatar is associated with.
     * @param data.id The ID of the avatar.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteAvatar(data: DeleteAvatarData): CancelablePromise<DeleteAvatarResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}',
            path: {
                type: data.type,
                owningObjectId: data.owningObjectId,
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the user does not have permission to delete the avatar, the avatar is not deletable.',
                404: 'Returned if the avatar type, associated item ID, or avatar ID is invalid.'
            }
        });
    }
    
    /**
     * Get avatar image by type
     * Returns the default project or issue type avatar image.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.type The icon type of the avatar.
     * @param data.size The size of the avatar image. If not provided the default size is returned.
     * @param data.format The format to return the avatar image in. If not provided the original content format is returned.
     * @returns StreamingResponseBody Returned if the request is successful.
     * @throws ApiError
     */
    public getAvatarImageByType(data: GetAvatarImageByTypeData): CancelablePromise<GetAvatarImageByTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/universal_avatar/view/type/{type}',
            path: {
                type: data.type
            },
            query: {
                size: data.size,
                format: data.format
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if an avatar is not found or an avatar matching the requested size is not found.'
            }
        });
    }
    
    /**
     * Get avatar image by ID
     * Returns a project or issue type avatar image by ID.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  For system avatars, none.
     * *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     * *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param data The data for the request.
     * @param data.type The icon type of the avatar.
     * @param data.id The ID of the avatar.
     * @param data.size The size of the avatar image. If not provided the default size is returned.
     * @param data.format The format to return the avatar image in. If not provided the original content format is returned.
     * @returns StreamingResponseBody Returned if the request is successful.
     * @throws ApiError
     */
    public getAvatarImageById(data: GetAvatarImageByIdData): CancelablePromise<GetAvatarImageByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}',
            path: {
                type: data.type,
                id: data.id
            },
            query: {
                size: data.size,
                format: data.format
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if an avatar is not found or an avatar matching the requested size is not found.'
            }
        });
    }
    
    /**
     * Get avatar image by owner
     * Returns the avatar image for a project or issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  For system avatars, none.
     * *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     * *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param data The data for the request.
     * @param data.type The icon type of the avatar.
     * @param data.entityId The ID of the project or issue type the avatar belongs to.
     * @param data.size The size of the avatar image. If not provided the default size is returned.
     * @param data.format The format to return the avatar image in. If not provided the original content format is returned.
     * @returns StreamingResponseBody Returned if the request is successful.
     * @throws ApiError
     */
    public getAvatarImageByOwner(data: GetAvatarImageByOwnerData): CancelablePromise<GetAvatarImageByOwnerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}',
            path: {
                type: data.type,
                entityId: data.entityId
            },
            query: {
                size: data.size,
                format: data.format
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if an avatar is not found or an avatar matching the requested size is not found.'
            }
        });
    }
    
}

export class ClassificationLevelsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all classification levels
     * Returns all classification levels.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.status Optional set of statuses to filter by.
     * @param data.orderBy Ordering of the results by a given field. If not provided, values will not be sorted.
     * @returns DataClassificationLevelsBean Returned if the request is successful.
     * @throws ApiError
     */
    public getAllUserDataClassificationLevels(data: GetAllUserDataClassificationLevelsData = {}): CancelablePromise<GetAllUserDataClassificationLevelsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/classification-levels',
            query: {
                status: data.status,
                orderBy: data.orderBy
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
}

export class IssueCommentsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get comments by IDs
     * Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Comments are returned where the user:
     *
     * *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.requestBody The list of comment IDs.
     * @param data.expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `renderedBody` Returns the comment body rendered in HTML.
     * *  `properties` Returns the comment's properties.
     * @returns PageBeanComment Returned if the request is successful.
     * @throws ApiError
     */
    public getCommentsByIds(data: GetCommentsByIdsData): CancelablePromise<GetCommentsByIdsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/comment/list',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request contains more than 1000 IDs or is empty.'
            }
        });
    }
    
    /**
     * Get comments
     * Returns all comments for an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Comments are included in the response where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.
     * @param data.expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
     * @returns PageOfComments Returned if the request is successful.
     * @throws ApiError
     */
    public getComments(data: GetCommentsData): CancelablePromise<GetCommentsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/comment',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy,
                expand: data.expand
            },
            errors: {
                400: 'Returned if `orderBy` is set to a value other than *created*.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Add comment
     * Adds a comment to an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody
     * @param data.expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
     * @returns Comment Returned if the request is successful.
     * @throws ApiError
     */
    public addComment(data: AddCommentData): CancelablePromise<AddCommentResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/comment',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.',
                413: `Returned if the per-issue limit has been breached for one of the following fields:

 *  comments
 *  attachments`
            }
        });
    }
    
    /**
     * Delete comment
     * Deletes a comment.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
     * *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.id The ID of the comment.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteComment(data: DeleteCommentData): CancelablePromise<DeleteCommentResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            errors: {
                400: 'Returned if the user does not have permission to delete the comment.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.',
                405: 'Returned if an anonymous call is made to the operation.'
            }
        });
    }
    
    /**
     * Get comment
     * Returns a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.id The ID of the comment.
     * @param data.expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
     * @returns Comment Returned if the request is successful.
     * @throws ApiError
     */
    public getComment(data: GetCommentData): CancelablePromise<GetCommentResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.'
            }
        });
    }
    
    /**
     * Update comment
     * Updates a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
     * *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.id The ID of the comment.
     * @param data.requestBody
     * @param data.notifyUsers Whether users are notified when a comment is updated.
     * @param data.overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data.expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
     * @returns Comment Returned if the request is successful.
     * @throws ApiError
     */
    public updateComment(data: UpdateCommentData): CancelablePromise<UpdateCommentResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            query: {
                notifyUsers: data.notifyUsers,
                overrideEditableFlag: data.overrideEditableFlag,
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the user does not have permission to edit the comment or the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.'
            }
        });
    }
    
}

export class IssueCommentPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get comment property keys
     * Returns the keys of all the properties of a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.commentId The ID of the comment.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getCommentPropertyKeys(data: GetCommentPropertyKeysData): CancelablePromise<GetCommentPropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/comment/{commentId}/properties',
            path: {
                commentId: data.commentId
            },
            errors: {
                400: 'Returned if the comment ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the comment is not found.'
            }
        });
    }
    
    /**
     * Delete comment property
     * Deletes a comment property.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
     * *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
     *
     * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @param data The data for the request.
     * @param data.commentId The ID of the comment.
     * @param data.propertyKey The key of the property.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteCommentProperty(data: DeleteCommentPropertyData): CancelablePromise<DeleteCommentPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
            path: {
                commentId: data.commentId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: "Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to."
            }
        });
    }
    
    /**
     * Get comment property
     * Returns the value of a comment property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.commentId The ID of the comment.
     * @param data.propertyKey The key of the property.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getCommentProperty(data: GetCommentPropertyData): CancelablePromise<GetCommentPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
            path: {
                commentId: data.commentId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the comment or the property is not found.'
            }
        });
    }
    
    /**
     * Set comment property
     * Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
     * *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
     *
     * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @param data The data for the request.
     * @param data.commentId The ID of the comment.
     * @param data.propertyKey The key of the property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the comment property is updated.
     * @throws ApiError
     */
    public setCommentProperty(data: SetCommentPropertyData): CancelablePromise<SetCommentPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
            path: {
                commentId: data.commentId,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the comment is not found.'
            }
        });
    }
    
}

export class ProjectComponentsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find components for projects
     * Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdsOrKeys The project IDs and/or project keys (case sensitive).
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `description` Sorts by the component description.
     * *  `name` Sorts by component name.
     * @param data.query Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
     * @returns PageBean2ComponentJsonBean Returned if the request is successful.
     * @throws ApiError
     */
    public findComponentsForProjects(data: FindComponentsForProjectsData = {}): CancelablePromise<FindComponentsForProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/component',
            query: {
                projectIdsOrKeys: data.projectIdsOrKeys,
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy,
                query: data.query
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Create component
     * Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProjectComponent Returned if the request is successful.
     * @throws ApiError
     */
    public createComponent(data: CreateComponentData): CancelablePromise<CreateComponentResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/component',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the user is not found.
 *  \`name\` is not provided.
 *  \`name\` is over 255 characters in length.
 *  \`projectId\` is not provided.
 *  \`assigneeType\` is an invalid value.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
                404: 'Returned if the project is not found or the user does not have permission to browse the project containing the component.'
            }
        });
    }
    
    /**
     * Delete component
     * Deletes a component.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the component.
     * @param data.moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteComponent(data: DeleteComponentData): CancelablePromise<DeleteComponentResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/component/{id}',
            path: {
                id: data.id
            },
            query: {
                moveIssuesTo: data.moveIssuesTo
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
                404: `Returned if:

 *  the component is not found.
 *  the replacement component is not found.
 *  the user does not have permission to browse the project containing the component.`
            }
        });
    }
    
    /**
     * Get component
     * Returns a component.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     * @param data The data for the request.
     * @param data.id The ID of the component.
     * @returns ProjectComponent Returned if the request is successful.
     * @throws ApiError
     */
    public getComponent(data: GetComponentData): CancelablePromise<GetComponentResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/component/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the component is not found or the user does not have permission to browse the project containing the component.'
            }
        });
    }
    
    /**
     * Update component
     * Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the component.
     * @param data.requestBody
     * @returns ProjectComponent Returned if the request is successful.
     * @throws ApiError
     */
    public updateComponent(data: UpdateComponentData): CancelablePromise<UpdateComponentResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/component/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the user is not found.
 *  \`assigneeType\` is an invalid value.
 *  \`name\` is over 255 characters in length.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
                404: 'Returned if the component is not found or the user does not have permission to browse the project containing the component.'
            }
        });
    }
    
    /**
     * Get component issues count
     * Returns the counts of issues assigned to the component.
     *
     * This operation can be accessed anonymously.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     * *  **Classic**: `read:jira-work`
     * *  **Granular**: `read:field:jira`, `read:project.component:jira`
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.id The ID of the component.
     * @returns ComponentIssuesCount Returned if the request is successful.
     * @throws ApiError
     */
    public getComponentRelatedIssues(data: GetComponentRelatedIssuesData): CancelablePromise<GetComponentRelatedIssuesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/component/{id}/relatedIssueCounts',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the component is not found.'
            }
        });
    }
    
    /**
     * Get project components paginated
     * Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
     *
     * If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `description` Sorts by the component description.
     * *  `issueCount` Sorts by the count of issues associated with the component.
     * *  `lead` Sorts by the user key of the component's project lead.
     * *  `name` Sorts by component name.
     * @param data.componentSource The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
     * @param data.query Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
     * @returns PageBeanComponentWithIssueCount Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectComponentsPaginated(data: GetProjectComponentsPaginatedData): CancelablePromise<GetProjectComponentsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/component',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy,
                componentSource: data.componentSource,
                query: data.query
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get project components
     * Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
     *
     * If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.componentSource The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
     * @returns ProjectComponent Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectComponents(data: GetProjectComponentsData): CancelablePromise<GetProjectComponentsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/components',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                componentSource: data.componentSource
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
}

export class TimeTrackingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get selected time tracking provider
     * Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns TimeTrackingProvider Returned if the request is successful and time tracking is enabled.
     * @returns unknown Returned if the request is successful but time tracking is disabled.
     * @throws ApiError
     */
    public getSelectedTimeTrackingImplementation(): CancelablePromise<GetSelectedTimeTrackingImplementationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/configuration/timetracking',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Select time tracking provider
     * Selects a time tracking provider.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public selectTimeTrackingImplementation(data: SelectTimeTrackingImplementationData): CancelablePromise<SelectTimeTrackingImplementationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/configuration/timetracking',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the time tracking provider is not found.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get all time tracking providers
     * Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns TimeTrackingProvider Returned if the request is successful.
     * @throws ApiError
     */
    public getAvailableTimeTrackingImplementations(): CancelablePromise<GetAvailableTimeTrackingImplementationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/configuration/timetracking/list',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get time tracking settings
     * Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns TimeTrackingConfiguration Returned if the request is successful.
     * @throws ApiError
     */
    public getSharedTimeTrackingConfiguration(): CancelablePromise<GetSharedTimeTrackingConfigurationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/configuration/timetracking/options',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Set time tracking settings
     * Sets the time tracking settings.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TimeTrackingConfiguration Returned if the request is successful.
     * @throws ApiError
     */
    public setSharedTimeTrackingConfiguration(data: SetSharedTimeTrackingConfigurationData): CancelablePromise<SetSharedTimeTrackingConfigurationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/configuration/timetracking/options',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request object is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
}

export class IssueCustomFieldOptionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get custom field option
     * Returns a custom field option. For example, an option in a select list.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The custom field option is returned as follows:
     *
     * *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     * @param data The data for the request.
     * @param data.id The ID of the custom field option.
     * @returns CustomFieldOption Returned if the request is successful.
     * @throws ApiError
     */
    public getCustomFieldOption(data: GetCustomFieldOptionData): CancelablePromise<GetCustomFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/customFieldOption/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the custom field option is not found.
 *  the user does not have permission to view the custom field.`
            }
        });
    }
    
    /**
     * Get custom field options (context)
     * Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.optionId The ID of the option.
     * @param data.onlyOptions Whether only options are returned.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanCustomFieldContextOption Returned if the request is successful.
     * @throws ApiError
     */
    public getOptionsForContext(data: GetOptionsForContextData): CancelablePromise<GetOptionsForContextResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            query: {
                optionId: data.optionId,
                onlyOptions: data.onlyOptions,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: "Returned if the custom field is not found or the context doesn't match the custom field."
            }
        });
    }
    
    /**
     * Create custom field options (context)
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.
     *
     * The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns CustomFieldCreatedContextOptionsList Returned if the request is successful.
     * @throws ApiError
     */
    public createCustomFieldOption(data: CreateCustomFieldOptionData): CancelablePromise<CreateCustomFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: "Returned if the custom field is not found or the context doesn't match the custom field."
            }
        });
    }
    
    /**
     * Update custom field options (context)
     * Updates the options of a custom field.
     *
     * If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns CustomFieldUpdatedContextOptionsList Returned if the request is successful.
     * @throws ApiError
     */
    public updateCustomFieldOption(data: UpdateCustomFieldOptionData): CancelablePromise<UpdateCustomFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field, context, or one or more options is not found.'
            }
        });
    }
    
    /**
     * Reorder custom field options (context)
     * Changes the order of custom field options or cascading options in a context.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if options are reordered.
     * @throws ApiError
     */
    public reorderCustomFieldOptions(data: ReorderCustomFieldOptionsData): CancelablePromise<ReorderCustomFieldOptionsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option/move',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field, the context, or one or more of the options is not found..'
            }
        });
    }
    
    /**
     * Delete custom field options (context)
     * Deletes a custom field option.
     *
     * Options with cascading options cannot be deleted without deleting the cascading options first.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context from which an option should be deleted.
     * @param data.optionId The ID of the option to delete.
     * @returns void Returned if the option is deleted.
     * @throws ApiError
     */
    public deleteCustomFieldOption(data: DeleteCustomFieldOptionData): CancelablePromise<DeleteCustomFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId,
                optionId: data.optionId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field, the context, or the option is not found.'
            }
        });
    }
    
    /**
     * Replace custom field options
     * Replaces the options of a custom field.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.optionId The ID of the option to be deselected.
     * @param data.contextId The ID of the context.
     * @param data.replaceWith The ID of the option that will replace the currently selected option.
     * @param data.jql A JQL query that specifies the issues to be updated. For example, *project=10000*.
     * @throws ApiError
     */
    public replaceCustomFieldOption(data: ReplaceCustomFieldOptionData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue',
            path: {
                fieldId: data.fieldId,
                optionId: data.optionId,
                contextId: data.contextId
            },
            query: {
                replaceWith: data.replaceWith,
                jql: data.jql
            },
            errors: {
                303: 'Returned if the long-running task to deselect the option is started.',
                400: 'Returned if the request is not valid.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field is not found or does not support options, or the options to be replaced are not found.'
            }
        });
    }
    
}

export class DashboardsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all dashboards
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.filter The filter applied to the list of dashboards. Valid values are:
     *
     * *  `favourite` Returns dashboards the user has marked as favorite.
     * *  `my` Returns dashboards owned by the user.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageOfDashboards Returned if the request is successful.
     * @throws ApiError
     */
    public getAllDashboards(data: GetAllDashboardsData = {}): CancelablePromise<GetAllDashboardsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard',
            query: {
                filter: data.filter,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create dashboard
     * Creates a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.requestBody Dashboard details.
     * @returns Dashboard Returned if the request is successful.
     * @throws ApiError
     */
    public createDashboard(data: CreateDashboardData): CancelablePromise<CreateDashboardResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/dashboard',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Bulk edit dashboards
     * Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboards to be updated must be owned by the user, or the user must be an administrator.
     * @param data The data for the request.
     * @param data.requestBody The details of dashboards being updated in bulk.
     * @returns BulkEditShareableEntityResponse Returned if the request is successful.
     * @throws ApiError
     */
    public bulkEditDashboards(data: BulkEditDashboardsData): CancelablePromise<BulkEditDashboardsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/dashboard/bulk/edit',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get available gadgets
     * Gets a list of all available gadgets that can be added to all dashboards.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns AvailableDashboardGadgetsResponse Returned if the request is successful.
     * @throws ApiError
     */
    public getAllAvailableDashboardGadgets(): CancelablePromise<GetAllAvailableDashboardGadgetsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/gadgets',
            errors: {
                400: '400 response',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Search for dashboards
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
     *
     * *  Dashboards owned by the user. Not returned for anonymous users.
     * *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
     * *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
     * *  Dashboards shared with a public project.
     * *  Dashboards shared with the public.
     * @param data The data for the request.
     * @param data.dashboardName String used to perform a case-insensitive partial match with `name`.
     * @param data.accountId User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.
     * @param data.owner This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
     * @param data.projectId Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
     * *  `favourite_count` Sorts by dashboard popularity.
     * *  `id` Sorts by dashboard ID.
     * *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
     * *  `name` Sorts by dashboard name.
     * *  `owner` Sorts by dashboard owner name.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.status The status to filter by. It may be active, archived or deleted.
     * @param data.expand Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `description` Returns the description of the dashboard.
     * *  `owner` Returns the owner of the dashboard.
     * *  `viewUrl` Returns the URL that is used to view the dashboard.
     * *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
     * *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
     * *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
     * *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
     * *  `isWritable` Returns whether the current user has permission to edit the dashboard.
     * @returns PageBeanDashboard Returned if the request is successful.
     * @throws ApiError
     */
    public getDashboardsPaginated(data: GetDashboardsPaginatedData = {}): CancelablePromise<GetDashboardsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/search',
            query: {
                dashboardName: data.dashboardName,
                accountId: data.accountId,
                owner: data.owner,
                groupname: data.groupname,
                groupId: data.groupId,
                projectId: data.projectId,
                orderBy: data.orderBy,
                startAt: data.startAt,
                maxResults: data.maxResults,
                status: data.status,
                expand: data.expand
            },
            errors: {
                400: `Returned if:

 *  \`orderBy\` is invalid.
 *  \`expand\` includes an invalid value.
 *  \`accountId\` and \`owner\` are provided.
 *  \`groupname\` and \`groupId\` are provided.`,
                401: '401 response'
            }
        });
    }
    
    /**
     * Get gadgets
     * Returns a list of dashboard gadgets on a dashboard.
     *
     * This operation returns:
     *
     * *  Gadgets from a list of IDs, when `id` is set.
     * *  Gadgets with a module key, when `moduleKey` is set.
     * *  Gadgets from a list of URIs, when `uri` is set.
     * *  All gadgets, when no other parameters are set.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.moduleKey The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.
     * @param data.uri The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.
     * @param data.gadgetId The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.
     * @returns DashboardGadgetResponse Returned if the request is successful.
     * @throws ApiError
     */
    public getAllGadgets(data: GetAllGadgetsData): CancelablePromise<GetAllGadgetsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/{dashboardId}/gadget',
            path: {
                dashboardId: data.dashboardId
            },
            query: {
                moduleKey: data.moduleKey,
                uri: data.uri,
                gadgetId: data.gadgetId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the dashboard is not found.'
            }
        });
    }
    
    /**
     * Add gadget to dashboard
     * Adds a gadget to a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.requestBody
     * @returns DashboardGadget Returned if the request is successful.
     * @throws ApiError
     */
    public addGadget(data: AddGadgetData): CancelablePromise<AddGadgetResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/dashboard/{dashboardId}/gadget',
            path: {
                dashboardId: data.dashboardId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard is not found.'
            }
        });
    }
    
    /**
     * Remove gadget from dashboard
     * Removes a dashboard gadget from a dashboard.
     *
     * When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.gadgetId The ID of the gadget.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeGadget(data: RemoveGadgetData): CancelablePromise<RemoveGadgetResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}',
            path: {
                dashboardId: data.dashboardId,
                gadgetId: data.gadgetId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the gadget or the dashboard is not found.'
            }
        });
    }
    
    /**
     * Update gadget on dashboard
     * Changes the title, position, and color of the gadget on a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.gadgetId The ID of the gadget.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateGadget(data: UpdateGadgetData): CancelablePromise<UpdateGadgetResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}',
            path: {
                dashboardId: data.dashboardId,
                gadgetId: data.gadgetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the gadget or the dashboard is not found.'
            }
        });
    }
    
    /**
     * Get dashboard item property keys
     * Returns the keys of all properties for a dashboard item.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\’s anonymous access is permitted.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.itemId The ID of the dashboard item.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getDashboardItemPropertyKeys(data: GetDashboardItemPropertyKeysData): CancelablePromise<GetDashboardItemPropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties',
            path: {
                dashboardId: data.dashboardId,
                itemId: data.itemId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.'
            }
        });
    }
    
    /**
     * Delete dashboard item property
     * Deletes a dashboard item property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.itemId The ID of the dashboard item.
     * @param data.propertyKey The key of the dashboard item property.
     * @returns unknown Returned if the dashboard item property is deleted.
     * @throws ApiError
     */
    public deleteDashboardItemProperty(data: DeleteDashboardItemPropertyData): CancelablePromise<DeleteDashboardItemPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
            path: {
                dashboardId: data.dashboardId,
                itemId: data.itemId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the dashboard or dashboard item ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not the owner of the dashboard.',
                404: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.'
            }
        });
    }
    
    /**
     * Get dashboard item property
     * Returns the key and value of a dashboard item property.
     *
     * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
     *
     * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
     *
     * There is no resource to set or get dashboard items.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\’s anonymous access is permitted.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.itemId The ID of the dashboard item.
     * @param data.propertyKey The key of the dashboard item property.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getDashboardItemProperty(data: GetDashboardItemPropertyData): CancelablePromise<GetDashboardItemPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
            path: {
                dashboardId: data.dashboardId,
                itemId: data.itemId,
                propertyKey: data.propertyKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.'
            }
        });
    }
    
    /**
     * Set dashboard item property
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
     *
     * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
     *
     * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
     *
     * There is no resource to set or get dashboard items.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param data The data for the request.
     * @param data.dashboardId The ID of the dashboard.
     * @param data.itemId The ID of the dashboard item.
     * @param data.propertyKey The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body's JSON must be an object with all keys and values as strings.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the dashboard item property is updated.
     * @throws ApiError
     */
    public setDashboardItemProperty(data: SetDashboardItemPropertyData): CancelablePromise<SetDashboardItemPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
            path: {
                dashboardId: data.dashboardId,
                itemId: data.itemId,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  Request is invalid
 *  Or if all of these conditions are met in the request:
    
     *  The dashboard item has a spec URI and no complete module key
     *  The value of propertyKey is equal to "config"
     *  The request body contains a JSON object whose keys and values are not strings.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user is not the owner of the dashboard.',
                404: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.'
            }
        });
    }
    
    /**
     * Delete dashboard
     * Deletes a dashboard.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be deleted must be owned by the user.
     * @param data The data for the request.
     * @param data.id The ID of the dashboard.
     * @returns void Returned if the dashboard is deleted.
     * @throws ApiError
     */
    public deleteDashboard(data: DeleteDashboardData): CancelablePromise<DeleteDashboardResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/dashboard/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400 response',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get dashboard
     * Returns a dashboard.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     *
     * However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @param data The data for the request.
     * @param data.id The ID of the dashboard.
     * @returns Dashboard Returned if the request is successful.
     * @throws ApiError
     */
    public getDashboard(data: GetDashboardData): CancelablePromise<GetDashboardResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/dashboard/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400 response',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.'
            }
        });
    }
    
    /**
     * Update dashboard
     * Updates a dashboard, replacing all the dashboard details with those provided.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be updated must be owned by the user.
     * @param data The data for the request.
     * @param data.id The ID of the dashboard to update.
     * @param data.requestBody Replacement dashboard details.
     * @returns Dashboard Returned if the request is successful.
     * @throws ApiError
     */
    public updateDashboard(data: UpdateDashboardData): CancelablePromise<UpdateDashboardResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/dashboard/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard is not found or the dashboard is not owned by the user.'
            }
        });
    }
    
    /**
     * Copy dashboard
     * Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be copied must be owned by or shared with the user.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Dashboard details.
     * @returns Dashboard Returned if the request is successful.
     * @throws ApiError
     */
    public copyDashboard(data: CopyDashboardData): CancelablePromise<CopyDashboardResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/dashboard/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.'
            }
        });
    }
    
}

export class AppDataPoliciesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get data policy for the workspace
     * Returns data policy for the workspace.
     * @returns WorkspaceDataPolicy Returned if the request is successful
     * @throws ApiError
     */
    public getPolicy(): CancelablePromise<GetPolicyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/data-policy',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the client is not authorized to make the request.'
            }
        });
    }
    
    /**
     * Get data policy for projects
     * Returns data policies for the projects specified in the request.
     * @param data The data for the request.
     * @param data.ids A list of project identifiers. This parameter accepts a comma-separated list.
     * @returns ProjectDataPolicies Returned if the request is successful.
     * @throws ApiError
     */
    public getPolicies(data: GetPoliciesData = {}): CancelablePromise<GetPoliciesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/data-policy/project',
            query: {
                ids: data.ids
            },
            errors: {
                400: 'Returned if the request is not valid or includes invalid or not-permitted project identifiers.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the client is not authorized to make the request.'
            }
        });
    }
    
}

export class IssuesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get events
     * Returns all issue events.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns IssueEvent Returned if the request is successful.
     * @throws ApiError
     */
    public getEvents(): CancelablePromise<GetEventsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/events',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to complete this request.'
            }
        });
    }
    
    /**
     * Create issue
     * Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
     *
     * The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Creating a subtask differs from creating an issue as follows:
     *
     * *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     * *  `parent` must contain the ID or key of the parent issue.
     *
     * In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
     *
     * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.updateHistory Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
     * @returns CreatedIssue Returned if the request is successful.
     * @throws ApiError
     */
    public createIssue(data: CreateIssueData): CancelablePromise<CreateIssueResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue',
            query: {
                updateHistory: data.updateHistory
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if the request:

 *  is missing required fields.
 *  contains invalid field values.
 *  contains fields that cannot be set for the issue type.
 *  is by a user who does not have the necessary permission.
 *  is to create a subtype in a project different that of the parent issue.
 *  is for a subtask when the option to create subtasks is disabled.
 *  is invalid for any other reason.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                422: 'Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*'
            }
        });
    }
    
    /**
     * Archive issue(s) by JQL
     * Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.
     *
     * You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.
     *
     * **Note that:**
     *
     * *  you can't archive subtasks directly, only through their parent issues
     * *  you can only archive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     * **Rate limiting:** Only a single request per jira instance can be active at any given time.
     *
     *
     *
     * @param data The data for the request.
     * @param data.requestBody A JQL query specifying the issues to archive. Note that subtasks can only be archived through their parent issues.
     * @returns string Returns the URL to check the status of the submitted request.
     * @throws ApiError
     */
    public archiveIssuesAsync(data: ArchiveIssuesAsyncData): CancelablePromise<ArchiveIssuesAsyncResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/archive',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if no issues were archived due to a bad request, for example an invalid JQL query.',
                401: 'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.',
                403: 'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.',
                412: 'Returned if a request to archive issue(s) is already running.'
            }
        });
    }
    
    /**
     * Archive issue(s) by issue ID/key
     * Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.
     *
     * **Note that:**
     *
     * *  you can't archive subtasks directly, only through their parent issues
     * *  you can only archive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     *
     *
     * @param data The data for the request.
     * @param data.requestBody Contains a list of issue keys or IDs to be archived.
     * @returns IssueArchivalSyncResponse Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived.
     * @throws ApiError
     */
    public archiveIssues(data: ArchiveIssuesData): CancelablePromise<ArchiveIssuesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/archive',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if none of the issues in the request can be archived. Possible reasons:

 *  the issues weren't found
 *  the issues are subtasks
 *  the issues belong to unlicensed projects
 *  the issues belong to archived projects`,
                401: 'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.',
                403: 'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.',
                412: 'Returned if one or more issues were successfully archived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.'
            }
        });
    }
    
    /**
     * Bulk create issue
     * Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
     *
     * The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Creating a subtask differs from creating an issue as follows:
     *
     * *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     * *  `parent` the must contain the ID or key of the parent issue.
     *
     * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CreatedIssues Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:
     *
     * *  is missing required fields.
     * *  contains invalid field values.
     * *  contains fields that cannot be set for the issue type.
     * *  is by a user who does not have the necessary permission.
     * *  is to create a subtype in a project different that of the parent issue.
     * *  is for a subtask when the option to create subtasks is disabled.
     * *  is invalid for any other reason.
     * @throws ApiError
     */
    public createIssues(data: CreateIssuesData): CancelablePromise<CreateIssuesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/bulk',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if all requests are invalid. Requests may be unsuccessful when they:

 *  are missing required fields.
 *  contain invalid field values.
 *  contain fields that cannot be set for the issue type.
 *  are by a user who does not have the necessary permission.
 *  are to create a subtype in a project different that of the parent issue.
 *  is for a subtask when the option to create subtasks is disabled.
 *  are invalid for any other reason.`,
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * @deprecated
     * Get create issue metadata
     * Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).
     *
     * The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param data The data for the request.
     * @param data.projectIds List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.
     * @param data.projectKeys List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.
     * @param data.issuetypeIds List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.
     * @param data.issuetypeNames List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.
     * @param data.expand Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     * @returns IssueCreateMetadata Returned if the request is successful.
     * @throws ApiError
     */
    public getCreateIssueMeta(data: GetCreateIssueMetaData = {}): CancelablePromise<GetCreateIssueMetaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/createmeta',
            query: {
                projectIds: data.projectIds,
                projectKeys: data.projectKeys,
                issuetypeIds: data.issuetypeIds,
                issuetypeNames: data.issuetypeNames,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get create metadata issue types for a project
     * Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or key of the project.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageOfCreateMetaIssueTypes Returned if the request is successful.
     * @throws ApiError
     */
    public getCreateIssueMetaIssueTypes(data: GetCreateIssueMetaIssueTypesData): CancelablePromise<GetCreateIssueMetaIssueTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get create field metadata for a project and issue type id
     * Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or key of the project.
     * @param data.issueTypeId The issuetype ID.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageOfCreateMetaIssueTypeWithField Returned if the request is successful.
     * @throws ApiError
     */
    public getCreateIssueMetaIssueTypeId(data: GetCreateIssueMetaIssueTypeIdData): CancelablePromise<GetCreateIssueMetaIssueTypeIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                issueTypeId: data.issueTypeId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get issue limit report
     * Returns all issues breaching and approaching per-issue limits.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IssueLimitReportResponseBean Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueLimitReport(data: GetIssueLimitReportData): CancelablePromise<GetIssueLimitReportResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/limit/report',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if the request is invalid. Other possible reasons:

 *  the field queried is not supported
 *  the threshold is not within the supported range`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to complete this request.'
            }
        });
    }
    
    /**
     * Unarchive issue(s) by issue keys/ID
     * Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.
     *
     * **Note that:**
     *
     * *  you can't unarchive subtasks directly, only through their parent issues
     * *  you can only unarchive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     *
     *
     * @param data The data for the request.
     * @param data.requestBody Contains a list of issue keys or IDs to be unarchived.
     * @returns IssueArchivalSyncResponse Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived.
     * @throws ApiError
     */
    public unarchiveIssues(data: UnarchiveIssuesData): CancelablePromise<UnarchiveIssuesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/unarchive',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if none of the issues in the request are eligible to be unarchived. Possible reasons:

 *  the issues weren't found
 *  the issues are subtasks
 *  the issues belong to archived projects`,
                401: 'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.',
                403: 'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.',
                412: 'Returned if one or more issues were successfully unarchived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.'
            }
        });
    }
    
    /**
     * Delete issue
     * Deletes an issue.
     *
     * An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.deleteSubtasks Whether the issue's subtasks are deleted when the issue is deleted.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteIssue(data: DeleteIssueData): CancelablePromise<DeleteIssueResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                deleteSubtasks: data.deleteSubtasks
            },
            errors: {
                400: 'Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to delete the issue.',
                404: 'Returned if the issue is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Get issue
     * Returns the details for an issue.
     *
     * The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.fields A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:
     *
     * *  `*all` Returns all fields.
     * *  `*navigable` Returns navigable fields.
     * *  Any issue field, prefixed with a minus to exclude.
     *
     * Examples:
     *
     * *  `summary,comment` Returns only the summary and comments fields.
     * *  `-description` Returns all (default) fields except description.
     * *  `*navigable,-comment` Returns all navigable fields except comment.
     *
     * This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.
     *
     * Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.
     * @param data.fieldsByKeys Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
     * @param data.expand Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `renderedFields` Returns field values rendered in HTML format.
     * *  `names` Returns the display name of each field.
     * *  `schema` Returns the schema describing a field type.
     * *  `transitions` Returns all possible transitions for the issue.
     * *  `editmeta` Returns information about how each field can be edited.
     * *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
     * *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
     * @param data.properties A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:
     *
     * *  `*all` Returns all issue properties.
     * *  Any issue property key, prefixed with a minus to exclude.
     *
     * Examples:
     *
     * *  `*all` Returns all properties.
     * *  `*all,-prop1` Returns all properties except `prop1`.
     * *  `prop1,prop2` Returns `prop1` and `prop2` properties.
     *
     * This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
     * @param data.updateHistory Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.
     * @returns IssueBean Returned if the request is successful.
     * @throws ApiError
     */
    public getIssue(data: GetIssueData): CancelablePromise<GetIssueResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                fields: data.fields,
                fieldsByKeys: data.fieldsByKeys,
                expand: data.expand,
                properties: data.properties,
                updateHistory: data.updateHistory
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Edit issue
     * Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.
     *
     * The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
     *
     * The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody
     * @param data.notifyUsers Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.
     * @param data.overrideScreenSecurity Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data.overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data.returnIssue Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).
     * @param data.expand The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.
     * @returns unknown Returned if the request is successful and the `returnIssue` parameter is `true`
     * @throws ApiError
     */
    public editIssue(data: EditIssueData): CancelablePromise<EditIssueResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                notifyUsers: data.notifyUsers,
                overrideScreenSecurity: data.overrideScreenSecurity,
                overrideEditableFlag: data.overrideEditableFlag,
                returnIssue: data.returnIssue,
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the request body is missing.
 *  the user does not have the necessary permission to edit one or more fields.
 *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.
 *  the request includes an invalid transition.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission.",
                404: 'Returned if the issue is not found or the user does not have permission to view it.',
                409: 'Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*',
                422: 'Returned if a configuration problem prevents the issue being updated. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*'
            }
        });
    }
    
    /**
     * Assign issue
     * Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
     *
     * If `name` or `accountId` is set to:
     *
     * *  `"-1"`, the issue is assigned to the default assignee for the project.
     * *  `null`, the issue is set to unassigned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue to be assigned.
     * @param data.requestBody The request object with the user that the issue is assigned to.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public assignIssue(data: AssignIssueData): CancelablePromise<AssignIssueResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/assignee',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the user is not found.
 *  \`name\`, \`key\`, or \`accountId\` is missing.
 *  more than one of \`name\`, \`key\`, and \`accountId\` are provided.`,
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the issue is not found.'
            }
        });
    }
    
    /**
     * Get changelogs
     * Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanChangelog Returned if the request is successful.
     * @throws ApiError
     */
    public getChangeLogs(data: GetChangeLogsData): CancelablePromise<GetChangeLogsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/changelog',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get changelogs by IDs
     * Returns changelogs for an issue specified by a list of changelog IDs.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody
     * @returns PageOfChangelogs Returned if the request is successful.
     * @throws ApiError
     */
    public getChangeLogsByIds(data: GetChangeLogsByIdsData): CancelablePromise<GetChangeLogsByIdsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/changelog/list',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                404: 'Returned if the issue is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get edit issue metadata
     * Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
     *
     * This endpoint will check for these conditions:
     *
     * 1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
     * 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
     * 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
     * 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
     * 5.  Issue has a project, issue type, and status defined.
     * 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
     * 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
     * 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
     * 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.
     *
     * Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.
     *
     * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:
     *
     * *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
     * *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.overrideScreenSecurity Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data.overrideEditableFlag Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns IssueUpdateMetadata Returned if the request is successful.
     * @throws ApiError
     */
    public getEditIssueMeta(data: GetEditIssueMetaData): CancelablePromise<GetEditIssueMetaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/editmeta',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                overrideScreenSecurity: data.overrideScreenSecurity,
                overrideEditableFlag: data.overrideEditableFlag
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user uses an override parameter but doesn't have permission to do so.",
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Send notification for issue
     * Creates an email notification for an issue and adds it to the mail queue.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey ID or key of the issue that the notification is sent for.
     * @param data.requestBody The request object for the notification and recipients.
     * @returns unknown Returned if the email is queued for sending.
     * @throws ApiError
     */
    public notify(data: NotifyData): CancelablePromise<NotifyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/notify',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the recipient is the same as the calling user.
 *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.
 *  the request is invalid. For example, required fields are missing or have invalid values.`,
                403: `Returned if:

 *  outgoing emails are disabled.
 *  no SMTP server is configured.`,
                404: 'Returned if the issue is not found.'
            }
        });
    }
    
    /**
     * Get transitions
     * Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
     *
     * Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.expand Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).
     * @param data.transitionId The ID of the transition.
     * @param data.skipRemoteOnlyCondition Whether transitions with the condition *Hide From User Condition* are included in the response.
     * @param data.includeUnavailableTransitions Whether details of transitions that fail a condition are included in the response
     * @param data.sortByOpsBarAndStatus Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.
     * @returns Transitions Returned if the request is successful.
     * @throws ApiError
     */
    public getTransitions(data: GetTransitionsData): CancelablePromise<GetTransitionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/transitions',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                expand: data.expand,
                transitionId: data.transitionId,
                skipRemoteOnlyCondition: data.skipRemoteOnlyCondition,
                includeUnavailableTransitions: data.includeUnavailableTransitions,
                sortByOpsBarAndStatus: data.sortByOpsBarAndStatus
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Transition issue
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
     *
     * sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public doTransition(data: DoTransitionData): CancelablePromise<DoTransitionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/transitions',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  no transition is specified.
 *  the user does not have permission to transition the issue.
 *  a field that isn't included on the transition screen is defined in \`fields\` or \`update\`.
 *  a field is specified in both \`fields\` and \`update\`.
 *  the request is invalid for any other reason.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.',
                409: 'Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*',
                413: `Returned if a per-issue limit has been breached for one of the following fields:

 *  comments
 *  worklogs
 *  attachments
 *  issue links
 *  remote issue links`,
                422: 'Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*'
            }
        });
    }
    
    /**
     * Export archived issue(s)
     * Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.
     *
     * Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     * **Rate limiting:** Only a single request can be active at any given time.
     *
     *
     *
     * @param data The data for the request.
     * @param data.requestBody You can filter the issues in your request by the `projects`, `archivedBy`, `archivedDate`, `issueTypes`, and `reporters` fields. All filters are optional. If you don't provide any filters, you'll get a list of up to one million archived issues.
     * @returns ExportArchivedIssuesTaskProgressResponse Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request.
     * @throws ApiError
     */
    public exportArchivedIssues(data: ExportArchivedIssuesData): CancelablePromise<ExportArchivedIssuesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issues/archive/export',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned when:

 *  The request is invalid, or the filters provided are incorrect
 *  You requested too many issues for export. The limit is one million issues per request`,
                401: 'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.',
                403: 'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.',
                412: 'Returned if a request to export archived issues is already running.'
            }
        });
    }
    
}

export class JiraExpressionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Analyse Jira expression
     * Analyses and validates Jira expressions.
     *
     * As an experimental feature, this operation can also attempt to type-check the expressions.
     *
     * Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
     *
     * **[Permissions](#permissions) required**: None.
     * @param data The data for the request.
     * @param data.requestBody The Jira expressions to analyse.
     * @param data.check The check to perform:
     *
     * *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
     * *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
     * *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.
     * @returns JiraExpressionsAnalysis Returned if the request is successful.
     * @throws ApiError
     */
    public analyseExpression(data: AnalyseExpressionData): CancelablePromise<AnalyseExpressionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/expression/analyse',
            query: {
                check: data.check
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400 response',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: '404 response'
            }
        });
    }
    
    /**
     * Evaluate Jira expression
     * Evaluates a Jira expression and returns its value.
     *
     * This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
     *
     * #### Context variables ####
     *
     * The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
     *
     * *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
     * *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
     * *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
     * *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
     * *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
     * *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
     * *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
     * *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
     * *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
     *
     * Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:
     *
     * *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
     * *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
     * *  `json`: A JSON object containing custom content.
     * *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.
     * Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
     * @param data The data for the request.
     * @param data.requestBody The Jira expression and the evaluation context.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
     * @returns JiraExpressionResult Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.
     * @throws ApiError
     */
    public evaluateJiraExpression(data: EvaluateJiraExpressionData): CancelablePromise<EvaluateJiraExpressionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/expression/eval',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the request is invalid, that is:
    
     *  invalid data is provided, such as a request including issue ID and key.
     *  the expression is invalid and can not be parsed.
 *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression \`issue.id\` where \`issue\` is \`null\`). In this case an error message is provided.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if any object provided in the request context is not found or the user does not have permission to view it.'
            }
        });
    }
    
}

export class IssueFieldsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get fields
     * Returns system and custom issue fields according to the following rules:
     *
     * *  Fields that cannot be added to the issue navigator are always returned.
     * *  Fields that cannot be placed on an issue screen are always returned.
     * *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
     * *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns FieldDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getFields(): CancelablePromise<GetFieldsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create custom field
     * Creates a custom field.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody Definition of the custom field to be created
     * @returns FieldDetails Returned if the custom field is created.
     * @throws ApiError
     */
    public createCustomField(data: CreateCustomFieldData): CancelablePromise<CreateCustomFieldResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the user does not have permission to create custom fields.
 *  any of the request object properties have invalid or missing values.`
            }
        });
    }
    
    /**
     * Get fields paginated
     * Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:
     *
     * *  all fields
     * *  specific fields, by defining `id`
     * *  fields that contain a string in the field name or description, by defining `query`
     * *  specific fields that contain a string in the field name or description, by defining `id` and `query`
     *
     * Only custom fields can be queried, `type` must be set to `custom`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.type The type of fields to search.
     * @param data.id The IDs of the custom fields to return or, where `query` is specified, filter.
     * @param data.query String used to perform a case-insensitive partial match with field names or descriptions.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `contextsCount` sorts by the number of contexts related to a field
     * *  `lastUsed` sorts by the date when the value of the field last changed
     * *  `name` sorts by the field name
     * *  `screensCount` sorts by the number of screens related to a field
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `key` returns the key for each field
     * *  `stableId` returns the stableId for each field
     * *  `lastUsed` returns the date when the value of the field last changed
     * *  `screensCount` returns the number of screens related to a field
     * *  `contextsCount` returns the number of contexts related to a field
     * *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)
     * *  `searcherKey` returns the searcher key for each custom field
     * @returns PageBeanField Returned if the request is successful.
     * @throws ApiError
     */
    public getFieldsPaginated(data: GetFieldsPaginatedData = {}): CancelablePromise<GetFieldsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                type: data.type,
                id: data.id,
                query: data.query,
                orderBy: data.orderBy,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get fields in trash paginated
     * Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.
     *
     * Only custom fields can be queried, `type` must be set to `custom`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id
     * @param data.query String used to perform a case-insensitive partial match with field names or descriptions.
     * @param data.expand
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `name` sorts by the field name
     * *  `trashDate` sorts by the date the field was moved to the trash
     * *  `plannedDeletionDate` sorts by the planned deletion date
     * @returns PageBeanField Returned if the request is successful.
     * @throws ApiError
     */
    public getTrashedFieldsPaginated(data: GetTrashedFieldsPaginatedData = {}): CancelablePromise<GetTrashedFieldsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/search/trashed',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                query: data.query,
                expand: data.expand,
                orderBy: data.orderBy
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Update custom field
     * Updates a custom field.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.requestBody The custom field update details.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateCustomField(data: UpdateCustomFieldData): CancelablePromise<UpdateCustomFieldResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}',
            path: {
                fieldId: data.fieldId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
    /**
     * @deprecated
     * Get contexts for a field
     * Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the field to return contexts for.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanContext Returned if the request is successful.
     * @throws ApiError
     */
    public getContextsForFieldDeprecated(data: GetContextsForFieldDeprecatedData): CancelablePromise<GetContextsForFieldDeprecatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/contexts',
            path: {
                fieldId: data.fieldId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Delete custom field
     * Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of a custom field.
     * @throws ApiError
     */
    public deleteCustomField(data: DeleteCustomFieldData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{id}',
            path: {
                id: data.id
            },
            errors: {
                303: 'Returned if the request is successful.',
                400: `Returned if any of these are true:

 *  The custom field is locked.
 *  The custom field is used in a issue security scheme or a permission scheme.
 *  The custom field ID format is incorrect.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the custom field is not found.',
                409: 'Returned if a task to delete the custom field is running.'
            }
        });
    }
    
    /**
     * Restore custom field from trash
     * Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of a custom field.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public restoreCustomField(data: RestoreCustomFieldData): CancelablePromise<RestoreCustomFieldResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{id}/restore',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
    /**
     * Move custom field to trash
     * Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of a custom field.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public trashCustomField(data: TrashCustomFieldData): CancelablePromise<TrashCustomFieldResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{id}/trash',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
}

export class IssueCustomFieldContextsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get custom field contexts
     * Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
     *
     * *  With no other parameters set, all contexts.
     * *  By defining `id` only, all contexts from the list of IDs.
     * *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
     * *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.isAnyIssueType Whether to return contexts that apply to all issue types.
     * @param data.isGlobalContext Whether to return contexts that apply to all projects.
     * @param data.contextId The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanCustomFieldContext Returned if the request is successful.
     * @throws ApiError
     */
    public getContextsForField(data: GetContextsForFieldData): CancelablePromise<GetContextsForFieldResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/context',
            path: {
                fieldId: data.fieldId
            },
            query: {
                isAnyIssueType: data.isAnyIssueType,
                isGlobalContext: data.isGlobalContext,
                contextId: data.contextId,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field was not found.'
            }
        });
    }
    
    /**
     * Create custom field context
     * Creates a custom field context.
     *
     * If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.requestBody
     * @returns CreateCustomFieldContext Returned if the custom field context is created.
     * @throws ApiError
     */
    public createCustomFieldContext(data: CreateCustomFieldContextData): CancelablePromise<CreateCustomFieldContextResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldId}/context',
            path: {
                fieldId: data.fieldId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the field, project, or issue type is not found.',
                409: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.'
            }
        });
    }
    
    /**
     * Get custom field contexts default values
     * Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.
     * The returned object depends on type of the custom field:
     *
     * *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
     * *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
     * *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
     * *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
     * *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
     * *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
     * *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
     * *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
     * *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
     * *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
     * *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
     * *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
     * *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
     * *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
     * *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
     * *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
     * *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
     * *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
     *
     * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
     *
     * *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
     * *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
     * *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
     * *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
     * *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
     * *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
     * *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
     * *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
     * *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field, for example `customfield\_10000`.
     * @param data.contextId The IDs of the contexts.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanCustomFieldContextDefaultValue Returned if the request is successful.
     * @throws ApiError
     */
    public getDefaultValues(data: GetDefaultValuesData): CancelablePromise<GetDefaultValuesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/context/defaultValue',
            path: {
                fieldId: data.fieldId
            },
            query: {
                contextId: data.contextId,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
    /**
     * Set custom field contexts default values
     * Sets default for contexts of a custom field. Default are defined using these objects:
     *
     * *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
     * *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
     * *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
     * *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
     * *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
     * *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
     * *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
     * *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
     * *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
     * *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
     * *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
     * *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
     * *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
     * *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
     * *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
     * *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
     * *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
     * *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
     *
     * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
     *
     * *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
     * *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
     * *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
     * *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
     * *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
     * *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
     * *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
     * *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
     * *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
     *
     * Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.requestBody
     * @returns unknown Returned if operation is successful.
     * @throws ApiError
     */
    public setDefaultValues(data: SetDefaultValuesData): CancelablePromise<SetDefaultValuesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/defaultValue',
            path: {
                fieldId: data.fieldId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, a context, an option, or a cascading option is not found.'
            }
        });
    }
    
    /**
     * Get issue types for custom field context
     * Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanIssueTypeToContextMapping Returned if operation is successful.
     * @throws ApiError
     */
    public getIssueTypeMappingsForContexts(data: GetIssueTypeMappingsForContextsData): CancelablePromise<GetIssueTypeMappingsForContextsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/context/issuetypemapping',
            path: {
                fieldId: data.fieldId
            },
            query: {
                contextId: data.contextId,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Get custom field contexts for projects and issue types
     * Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
     *
     * If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
     *
     * Duplicate project and issue type mappings cannot be provided in the request.
     *
     * The order of the returned values is the same as provided in the request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.requestBody The list of project and issue type mappings.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanContextForProjectAndIssueType Returned if the request is successful.
     * @throws ApiError
     */
    public getCustomFieldContextsForProjectsAndIssueTypes(data: GetCustomFieldContextsForProjectsAndIssueTypesData): CancelablePromise<GetCustomFieldContextsForProjectsAndIssueTypesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldId}/context/mapping',
            path: {
                fieldId: data.fieldId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, project, or issue type is not found.'
            }
        });
    }
    
    /**
     * Get project mappings for custom field context
     * Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field, for example `customfield\_10000`.
     * @param data.contextId The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanCustomFieldContextProjectMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectContextMapping(data: GetProjectContextMappingData): CancelablePromise<GetProjectContextMappingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/context/projectmapping',
            path: {
                fieldId: data.fieldId
            },
            query: {
                contextId: data.contextId,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field is not found.'
            }
        });
    }
    
    /**
     * Delete custom field context
     * Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @returns unknown Returned if the context is deleted.
     * @throws ApiError
     */
    public deleteCustomFieldContext(data: DeleteCustomFieldContextData): CancelablePromise<DeleteCustomFieldContextResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field or the context is not found.'
            }
        });
    }
    
    /**
     * Update custom field context
     * Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if the context is updated.
     * @throws ApiError
     */
    public updateCustomFieldContext(data: UpdateCustomFieldContextData): CancelablePromise<UpdateCustomFieldContextResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field or the context is not found.'
            }
        });
    }
    
    /**
     * Add issue types to context
     * Adds issue types to a custom field context, appending the issue types to the issue types list.
     *
     * A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.
     *
     * If any of the issue types exists in the custom field context, the operation fails and no issue types are added.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if operation is successful.
     * @throws ApiError
     */
    public addIssueTypesToContext(data: AddIssueTypesToContextData): CancelablePromise<AddIssueTypesToContextResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, context, or one or more issue types are not found.',
                409: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.'
            }
        });
    }
    
    /**
     * Remove issue types from context
     * Removes issue types from a custom field context.
     *
     * A custom field context without any issue types applies to all issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if operation is successful.
     * @throws ApiError
     */
    public removeIssueTypesFromContext(data: RemoveIssueTypesFromContextData): CancelablePromise<RemoveIssueTypesFromContextResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, context, or one or more issue types are not found.'
            }
        });
    }
    
    /**
     * Assign custom field context to projects
     * Assigns a custom field context to projects.
     *
     * If any project in the request is assigned to any context of the custom field, the operation fails.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if operation is successful.
     * @throws ApiError
     */
    public assignProjectsToCustomFieldContext(data: AssignProjectsToCustomFieldContextData): CancelablePromise<AssignProjectsToCustomFieldContextResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/project',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, context, or project is not found.'
            }
        });
    }
    
    /**
     * Remove custom field context from projects
     * Removes a custom field context from projects.
     *
     * A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.
     *
     * If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the custom field.
     * @param data.contextId The ID of the context.
     * @param data.requestBody
     * @returns unknown Returned if the custom field context is removed from the projects.
     * @throws ApiError
     */
    public removeCustomFieldContextFromProjects(data: RemoveCustomFieldContextFromProjectsData): CancelablePromise<RemoveCustomFieldContextFromProjectsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove',
            path: {
                fieldId: data.fieldId,
                contextId: data.contextId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the custom field, context, or one or more projects are not found.'
            }
        });
    }
    
}

export class ScreensService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get screens for a field
     * Returns a [paginated](#pagination) list of the screens a field is used in.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the field to return screens for.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.expand Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.
     * @returns PageBeanScreenWithTab Returned if the request is successful.
     * @throws ApiError
     */
    public getScreensForField(data: GetScreensForFieldData): CancelablePromise<GetScreensForFieldResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldId}/screens',
            path: {
                fieldId: data.fieldId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get screens
     * Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param data.queryString String used to perform a case-insensitive partial match with screen name.
     * @param data.scope The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `id` Sorts by screen ID.
     * *  `name` Sorts by screen name.
     * @returns PageBeanScreen Returned if the request is successful.
     * @throws ApiError
     */
    public getScreens(data: GetScreensData = {}): CancelablePromise<GetScreensResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screens',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                queryString: data.queryString,
                scope: data.scope,
                orderBy: data.orderBy
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Create screen
     * Creates a screen with a default field tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Screen Returned if the request is successful.
     * @throws ApiError
     */
    public createScreen(data: CreateScreenData): CancelablePromise<CreateScreenResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Add field to default screen
     * Adds a field to the default tab of the default screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.fieldId The ID of the field.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addFieldToDefaultScreen(data: AddFieldToDefaultScreenData): CancelablePromise<AddFieldToDefaultScreenResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens/addToDefault/{fieldId}',
            path: {
                fieldId: data.fieldId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field it not found or the field is already present.'
            }
        });
    }
    
    /**
     * Delete screen
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.
     *
     * Only screens used in classic projects can be deleted.
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteScreen(data: DeleteScreenData): CancelablePromise<DeleteScreenResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/screens/{screenId}',
            path: {
                screenId: data.screenId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen is not found.'
            }
        });
    }
    
    /**
     * Update screen
     * Updates a screen. Only screens used in classic projects can be updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.requestBody
     * @returns Screen Returned if the request is successful.
     * @throws ApiError
     */
    public updateScreen(data: UpdateScreenData): CancelablePromise<UpdateScreenResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/screens/{screenId}',
            path: {
                screenId: data.screenId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen is not found.'
            }
        });
    }
    
    /**
     * Get available screen fields
     * Returns the fields that can be added to a tab on a screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @returns ScreenableField Returned if the request is successful.
     * @throws ApiError
     */
    public getAvailableScreenFields(data: GetAvailableScreenFieldsData): CancelablePromise<GetAvailableScreenFieldsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screens/{screenId}/availableFields',
            path: {
                screenId: data.screenId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen is not found.'
            }
        });
    }
    
}

export class IssueCustomFieldOptionsAppsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all issue field options
     * Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanIssueFieldOption Returned if the request is successful.
     * @throws ApiError
     */
    public getAllIssueFieldOptions(data: GetAllIssueFieldOptionsData): CancelablePromise<GetAllIssueFieldOptionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldKey}/option',
            path: {
                fieldKey: data.fieldKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the field is not found or does not support options.',
                403: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.'
            }
        });
    }
    
    /**
     * Create issue field option
     * Creates an option for a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.requestBody
     * @returns IssueFieldOption Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueFieldOption(data: CreateIssueFieldOptionData): CancelablePromise<CreateIssueFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/field/{fieldKey}/option',
            path: {
                fieldKey: data.fieldKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the option is invalid.',
                403: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
                404: 'Returned if the field is not found or does not support options.'
            }
        });
    }
    
    /**
     * Get selectable issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.projectId Filters the results to options that are only available in the specified project.
     * @returns PageBeanIssueFieldOption Returned if the request is successful.
     * @throws ApiError
     */
    public getSelectableIssueFieldOptions(data: GetSelectableIssueFieldOptionsData): CancelablePromise<GetSelectableIssueFieldOptionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldKey}/option/suggestions/edit',
            path: {
                fieldKey: data.fieldKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the field is not found or does not support options.'
            }
        });
    }
    
    /**
     * Get visible issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.projectId Filters the results to options that are only available in the specified project.
     * @returns PageBeanIssueFieldOption Returned if the request is successful.
     * @throws ApiError
     */
    public getVisibleIssueFieldOptions(data: GetVisibleIssueFieldOptionsData): CancelablePromise<GetVisibleIssueFieldOptionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldKey}/option/suggestions/search',
            path: {
                fieldKey: data.fieldKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the field is not found or does not support options.'
            }
        });
    }
    
    /**
     * Delete issue field option
     * Deletes an option from a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.optionId The ID of the option to be deleted.
     * @returns unknown Returned if the field option is deleted.
     * @throws ApiError
     */
    public deleteIssueFieldOption(data: DeleteIssueFieldOptionData): CancelablePromise<DeleteIssueFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{fieldKey}/option/{optionId}',
            path: {
                fieldKey: data.fieldKey,
                optionId: data.optionId
            },
            errors: {
                403: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
                404: 'Returned if the field or option is not found.',
                409: 'Returned if the option is selected for the field in any issue.'
            }
        });
    }
    
    /**
     * Get issue field option
     * Returns an option from a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.optionId The ID of the option to be returned.
     * @returns IssueFieldOption Returned if the requested option is returned.
     * @throws ApiError
     */
    public getIssueFieldOption(data: GetIssueFieldOptionData): CancelablePromise<GetIssueFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/field/{fieldKey}/option/{optionId}',
            path: {
                fieldKey: data.fieldKey,
                optionId: data.optionId
            },
            errors: {
                400: 'Returned if the field is not found or does not support options.',
                403: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
                404: 'Returned if the option is not found.'
            }
        });
    }
    
    /**
     * Update issue field option
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.optionId The ID of the option to be updated.
     * @param data.requestBody
     * @returns IssueFieldOption Returned if the option is updated or created.
     * @throws ApiError
     */
    public updateIssueFieldOption(data: UpdateIssueFieldOptionData): CancelablePromise<UpdateIssueFieldOptionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/field/{fieldKey}/option/{optionId}',
            path: {
                fieldKey: data.fieldKey,
                optionId: data.optionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter.',
                403: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
                404: 'Returned if field is not found.'
            }
        });
    }
    
    /**
     * Replace issue field option
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
     *
     * Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
     *
     * This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param data The data for the request.
     * @param data.fieldKey The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
     *
     * *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
     * *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
     * @param data.optionId The ID of the option to be deselected.
     * @param data.replaceWith The ID of the option that will replace the currently selected option.
     * @param data.jql A JQL query that specifies the issues to be updated. For example, *project=10000*.
     * @param data.overrideScreenSecurity Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.
     * @param data.overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @throws ApiError
     */
    public replaceIssueFieldOption(data: ReplaceIssueFieldOptionData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/field/{fieldKey}/option/{optionId}/issue',
            path: {
                fieldKey: data.fieldKey,
                optionId: data.optionId
            },
            query: {
                replaceWith: data.replaceWith,
                jql: data.jql,
                overrideScreenSecurity: data.overrideScreenSecurity,
                overrideEditableFlag: data.overrideEditableFlag
            },
            errors: {
                303: 'Returned if the long-running task to deselect the option is started.',
                400: 'Returned if the request is not valid.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field is not found or does not support options, or the options to be replaced are not found.'
            }
        });
    }
    
}

export class IssueFieldConfigurationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all field configurations
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:
     *
     * *  a list of field configuration item IDs.
     * *  whether the field configuration is a default.
     * *  whether the field configuration name or description contains a query string.
     *
     * Only field configurations used in company-managed (classic) projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param data.isDefault If *true* returns default field configurations only.
     * @param data.query The query string used to match against field configuration names and descriptions.
     * @returns PageBeanFieldConfigurationDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getAllFieldConfigurations(data: GetAllFieldConfigurationsData = {}): CancelablePromise<GetAllFieldConfigurationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/fieldconfiguration',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                isDefault: data.isDefault,
                query: data.query
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Create field configuration
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.
     *
     * This operation can only create configurations for use in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns FieldConfiguration Returned if the request is successful.
     * @throws ApiError
     */
    public createFieldConfiguration(data: CreateFieldConfigurationData): CancelablePromise<CreateFieldConfigurationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/fieldconfiguration',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Delete field configuration
     * Deletes a field configuration.
     *
     * This operation can only delete configurations used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteFieldConfiguration(data: DeleteFieldConfigurationData): CancelablePromise<DeleteFieldConfigurationResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/fieldconfiguration/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration is not found.'
            }
        });
    }
    
    /**
     * Update field configuration
     * Updates a field configuration. The name and the description provided in the request override the existing values.
     *
     * This operation can only update configurations used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateFieldConfiguration(data: UpdateFieldConfigurationData): CancelablePromise<UpdateFieldConfigurationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/fieldconfiguration/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration is not found.'
            }
        });
    }
    
    /**
     * Get field configuration items
     * Returns a [paginated](#pagination) list of all fields for a configuration.
     *
     * Only the fields from configurations used in company-managed (classic) projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanFieldConfigurationItem Returned if the request is successful.
     * @throws ApiError
     */
    public getFieldConfigurationItems(data: GetFieldConfigurationItemsData): CancelablePromise<GetFieldConfigurationItemsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/fieldconfiguration/{id}/fields',
            path: {
                id: data.id
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration is not found.'
            }
        });
    }
    
    /**
     * Update field configuration items
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.
     *
     * This operation can only update field configurations used in company-managed (classic) projects.
     *
     * The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateFieldConfigurationItems(data: UpdateFieldConfigurationItemsData): CancelablePromise<UpdateFieldConfigurationItemsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/fieldconfiguration/{id}/fields',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration is not found.'
            }
        });
    }
    
    /**
     * Get all field configuration schemes
     * Returns a [paginated](#pagination) list of field configuration schemes.
     *
     * Only field configuration schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @returns PageBeanFieldConfigurationScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getAllFieldConfigurationSchemes(data: GetAllFieldConfigurationSchemesData = {}): CancelablePromise<GetAllFieldConfigurationSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/fieldconfigurationscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.'
            }
        });
    }
    
    /**
     * Create field configuration scheme
     * Creates a field configuration scheme.
     *
     * This operation can only create field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody The details of the field configuration scheme.
     * @returns FieldConfigurationScheme Returned if the request is successful.
     * @throws ApiError
     */
    public createFieldConfigurationScheme(data: CreateFieldConfigurationSchemeData): CancelablePromise<CreateFieldConfigurationSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/fieldconfigurationscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.'
            }
        });
    }
    
    /**
     * Get field configuration issue type items
     * Returns a [paginated](#pagination) list of field configuration issue type items.
     *
     * Only items used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.fieldConfigurationSchemeId The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.
     * @returns PageBeanFieldConfigurationIssueTypeItem Returned if the request is successful.
     * @throws ApiError
     */
    public getFieldConfigurationSchemeMappings(data: GetFieldConfigurationSchemeMappingsData = {}): CancelablePromise<GetFieldConfigurationSchemeMappingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/fieldconfigurationscheme/mapping',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                fieldConfigurationSchemeId: data.fieldConfigurationSchemeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if no field configuration schemes are found.'
            }
        });
    }
    
    /**
     * Get field configuration schemes for projects
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.
     *
     * The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.
     *
     * Only field configuration schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanFieldConfigurationSchemeProjects Returned if the request is successful.
     * @throws ApiError
     */
    public getFieldConfigurationSchemeProjectMapping(data: GetFieldConfigurationSchemeProjectMappingData): CancelablePromise<GetFieldConfigurationSchemeProjectMappingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/fieldconfigurationscheme/project',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Assign field configuration scheme to project
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
     *
     * Field configuration schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public assignFieldConfigurationSchemeToProject(data: AssignFieldConfigurationSchemeToProjectData): CancelablePromise<AssignFieldConfigurationSchemeToProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/fieldconfigurationscheme/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the project is not a classic project.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.',
                404: 'Returned if the project is missing.'
            }
        });
    }
    
    /**
     * Delete field configuration scheme
     * Deletes a field configuration scheme.
     *
     * This operation can only delete field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration scheme.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteFieldConfigurationScheme(data: DeleteFieldConfigurationSchemeData): CancelablePromise<DeleteFieldConfigurationSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/fieldconfigurationscheme/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration scheme is not found.'
            }
        });
    }
    
    /**
     * Update field configuration scheme
     * Updates a field configuration scheme.
     *
     * This operation can only update field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration scheme.
     * @param data.requestBody The details of the field configuration scheme.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateFieldConfigurationScheme(data: UpdateFieldConfigurationSchemeData): CancelablePromise<UpdateFieldConfigurationSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/fieldconfigurationscheme/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.',
                404: 'Returned if the field configuration scheme is not found.'
            }
        });
    }
    
    /**
     * Assign issue types to field configurations
     * Assigns issue types to field configurations on field configuration scheme.
     *
     * This operation can only modify field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setFieldConfigurationSchemeMapping(data: SetFieldConfigurationSchemeMappingData): CancelablePromise<SetFieldConfigurationSchemeMappingResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/fieldconfigurationscheme/{id}/mapping',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration scheme, the field configuration, or the issue type is not found.'
            }
        });
    }
    
    /**
     * Remove issue types from field configuration scheme
     * Removes issue types from the field configuration scheme.
     *
     * This operation can only modify field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the field configuration scheme.
     * @param data.requestBody The issue type IDs to remove.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeIssueTypesFromGlobalFieldConfigurationScheme(data: RemoveIssueTypesFromGlobalFieldConfigurationSchemeData): CancelablePromise<RemoveIssueTypesFromGlobalFieldConfigurationSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the field configuration scheme or the issue types are not found.'
            }
        });
    }
    
}

export class FiltersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create filter
     * Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.requestBody The filter to create.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @param data.overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public createFilter(data: CreateFilterData): CancelablePromise<CreateFilterResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/filter',
            query: {
                expand: data.expand,
                overrideSharePermissions: data.overrideSharePermissions
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get favorite filters
     * Returns the visible favorite filters of the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
     *
     * *  owned by the user.
     * *  shared with a group that the user is a member of.
     * *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  shared with a public project.
     * *  shared with the public.
     *
     * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public getFavouriteFilters(data: GetFavouriteFiltersData = {}): CancelablePromise<GetFavouriteFiltersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/favourite',
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get my filters
     * Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
     *
     * *  owned by the user.
     * *  shared with a group that the user is a member of.
     * *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  shared with a public project.
     * *  shared with the public.
     *
     * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @param data.includeFavourites Include the user's favorite filters in the response.
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public getMyFilters(data: GetMyFiltersData = {}): CancelablePromise<GetMyFiltersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/my',
            query: {
                expand: data.expand,
                includeFavourites: data.includeFavourites
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Search for filters
     * Returns a [paginated](#pagination) list of filters. Use this operation to get:
     *
     * *  specific filters, by defining `id` only.
     * *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.filterName String used to perform a case-insensitive partial match with `name`.
     * @param data.accountId User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.
     * @param data.owner This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
     * @param data.projectId Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.
     * @param data.id The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
     * *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
     * *  `is_favourite` Sorts by whether the filter is marked as a favorite.
     * *  `id` Sorts by filter ID.
     * *  `name` Sorts by filter name.
     * *  `owner` Sorts by the ID of the filter owner.
     * *  `is_shared` Sorts by whether the filter is shared.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `description` Returns the description of the filter.
     * *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
     * *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
     * *  `jql` Returns the JQL query that the filter uses.
     * *  `owner` Returns the owner of the filter.
     * *  `searchUrl` Returns a URL to perform the filter's JQL query.
     * *  `sharePermissions` Returns the share permissions defined for the filter.
     * *  `editPermissions` Returns the edit permissions defined for the filter.
     * *  `isWritable` Returns whether the current user has permission to edit the filter.
     * *  `approximateLastUsed` \[Experimental\] Returns the approximate date and time when the filter was last evaluated.
     * *  `subscriptions` Returns the users that are subscribed to the filter.
     * *  `viewUrl` Returns a URL to view the filter.
     * @param data.overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns PageBeanFilterDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getFiltersPaginated(data: GetFiltersPaginatedData = {}): CancelablePromise<GetFiltersPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/search',
            query: {
                filterName: data.filterName,
                accountId: data.accountId,
                owner: data.owner,
                groupname: data.groupname,
                groupId: data.groupId,
                projectId: data.projectId,
                id: data.id,
                orderBy: data.orderBy,
                startAt: data.startAt,
                maxResults: data.maxResults,
                expand: data.expand,
                overrideSharePermissions: data.overrideSharePermissions
            },
            errors: {
                400: `Returned if:

 *  \`owner\` and \`accountId\` are provided.
 *  \`expand\` includes an invalid value.
 *  \`orderBy\` is invalid.
 *  \`id\` identifies more than 200 filter IDs.`,
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Delete filter
     * Delete a filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the filter to delete.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteFilter(data: DeleteFilterData): CancelablePromise<DeleteFilterResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/filter/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the filter is not found.',
                401: 'Returned if the user does not have permission to delete the filter.'
            }
        });
    }
    
    /**
     * Get filter
     * Returns a filter.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
     *
     * *  owned by the user.
     * *  shared with a group that the user is a member of.
     * *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  shared with a public project.
     * *  shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter to return.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @param data.overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public getFilter(data: GetFilterData): CancelablePromise<GetFilterResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/{id}',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand,
                overrideSharePermissions: data.overrideSharePermissions
            },
            errors: {
                400: 'Returned if the filter is not found or the user does not have permission to view it.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Update filter
     * Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
     * @param data The data for the request.
     * @param data.id The ID of the filter to update.
     * @param data.requestBody The filter to update.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @param data.overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public updateFilter(data: UpdateFilterData): CancelablePromise<UpdateFilterResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/filter/{id}',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand,
                overrideSharePermissions: data.overrideSharePermissions
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Reset columns
     * Reset the user's column configuration for the filter to the default.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public resetColumns(data: ResetColumnsData): CancelablePromise<ResetColumnsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/filter/{id}/columns',
            path: {
                id: data.id
            },
            errors: {
                400: `Returned if:

 *  the filter is not found.
 *  the user does not have permission to view the filter.`,
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get columns
     * Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, column details are only returned for:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @returns ColumnItem Returned if the request is successful.
     * @throws ApiError
     */
    public getColumns(data: GetColumnsData): CancelablePromise<GetColumnsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/{id}/columns',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the user does not have permission to view the filter.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if a column configuration is not set for the filter.'
            }
        });
    }
    
    /**
     * Set columns
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
     *
     * The parameters for this resource are expressed as HTML form data. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.requestBody The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setColumns(data: SetColumnsData): CancelablePromise<SetColumnsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/filter/{id}/columns',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  a non-navigable field is set as a column.
 *  the user does not have permission to view the filter.`,
                403: 'Returned if the requesting user is not an owner of the filter.'
            }
        });
    }
    
    /**
     * Remove filter as favorite
     * Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public deleteFavouriteForFilter(data: DeleteFavouriteForFilterData): CancelablePromise<DeleteFavouriteForFilterResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/filter/{id}/favourite',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                400: `Returned if:

 *  the filter is not found.
 *  the user does not have permission to view the filter.`
            }
        });
    }
    
    /**
     * Add filter as favorite
     * Add a filter as a favorite for the user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     * *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
     * @returns Filter Returned if the request is successful.
     * @throws ApiError
     */
    public setFavouriteForFilter(data: SetFavouriteForFilterData): CancelablePromise<SetFavouriteForFilterResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/filter/{id}/favourite',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                400: `Returned if:

 *  the filter is not found.
 *  the user does not have permission to favorite the filter.`
            }
        });
    }
    
    /**
     * Change filter owner
     * Changes the owner of the filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the filter to update.
     * @param data.requestBody The account ID of the new owner of the filter.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public changeFilterOwner(data: ChangeFilterOwnerData): CancelablePromise<ChangeFilterOwnerResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/filter/{id}/owner',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned when:

 *  The new owner of the filter owns a filter with the same name.
 *  An attempt is made to change owner of the default filter.`,
                403: 'Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission.',
                404: 'Returned if the filter or the new owner of the filter is not found.'
            }
        });
    }
    
}

export class FilterSharingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get default share scope
     * Returns the default sharing settings for new filters and dashboards for a user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns DefaultShareScope Returned if the request is successful.
     * @throws ApiError
     */
    public getDefaultShareScope(): CancelablePromise<GetDefaultShareScopeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/defaultShareScope',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Set default share scope
     * Sets the default sharing for new filters and dashboards for a user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DefaultShareScope Returned if the request is successful.
     * @throws ApiError
     */
    public setDefaultShareScope(data: SetDefaultShareScopeData): CancelablePromise<SetDefaultShareScopeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/filter/defaultShareScope',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if an invalid scope is set.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get share permissions
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, share permissions are only returned for:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @returns SharePermission Returned if the request is successful.
     * @throws ApiError
     */
    public getSharePermissions(data: GetSharePermissionsData): CancelablePromise<GetSharePermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/{id}/permission',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the filter is not found.
 *  the user does not have permission to view the filter.`
            }
        });
    }
    
    /**
     * Add share permission
     * Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
     *
     * Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
     *
     * **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.requestBody
     * @returns SharePermission Returned if the request is successful.
     * @throws ApiError
     */
    public addSharePermission(data: AddSharePermissionData): CancelablePromise<AddSharePermissionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/filter/{id}/permission',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.
 *  the user does not own the filter.
 *  the user does not have the required permissions.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the filter is not found.
 *  the user does not have permission to view the filter.`
            }
        });
    }
    
    /**
     * Delete share permission
     * Deletes a share permission from a filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.permissionId The ID of the share permission.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteSharePermission(data: DeleteSharePermissionData): CancelablePromise<DeleteSharePermissionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/filter/{id}/permission/{permissionId}',
            path: {
                id: data.id,
                permissionId: data.permissionId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the filter is not found.
 *  the user does not own the filter.`
            }
        });
    }
    
    /**
     * Get share permission
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, a share permission is only returned for:
     *
     * *  filters owned by the user.
     * *  filters shared with a group that the user is a member of.
     * *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     * *  filters shared with a public project.
     * *  filters shared with the public.
     * @param data The data for the request.
     * @param data.id The ID of the filter.
     * @param data.permissionId The ID of the share permission.
     * @returns SharePermission Returned if the request is successful.
     * @throws ApiError
     */
    public getSharePermission(data: GetSharePermissionData): CancelablePromise<GetSharePermissionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/filter/{id}/permission/{permissionId}',
            path: {
                id: data.id,
                permissionId: data.permissionId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the filter is not found.
 *  the permission is not found.
 *  the user does not have permission to view the filter.`
            }
        });
    }
    
}

export class GroupsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Remove group
     * Deletes a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
     * @param data The data for the request.
     * @param data.groupname
     * @param data.groupId The ID of the group. This parameter cannot be used with the `groupname` parameter.
     * @param data.swapGroup As a group's name can change, use of `swapGroupId` is recommended to identify a group.
     * The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.
     * @param data.swapGroupId The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeGroup(data: RemoveGroupData = {}): CancelablePromise<RemoveGroupResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/group',
            query: {
                groupname: data.groupname,
                groupId: data.groupId,
                swapGroup: data.swapGroup,
                swapGroupId: data.swapGroupId
            },
            errors: {
                400: 'Returned if the group name is not specified.',
                401: 'Returned if the authentication credentials are incorrect or missing from the request.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the group is not found.'
            }
        });
    }
    
    /**
     * @deprecated
     * Get group
     * This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
     *
     * Returns all users in a group.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended to identify a group.
     * The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param data.expand List of fields to expand.
     * @returns Group Returned if the request is successful.
     * @throws ApiError
     */
    public getGroup(data: GetGroupData = {}): CancelablePromise<GetGroupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/group',
            query: {
                groupname: data.groupname,
                groupId: data.groupId,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the group name is not specified.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the calling user does not have the Administer Jira global permission.',
                404: 'Returned if the group is not found.'
            }
        });
    }
    
    /**
     * Create group
     * Creates a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param data The data for the request.
     * @param data.requestBody The name of the group.
     * @returns Group Returned if the request is successful.
     * @throws ApiError
     */
    public createGroup(data: CreateGroupData): CancelablePromise<CreateGroupResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/group',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if group name is not specified or the group name is in use.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Bulk get groups
     * Returns a [paginated](#pagination) list of groups.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.groupId The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
     * @param data.groupName The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.
     * @param data.accessType The access level of a group. Valid values: 'site-admin', 'admin', 'user'.
     * @param data.applicationKey The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.
     * @returns PageBeanGroupDetails Returned if the request is successful.
     * @throws ApiError
     */
    public bulkGetGroups(data: BulkGetGroupsData = {}): CancelablePromise<BulkGetGroupsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/group/bulk',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                groupId: data.groupId,
                groupName: data.groupName,
                accessType: data.accessType,
                applicationKey: data.applicationKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                500: "Returned if the group with the given access level can't be retrieved."
            }
        });
    }
    
    /**
     * Get users from group
     * Returns a [paginated](#pagination) list of all users in a group.
     *
     * Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended to identify a group.
     * The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param data.includeInactiveUsers Include inactive users.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanUserDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getUsersFromGroup(data: GetUsersFromGroupData = {}): CancelablePromise<GetUsersFromGroupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/group/member',
            query: {
                groupname: data.groupname,
                groupId: data.groupId,
                includeInactiveUsers: data.includeInactiveUsers,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the group name is not specified.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the calling user does not have the Administer Jira global permission.',
                404: 'Returned if the group is not found.'
            }
        });
    }
    
    /**
     * Remove user from group
     * Removes a user from a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended to identify a group.
     * The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeUserFromGroup(data: RemoveUserFromGroupData): CancelablePromise<RemoveUserFromGroupResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/group/user',
            query: {
                groupname: data.groupname,
                groupId: data.groupId,
                username: data.username,
                accountId: data.accountId
            },
            errors: {
                400: `Returned if:

 *  \`groupName\` is missing.
 *  \`accountId\` is missing.`,
                401: 'Returned if the authentication credentials are incorrect or missing from the request.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the group or user are not found.'
            }
        });
    }
    
    /**
     * Add user to group
     * Adds a user to a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param data The data for the request.
     * @param data.requestBody The user to add to the group.
     * @param data.groupname As a group's name can change, use of `groupId` is recommended to identify a group.
     * The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param data.groupId The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @returns Group Returned if the request is successful.
     * @throws ApiError
     */
    public addUserToGroup(data: AddUserToGroupData): CancelablePromise<AddUserToGroupResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/group/user',
            query: {
                groupname: data.groupname,
                groupId: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`groupname\` is not provided.
 *  \`accountId\` is missing.`,
                401: 'Returned if the authentication credentials are incorrect or missing from the request.',
                403: 'Returned if the calling user does not have the necessary permission.',
                404: 'Returned if the group or user are not found.'
            }
        });
    }
    
    /**
     * Find groups
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
     *
     * The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
     *
     * The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
     *
     * *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     * @param data The data for the request.
     * @param data.accountId This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).
     * @param data.query The string to find in group names.
     * @param data.exclude As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.
     * A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.
     * @param data.excludeId A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.
     * @param data.maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
     * @param data.caseInsensitive Whether the search for groups should be case insensitive.
     * @param data.userName This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns FoundGroups Returned if the request is successful.
     * @throws ApiError
     */
    public findGroups(data: FindGroupsData = {}): CancelablePromise<FindGroupsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/groups/picker',
            query: {
                accountId: data.accountId,
                query: data.query,
                exclude: data.exclude,
                excludeId: data.excludeId,
                maxResults: data.maxResults,
                caseInsensitive: data.caseInsensitive,
                userName: data.userName
            }
        });
    }
    
}

export class GroupAndUserPickerService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find users and groups
     * Returns a list of users and groups matching a string. The string is used:
     *
     * *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
     * *  for groups, to find a case-sensitive match with group name.
     *
     * For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
     *
     * Optionally, the search can be refined to:
     *
     * *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
     *
     * *  projects.
     * *  issue types.
     *
     * If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
     * *  not return Connect app users and groups.
     * *  return groups that have a case-insensitive match with the query.
     *
     * The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.query The search string.
     * @param data.maxResults The maximum number of items to return in each list.
     * @param data.showAvatar Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
     * @param data.fieldId The custom field ID of the field this request is for.
     * @param data.projectId The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
     * @param data.issueTypeId The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
     * @param data.avatarSize The size of the avatar to return. If an invalid value is provided, the default value is used.
     * @param data.caseInsensitive Whether the search for groups should be case insensitive.
     * @param data.excludeConnectAddons Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
     * @returns FoundUsersAndGroups Returned if the request is successful.
     * @throws ApiError
     */
    public findUsersAndGroups(data: FindUsersAndGroupsData): CancelablePromise<FindUsersAndGroupsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/groupuserpicker',
            query: {
                query: data.query,
                maxResults: data.maxResults,
                showAvatar: data.showAvatar,
                fieldId: data.fieldId,
                projectId: data.projectId,
                issueTypeId: data.issueTypeId,
                avatarSize: data.avatarSize,
                caseInsensitive: data.caseInsensitive,
                excludeConnectAddons: data.excludeConnectAddons
            },
            errors: {
                400: 'Returned if the query parameter is not provided.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
}

export class LicenseMetricsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get license
     * Returns licensing information about the Jira instance.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns License Returned if the request is successful.
     * @throws ApiError
     */
    public getLicense(): CancelablePromise<GetLicenseResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/instance/license',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get approximate license count
     * Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns LicenseMetric Returned if the request is successful.
     * @throws ApiError
     */
    public getApproximateLicenseCount(): CancelablePromise<GetApproximateLicenseCountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/license/approximateLicenseCount',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to complete this request.'
            }
        });
    }
    
    /**
     * Get approximate application license count
     * Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.applicationKey The ID of the application, represents a specific version of Jira.
     * @returns LicenseMetric Returned if the request is successful.
     * @throws ApiError
     */
    public getApproximateApplicationLicenseCount(data: GetApproximateApplicationLicenseCountData): CancelablePromise<GetApproximateApplicationLicenseCountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/license/approximateLicenseCount/product/{applicationKey}',
            path: {
                applicationKey: data.applicationKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to complete this request.'
            }
        });
    }
    
}

export class IssueSearchService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue picker suggestions
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
     *
     * This operation returns two lists:
     *
     * *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
     * *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.query A string to match against text fields in the issue such as title, description, or comments.
     * @param data.currentJql A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.
     * @param data.currentIssueKey The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
     * @param data.currentProjectId The ID of a project that suggested issues must belong to.
     * @param data.showSubTasks Indicate whether to include subtasks in the suggestions list.
     * @param data.showSubTaskParent When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.
     * @returns IssuePickerSuggestions Returned if the request is successful.
     * @throws ApiError
     */
    public getIssuePickerResource(data: GetIssuePickerResourceData = {}): CancelablePromise<GetIssuePickerResourceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/picker',
            query: {
                query: data.query,
                currentJQL: data.currentJql,
                currentIssueKey: data.currentIssueKey,
                currentProjectId: data.currentProjectId,
                showSubTasks: data.showSubTasks,
                showSubTaskParent: data.showSubTaskParent
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Check issues against JQL
     * Checks whether one or more issues would be returned by one or more JQL queries.
     *
     * **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IssueMatches Returned if the request is successful.
     * @throws ApiError
     */
    public matchIssues(data: MatchIssuesData): CancelablePromise<MatchIssuesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/match',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs.'
            }
        });
    }
    
    /**
     * Search for issues using JQL (GET)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.jql The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:
     *
     * *  If no JQL expression is provided, all issues are returned.
     * *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
     * *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.
     * @param data.validateQuery Determines how to validate the JQL query and treat the validation results. Supported values are:
     *
     * *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
     * *  `warn` Returns all errors as warnings.
     * *  `none` No validation is performed.
     * *  `true` *Deprecated* A legacy synonym for `strict`.
     * *  `false` *Deprecated* A legacy synonym for `warn`.
     *
     * Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
     * @param data.fields A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `*all` Returns all fields.
     * *  `*navigable` Returns navigable fields.
     * *  Any issue field, prefixed with a minus to exclude.
     *
     * Examples:
     *
     * *  `summary,comment` Returns only the summary and comments fields.
     * *  `-description` Returns all navigable (default) fields except description.
     * *  `*all,-comment` Returns all fields except comments.
     *
     * This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.
     *
     * Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
     * @param data.expand Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `renderedFields` Returns field values rendered in HTML format.
     * *  `names` Returns the display name of each field.
     * *  `schema` Returns the schema describing a field type.
     * *  `transitions` Returns all possible transitions for the issue.
     * *  `operations` Returns all possible operations for the issue.
     * *  `editmeta` Returns information about how each field can be edited.
     * *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
     * *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
     * @param data.properties A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.
     * @param data.fieldsByKeys Reference fields by their key (rather than ID).
     * @returns SearchResults Returned if the request is successful.
     * @throws ApiError
     */
    public searchForIssuesUsingJql(data: SearchForIssuesUsingJqlData = {}): CancelablePromise<SearchForIssuesUsingJqlResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/search',
            query: {
                jql: data.jql,
                startAt: data.startAt,
                maxResults: data.maxResults,
                validateQuery: data.validateQuery,
                fields: data.fields,
                expand: data.expand,
                properties: data.properties,
                fieldsByKeys: data.fieldsByKeys
            },
            errors: {
                400: 'Returned if the JQL query is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Search for issues using JQL (POST)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody A JSON object containing the search request.
     * @returns SearchResults Returned if the request is successful.
     * @throws ApiError
     */
    public searchForIssuesUsingJqlPost(data: SearchForIssuesUsingJqlPostData): CancelablePromise<SearchForIssuesUsingJqlPostResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/search',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the JQL query is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Search issue IDs using JQL
     * Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody A JSON object containing the search request.
     * @returns IdSearchResults Returned if the request is successful.
     * @throws ApiError
     */
    public searchForIssuesIds(data: SearchForIssuesIdsData): CancelablePromise<SearchForIssuesIdsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/search/id',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the JQL query is invalid.',
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
}

export class IssuePropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Bulk set issues properties by list
     * Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
     *
     * This operation is:
     *
     * *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
     * *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody Issue properties to be set or updated with values.
     * @throws ApiError
     */
    public bulkSetIssuesPropertiesList(data: BulkSetIssuesPropertiesListData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/properties',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the operation is successful.',
                400: 'Return if the request is invalid or the user does not have the necessary permission.',
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Bulk set issue properties by issue
     * Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.
     *
     * This operation is:
     *
     * *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     * *  non-transactional. Updating some entities may fail. Such information will available in the task result.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored.
     * @throws ApiError
     */
    public bulkSetIssuePropertiesByIssue(data: BulkSetIssuePropertiesByIssueData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/properties/multi',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the operation is successful.',
                400: 'Return if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Return if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Bulk delete issue property
     * Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
     *
     * The criteria the filter used to identify eligible issues are:
     *
     * *  `entityIds` Only issues from this list are eligible.
     * *  `currentValue` Only issues with the property set to this value are eligible.
     *
     * If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
     *
     * If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
     *
     * This operation is:
     *
     * *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
     * *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @param data The data for the request.
     * @param data.propertyKey The key of the property.
     * @param data.requestBody
     * @throws ApiError
     */
    public bulkDeleteIssueProperty(data: BulkDeleteIssuePropertyData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the request is successful.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Bulk set issue property
     * Sets a property value on multiple issues.
     *
     * The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.
     *
     * The issues to be updated can be specified by a filter.
     *
     * The filter identifies issues eligible for update using these criteria:
     *
     * *  `entityIds` Only issues from this list are eligible.
     * *  `currentValue` Only issues with the property set to this value are eligible.
     * *  `hasProperty`:
     *
     * *  If *true*, only issues with the property are eligible.
     * *  If *false*, only issues without the property are eligible.
     *
     * If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
     *
     * If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
     *
     * The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
     *
     * This operation is:
     *
     * *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
     * *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @param data The data for the request.
     * @param data.propertyKey The key of the property. The maximum length is 255 characters.
     * @param data.requestBody
     * @throws ApiError
     */
    public bulkSetIssueProperty(data: BulkSetIssuePropertyData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the request is successful.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get issue property keys
     * Returns the URLs and keys of an issue's properties.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Property details are only returned where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The key or ID of the issue.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getIssuePropertyKeys(data: GetIssuePropertyKeysData): CancelablePromise<GetIssuePropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/properties',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            errors: {
                404: 'Returned if the issue is not found or the user does not have permissions to view the issue.'
            }
        });
    }
    
    /**
     * Delete issue property
     * Deletes an issue's property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The key or ID of the issue.
     * @param data.propertyKey The key of the property.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteIssueProperty(data: DeleteIssuePropertyData): CancelablePromise<DeleteIssuePropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                propertyKey: data.propertyKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or property is not found, or the user does not have permission to edit the issue.'
            }
        });
    }
    
    /**
     * Get issue property
     * Returns the key and value of an issue's property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The key or ID of the issue.
     * @param data.propertyKey The key of the property.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueProperty(data: GetIssuePropertyData): CancelablePromise<GetIssuePropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                propertyKey: data.propertyKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or property is not found or the user does not have permission to see the issue.'
            }
        });
    }
    
    /**
     * Set issue property
     * Sets the value of an issue's property. Use this resource to store custom data against an issue.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the issue property is updated.
     * @throws ApiError
     */
    public setIssueProperty(data: SetIssuePropertyData): CancelablePromise<SetIssuePropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to edit the issue.',
                404: 'Returned if the issue is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
}

export class IssueWatchersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get is watching issue bulk
     * Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.requestBody A list of issue IDs.
     * @returns BulkIssueIsWatching Returned if the request is successful
     * @throws ApiError
     */
    public getIsWatchingIssueBulk(data: GetIsWatchingIssueBulkData): CancelablePromise<GetIsWatchingIssueBulkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/watching',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Delete watcher
     * Deletes a user as a watcher of an issue.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeWatcher(data: RemoveWatcherData): CancelablePromise<RemoveWatcherResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/watchers',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                username: data.username,
                accountId: data.accountId
            },
            errors: {
                400: 'Returned if `accountId` is not supplied.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the permission to manage the watcher list.',
                404: 'Returned if the issue or the user is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Get issue watchers
     * Returns the watchers for an issue.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @returns Watchers Returned if the request is successful
     * @throws ApiError
     */
    public getIssueWatchers(data: GetIssueWatchersData): CancelablePromise<GetIssueWatchersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/watchers',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Add watcher
     * Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody The account ID of the user. Note that username cannot be used due to privacy changes.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addWatcher(data: AddWatcherData): CancelablePromise<AddWatcherResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/watchers',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the permission to manage the watcher list.',
                404: 'Returned if the issue or the user is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
}

export class IssueRemoteLinksService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete remote issue link by global ID
     * Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.globalId The global ID of a remote issue link.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteRemoteIssueLinkByGlobalId(data: DeleteRemoteIssueLinkByGlobalIdData): CancelablePromise<DeleteRemoteIssueLinkByGlobalIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                globalId: data.globalId
            },
            errors: {
                400: "Returned if a global ID isn't provided.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to link issues.',
                404: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Get remote issue links
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.globalId The global ID of the remote issue link.
     * @returns RemoteIssueLink Returned if the request is successful.
     * @throws ApiError
     */
    public getRemoteIssueLinks(data: GetRemoteIssueLinksData): CancelablePromise<GetRemoteIssueLinksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                globalId: data.globalId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if issue linking is disabled.',
                404: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
                413: 'Returned if the per-issue limit for remote links has been breached.'
            }
        });
    }
    
    /**
     * Create or update remote issue link
     * Creates or updates a remote issue link for an issue.
     *
     * If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.requestBody
     * @returns RemoteIssueLinkIdentifies Returned if the remote issue link is updated.
     * @throws ApiError
     */
    public createOrUpdateRemoteIssueLink(data: CreateOrUpdateRemoteIssueLinkData): CancelablePromise<CreateOrUpdateRemoteIssueLinkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to link issues.',
                404: 'Returned if the issue is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Delete remote issue link by ID
     * Deletes a remote issue link from an issue.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.linkId The ID of a remote issue link.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteRemoteIssueLinkById(data: DeleteRemoteIssueLinkByIdData): CancelablePromise<DeleteRemoteIssueLinkByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                linkId: data.linkId
            },
            errors: {
                400: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to link issues.',
                404: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Get remote issue link by ID
     * Returns a remote issue link for an issue.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.linkId The ID of the remote issue link.
     * @returns RemoteIssueLink Returned if the request is successful.
     * @throws ApiError
     */
    public getRemoteIssueLinkById(data: GetRemoteIssueLinkByIdData): CancelablePromise<GetRemoteIssueLinkByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                linkId: data.linkId
            },
            errors: {
                400: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if issue linking is disabled.',
                404: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
    /**
     * Update remote issue link by ID
     * Updates a remote issue link for an issue.
     *
     * Note: Fields without values in the request are set to null.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.linkId The ID of the remote issue link.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateRemoteIssueLink(data: UpdateRemoteIssueLinkData): CancelablePromise<UpdateRemoteIssueLinkResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                linkId: data.linkId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the link ID is invalid.
 *  the remote issue link does not belong to the issue.
 *  the request body is invalid.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to link issues.',
                404: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.'
            }
        });
    }
    
}

export class IssueVotesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete vote
     * Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeVote(data: RemoveVoteData): CancelablePromise<RemoveVoteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/votes',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  voting is disabled.
 *  the user has not voted on the issue.
 *  the issue is not found.`
            }
        });
    }
    
    /**
     * Get votes
     * Returns details about the votes on an issue.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @returns Votes Returned if the request is successful.
     * @throws ApiError
     */
    public getVotes(data: GetVotesData): CancelablePromise<GetVotesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/votes',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  voting is disabled.
 *  the user does not have permission to view the issue.
 *  the issue is not found.`
            }
        });
    }
    
    /**
     * Add vote
     * Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addVote(data: AddVoteData): CancelablePromise<AddVoteResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/votes',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  voting is disabled.
 *  the issue is not found.`
            }
        });
    }
    
}

export class IssueWorklogsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue worklogs
     * Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Workloads are only returned where the user has:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.startedAfter The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.
     * @param data.startedBefore The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.
     * @param data.expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.
     * @returns PageOfWorklogs Returned if the request is successful
     * @throws ApiError
     */
    public getIssueWorklog(data: GetIssueWorklogData): CancelablePromise<GetIssueWorklogResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                startedAfter: data.startedAfter,
                startedBefore: data.startedBefore,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the issue is not found or the user does not have permission to view the issue.
 *  \`startAt\` or \`maxResults\` has non-numeric values.
 *  time tracking is disabled.`
            }
        });
    }
    
    /**
     * Add worklog
     * Adds a worklog to an issue.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key the issue.
     * @param data.requestBody
     * @param data.notifyUsers Whether users watching the issue are notified by email.
     * @param data.adjustEstimate Defines how to update the issue's time estimate, the options are:
     *
     * *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
     * *  `leave` Leaves the estimate unchanged.
     * *  `manual` Reduces the estimate by amount specified in `reduceBy`.
     * *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
     * @param data.newEstimate The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param data.reduceBy The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.
     * @param data.expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.
     * @param data.overrideEditableFlag Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
     * @returns Worklog Returned if the request is successful.
     * @throws ApiError
     */
    public addWorklog(data: AddWorklogData): CancelablePromise<AddWorklogResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog',
            path: {
                issueIdOrKey: data.issueIdOrKey
            },
            query: {
                notifyUsers: data.notifyUsers,
                adjustEstimate: data.adjustEstimate,
                newEstimate: data.newEstimate,
                reduceBy: data.reduceBy,
                expand: data.expand,
                overrideEditableFlag: data.overrideEditableFlag
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`adjustEstimate\` is set to \`new\` but \`newEstimate\` is not provided or is invalid.
 *  \`adjustEstimate\` is set to \`manual\` but \`reduceBy\` is not provided or is invalid.
 *  the user does not have permission to add the worklog.
 *  the request JSON is malformed.`,
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the issue is not found or the user does not have permission to view it.',
                413: `Returned if the per-issue limit has been breached for one of the following fields:

 *  worklogs
 *  attachments`
            }
        });
    }
    
    /**
     * Delete worklog
     * Deletes a worklog from an issue.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.id The ID of the worklog.
     * @param data.notifyUsers Whether users watching the issue are notified by email.
     * @param data.adjustEstimate Defines how to update the issue's time estimate, the options are:
     *
     * *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
     * *  `leave` Leaves the estimate unchanged.
     * *  `manual` Increases the estimate by amount specified in `increaseBy`.
     * *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
     * @param data.newEstimate The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param data.increaseBy The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`.
     * @param data.overrideEditableFlag Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorklog(data: DeleteWorklogData): CancelablePromise<DeleteWorklogResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            query: {
                notifyUsers: data.notifyUsers,
                adjustEstimate: data.adjustEstimate,
                newEstimate: data.newEstimate,
                increaseBy: data.increaseBy,
                overrideEditableFlag: data.overrideEditableFlag
            },
            errors: {
                400: `Returned if:

 *  \`adjustEstimate\` is set to \`new\` but \`newEstimate\` is not provided or is invalid.
 *  \`adjustEstimate\` is set to \`manual\` but \`reduceBy\` is not provided or is invalid.
 *  the user does not have permission to delete the worklog.`,
                401: 'Returned if the authentication credentials are incorrect.',
                404: `Returned if:

 *  the issue is not found or user does not have permission to view the issue.
 *  the worklog is not found or the user does not have permission to view it.
 *  time tracking is disabled.`
            }
        });
    }
    
    /**
     * Get worklog
     * Returns a worklog.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.id The ID of the worklog.
     * @param data.expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts
     *
     * `properties`, which returns worklog properties.
     * @returns Worklog Returned if the request is successful.
     * @throws ApiError
     */
    public getWorklog(data: GetWorklogData): CancelablePromise<GetWorklogResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: `Returned if:

 *  the issue is not found or the user does not have permission to view it.
 *  the worklog is not found or the user does not have permission to view it.
 *  time tracking is disabled.

.`
            }
        });
    }
    
    /**
     * Update worklog
     * Updates a worklog.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key the issue.
     * @param data.id The ID of the worklog.
     * @param data.requestBody
     * @param data.notifyUsers Whether users watching the issue are notified by email.
     * @param data.adjustEstimate Defines how to update the issue's time estimate, the options are:
     *
     * *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
     * *  `leave` Leaves the estimate unchanged.
     * *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
     * @param data.newEstimate The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param data.expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.
     * @param data.overrideEditableFlag Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
     * @returns Worklog Returned if the request is successful
     * @throws ApiError
     */
    public updateWorklog(data: UpdateWorklogData): CancelablePromise<UpdateWorklogResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                id: data.id
            },
            query: {
                notifyUsers: data.notifyUsers,
                adjustEstimate: data.adjustEstimate,
                newEstimate: data.newEstimate,
                expand: data.expand,
                overrideEditableFlag: data.overrideEditableFlag
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`adjustEstimate\` is set to \`new\` but \`newEstimate\` is not provided or is invalid.
 *  the user does not have permission to update the worklog.
 *  the request JSON is malformed.`,
                401: 'Returned if the authentication credentials are incorrect.',
                404: `Returned if:

 *  the issue is not found or user does not have permission to view the issue.
 *  the worklog is not found or the user does not have permission to view it.
 *  time tracking is disabled.`
            }
        });
    }
    
    /**
     * Get IDs of deleted worklogs
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
     *
     * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
     *
     * This resource does not return worklogs deleted during the minute preceding the request.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.since The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.
     * @returns ChangedWorklogs Returned if the request is successful.
     * @throws ApiError
     */
    public getIdsOfWorklogsDeletedSince(data: GetIdsOfWorklogsDeletedSinceData = {}): CancelablePromise<GetIdsOfWorklogsDeletedSinceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/worklog/deleted',
            query: {
                since: data.since
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get worklogs
     * Returns worklog details for a list of worklog IDs.
     *
     * The returned list of worklogs is limited to 1000 items.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
     *
     * *  the worklog is set as *Viewable by All Users*.
     * *  the user is a member of a project role or group with permission to view the worklog.
     * @param data The data for the request.
     * @param data.requestBody A JSON object containing a list of worklog IDs.
     * @param data.expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
     * @returns Worklog Returned if the request is successful.
     * @throws ApiError
     */
    public getWorklogsForIds(data: GetWorklogsForIdsData): CancelablePromise<GetWorklogsForIdsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/worklog/list',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request contains more than 1000 worklog IDs or is empty.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get IDs of updated worklogs
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.
     *
     * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
     *
     * This resource does not return worklogs updated during the minute preceding the request.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
     *
     * *  the worklog is set as *Viewable by All Users*.
     * *  the user is a member of a project role or group with permission to view the worklog.
     * @param data The data for the request.
     * @param data.since The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.
     * @param data.expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
     * @returns ChangedWorklogs Returned if the request is successful.
     * @throws ApiError
     */
    public getIdsOfWorklogsModifiedSince(data: GetIdsOfWorklogsModifiedSinceData = {}): CancelablePromise<GetIdsOfWorklogsModifiedSinceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/worklog/updated',
            query: {
                since: data.since,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
}

export class IssueWorklogPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get worklog property keys
     * Returns the keys of all properties for a worklog.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.worklogId The ID of the worklog.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getWorklogPropertyKeys(data: GetWorklogPropertyKeysData): CancelablePromise<GetWorklogPropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                worklogId: data.worklogId
            },
            errors: {
                400: 'Returned if the worklog ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the issue or worklog is not found.
 *  the user does not have permission to view the issue or worklog.`
            }
        });
    }
    
    /**
     * Delete worklog property
     * Deletes a worklog property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.worklogId The ID of the worklog.
     * @param data.propertyKey The key of the property.
     * @returns void Returned if the worklog property is removed.
     * @throws ApiError
     */
    public deleteWorklogProperty(data: DeleteWorklogPropertyData): CancelablePromise<DeleteWorklogPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                worklogId: data.worklogId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the worklog key or id is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to edit the worklog.',
                404: `Returned if:

 *  the issue, worklog, or property is not found.
 *  the user does not have permission to view the issue or worklog.`
            }
        });
    }
    
    /**
     * Get worklog property
     * Returns the value of a worklog property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.worklogId The ID of the worklog.
     * @param data.propertyKey The key of the property.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getWorklogProperty(data: GetWorklogPropertyData): CancelablePromise<GetWorklogPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                worklogId: data.worklogId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the worklog ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the issue, worklog, or property is not found.
 *  the user does not have permission to view the issue or worklog.`
            }
        });
    }
    
    /**
     * Set worklog property
     * Sets the value of a worklog property. Use this operation to store custom data against the worklog.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
     * *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.issueIdOrKey The ID or key of the issue.
     * @param data.worklogId The ID of the worklog.
     * @param data.propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the worklog property is updated.
     * @throws ApiError
     */
    public setWorklogProperty(data: SetWorklogPropertyData): CancelablePromise<SetWorklogPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
            path: {
                issueIdOrKey: data.issueIdOrKey,
                worklogId: data.worklogId,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the worklog ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to edit the worklog.',
                404: `Returned if:

 *  the issue or worklog is not found.
 *  the user does not have permission to view the issue or worklog.`
            }
        });
    }
    
}

export class IssueLinksService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create issue link
     * Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
     *
     * If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
     * *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param data The data for the request.
     * @param data.requestBody The issue link request.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public linkIssues(data: LinkIssuesData): CancelablePromise<LinkIssuesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issueLink',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.
 *  the user does not have *link issues* project permission.
 *  either of the link issues are not found.
 *  the issue link type is not found.`,
                413: 'Returned if the per-issue limit for issue links has been breached.'
            }
        });
    }
    
    /**
     * Delete issue link
     * Deletes an issue link.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
     * *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     * @param data The data for the request.
     * @param data.linkId The ID of the issue link.
     * @returns unknown 200 response
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteIssueLink(data: DeleteIssueLinkData): CancelablePromise<DeleteIssueLinkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issueLink/{linkId}',
            path: {
                linkId: data.linkId
            },
            errors: {
                400: 'Returned if the issue link ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link is not found.
 *  the user doesn't have the required permissions.`
            }
        });
    }
    
    /**
     * Get issue link
     * Returns an issue link.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
     * *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     * @param data The data for the request.
     * @param data.linkId The ID of the issue link.
     * @returns IssueLink Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueLink(data: GetIssueLinkData): CancelablePromise<GetIssueLinkResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issueLink/{linkId}',
            path: {
                linkId: data.linkId
            },
            errors: {
                400: 'Returned if the issue link ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link is not found.
 *  the user doesn't have the required permissions.`
            }
        });
    }
    
}

export class IssueLinkTypesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue link types
     * Returns a list of all issue link types.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @returns IssueLinkTypes Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueLinkTypes(): CancelablePromise<GetIssueLinkTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issueLinkType',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if issue linking is disabled.'
            }
        });
    }
    
    /**
     * Create issue link type
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IssueLinkType Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueLinkType(data: CreateIssueLinkTypeData): CancelablePromise<CreateIssueLinkTypeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issueLinkType',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link type name is in use.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Delete issue link type
     * Deletes an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueLinkTypeId The ID of the issue link type.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteIssueLinkType(data: DeleteIssueLinkTypeData): CancelablePromise<DeleteIssueLinkTypeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issueLinkType/{issueLinkTypeId}',
            path: {
                issueLinkTypeId: data.issueLinkTypeId
            },
            errors: {
                400: 'Returned if the issue link type ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Get issue link type
     * Returns an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param data The data for the request.
     * @param data.issueLinkTypeId The ID of the issue link type.
     * @returns IssueLinkType Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueLinkType(data: GetIssueLinkTypeData): CancelablePromise<GetIssueLinkTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issueLinkType/{issueLinkTypeId}',
            path: {
                issueLinkTypeId: data.issueLinkTypeId
            },
            errors: {
                400: 'Returned if the issue link type ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Update issue link type
     * Updates an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueLinkTypeId The ID of the issue link type.
     * @param data.requestBody
     * @returns IssueLinkType Returned if the request is successful.
     * @throws ApiError
     */
    public updateIssueLinkType(data: UpdateIssueLinkTypeData): CancelablePromise<UpdateIssueLinkTypeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issueLinkType/{issueLinkTypeId}',
            path: {
                issueLinkTypeId: data.issueLinkTypeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the issue link type ID or the request body are invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  issue linking is disabled.
 *  the issue link type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
}

export class IssueSecuritySchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue security schemes
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns SecuritySchemes Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueSecuritySchemes(): CancelablePromise<GetIssueSecuritySchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes',
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to administer issue security schemes.'
            }
        });
    }
    
    /**
     * Create issue security scheme
     * Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SecuritySchemeId Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueSecurityScheme(data: CreateIssueSecuritySchemeData): CancelablePromise<CreateIssueSecuritySchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuesecurityschemes',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Get issue security levels
     * Returns a [paginated](#pagination) list of issue security levels.
     *
     * Only issue security levels in the context of classic projects are returned.
     *
     * Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
     * @param data.schemeId The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
     * @param data.onlyDefault When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
     * @returns PageBeanSecurityLevel Returned if the request is successful.
     * @throws ApiError
     */
    public getSecurityLevels(data: GetSecurityLevelsData = {}): CancelablePromise<GetSecurityLevelsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/level',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                schemeId: data.schemeId,
                onlyDefault: data.onlyDefault
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Set default issue security levels
     * Sets default issue security levels for schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setDefaultLevels(data: SetDefaultLevelsData): CancelablePromise<SetDefaultLevelsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/level/default',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue resolution isn't found."
            }
        });
    }
    
    /**
     * Get issue security level members
     * Returns a [paginated](#pagination) list of issue security level members.
     *
     * Only issue security level members in the context of classic projects are returned.
     *
     * Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
     * @param data.schemeId The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
     * @param data.levelId The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `all` Returns all expandable information
     * *  `field` Returns information about the custom field granted the permission
     * *  `group` Returns information about the group that is granted the permission
     * *  `projectRole` Returns information about the project role granted the permission
     * *  `user` Returns information about the user who is granted the permission
     * @returns PageBeanSecurityLevelMember Returned if the request is successful.
     * @throws ApiError
     */
    public getSecurityLevelMembers(data: GetSecurityLevelMembersData = {}): CancelablePromise<GetSecurityLevelMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/level/member',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                schemeId: data.schemeId,
                levelId: data.levelId,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Get projects using issue security schemes
     * Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.issueSecuritySchemeId The list of security scheme IDs to be filtered out.
     * @param data.projectId The list of project IDs to be filtered out.
     * @returns PageBeanIssueSecuritySchemeToProjectMapping Returned if the request is successful.
     * @throws ApiError
     */
    public searchProjectsUsingSecuritySchemes(data: SearchProjectsUsingSecuritySchemesData = {}): CancelablePromise<SearchProjectsUsingSecuritySchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/project',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                issueSecuritySchemeId: data.issueSecuritySchemeId,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the search criteria is invalid.If you specify the project ID parameter',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Associate security scheme to project
     * Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @throws ApiError
     */
    public associateSchemesToProjects(data: AssociateSchemesToProjectsData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the request is successful.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the security scheme isn't found.",
                409: 'Returned if a task to remove the issue security level is already running.'
            }
        });
    }
    
    /**
     * Search issue security schemes
     * Returns a [paginated](#pagination) list of issue security schemes.
     * If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.
     *
     * Only issue security schemes in the context of classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
     * @param data.projectId The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
     * @returns PageBeanSecuritySchemeWithProjects Returned if the request is successful.
     * @throws ApiError
     */
    public searchSecuritySchemes(data: SearchSecuritySchemesData = {}): CancelablePromise<SearchSecuritySchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Get issue security scheme
     * Returns an issue security scheme along with its security levels.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     * @param data The data for the request.
     * @param data.id The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
     * @returns SecurityScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueSecurityScheme(data: GetIssueSecuritySchemeData): CancelablePromise<GetIssueSecuritySchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission.'
            }
        });
    }
    
    /**
     * Update issue security scheme
     * Updates the issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue security scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateIssueSecurityScheme(data: UpdateIssueSecuritySchemeData): CancelablePromise<UpdateIssueSecuritySchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue security scheme isn't found."
            }
        });
    }
    
    /**
     * Delete issue security scheme
     * Deletes an issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteSecurityScheme(data: DeleteSecuritySchemeData): CancelablePromise<DeleteSecuritySchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue security scheme isn't found."
            }
        });
    }
    
    /**
     * Add issue security levels
     * Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addSecurityLevel(data: AddSecurityLevelData): CancelablePromise<AddSecurityLevelResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}/level',
            path: {
                schemeId: data.schemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the security scheme isn't found."
            }
        });
    }
    
    /**
     * Remove issue security level
     * Deletes an issue security level.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme.
     * @param data.levelId The ID of the issue security level to remove.
     * @param data.replaceWith The ID of the issue security level that will replace the currently selected level.
     * @throws ApiError
     */
    public removeLevel(data: RemoveLevelData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}',
            path: {
                schemeId: data.schemeId,
                levelId: data.levelId
            },
            query: {
                replaceWith: data.replaceWith
            },
            errors: {
                303: 'Returned if the request is successful.',
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue security level isn't found.",
                409: 'Returned if a task to remove the issue security level is already running.'
            }
        });
    }
    
    /**
     * Update issue security level
     * Updates the issue security level.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme level belongs to.
     * @param data.levelId The ID of the issue security level to update.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateSecurityLevel(data: UpdateSecurityLevelData): CancelablePromise<UpdateSecurityLevelResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}',
            path: {
                schemeId: data.schemeId,
                levelId: data.levelId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue security level isn't found."
            }
        });
    }
    
    /**
     * Add issue security level members
     * Adds members to the issue security level. You can add up to 100 members per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme.
     * @param data.levelId The ID of the issue security level.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addSecurityLevelMembers(data: AddSecurityLevelMembersData): CancelablePromise<AddSecurityLevelMembersResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member',
            path: {
                schemeId: data.schemeId,
                levelId: data.levelId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the security scheme isn't found."
            }
        });
    }
    
    /**
     * Remove member from issue security level
     * Removes an issue security level member from an issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the issue security scheme.
     * @param data.levelId The ID of the issue security level.
     * @param data.memberId The ID of the issue security level member to be removed.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeMemberFromSecurityLevel(data: RemoveMemberFromSecurityLevelData): CancelablePromise<RemoveMemberFromSecurityLevelResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}',
            path: {
                schemeId: data.schemeId,
                levelId: data.levelId,
                memberId: data.memberId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the security scheme isn't found."
            }
        });
    }
    
}

export class IssueSecurityLevelService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue security level members by issue security scheme
     * Returns issue security level members.
     *
     * Only issue security level members in context of classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueSecuritySchemeId The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.issueSecurityLevelId The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PageBeanIssueSecurityLevelMember Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueSecurityLevelMembers(data: GetIssueSecurityLevelMembersData): CancelablePromise<GetIssueSecurityLevelMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members',
            path: {
                issueSecuritySchemeId: data.issueSecuritySchemeId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                issueSecurityLevelId: data.issueSecurityLevelId,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if no issue security level members are found.'
            }
        });
    }
    
    /**
     * Get issue security level
     * Returns details of an issue security level.
     *
     * Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.id The ID of the issue security level.
     * @returns SecurityLevel Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueSecurityLevel(data: GetIssueSecurityLevelData): CancelablePromise<GetIssueSecurityLevelResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/securitylevel/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the issue security level is not found.'
            }
        });
    }
    
}

export class IssueTypesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all issue types for user
     * Returns all issue types.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issue types are only returned as follows:
     *
     * *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
     * *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueAllTypes(): CancelablePromise<GetIssueAllTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create issue type
     * Creates an issue type and adds it to the default issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueType(data: CreateIssueTypeData): CancelablePromise<CreateIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuetype',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if the request is invalid because:

 *  no content is sent.
 *  the issue type name exceeds 60 characters.
 *  a subtask issue type is requested on an instance where subtasks are disabled.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                409: 'Returned if the issue type name is in use.'
            }
        });
    }
    
    /**
     * Get issue types for project
     * Returns issue types for a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectId The ID of the project.
     * @param data.level The level of the issue type to filter by. Use:
     *
     * *  `-1` for Subtask.
     * *  `0` for Base.
     * *  `1` for Epic.
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypesForProject(data: GetIssueTypesForProjectData): CancelablePromise<GetIssueTypesForProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype/project',
            query: {
                projectId: data.projectId,
                level: data.level
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the project is not found.
 *  the user does not have the necessary permission.`
            }
        });
    }
    
    /**
     * Delete issue type
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue type.
     * @param data.alternativeIssueTypeId The ID of the replacement issue type.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteIssueType(data: DeleteIssueTypeData): CancelablePromise<DeleteIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuetype/{id}',
            path: {
                id: data.id
            },
            query: {
                alternativeIssueTypeId: data.alternativeIssueTypeId
            },
            errors: {
                400: 'Returned if any issues cannot be updated with the alternative issue type.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if:

 *  the issue type is in use and an alternative issue type is not specified.
 *  the issue type or alternative issue type is not found.`,
                409: `Returned if the issue type is in use and:

 *  also specified as the alternative issue type.
 *  is a *standard* issue type and the alternative issue type is a *subtask*.`
            }
        });
    }
    
    /**
     * Get issue type
     * Returns an issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue type.
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueType(data: GetIssueTypeData): CancelablePromise<GetIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the issue type ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the issue type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Update issue type
     * Updates the issue type.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue type.
     * @param data.requestBody
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public updateIssueType(data: UpdateIssueTypeData): CancelablePromise<UpdateIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetype/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if the request is invalid because:

 *  no content is sent.
 *  the issue type name exceeds 60 characters.
 *  the avatar is not associated with this issue type.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the issue type is not found.',
                409: 'Returned if the issue type name is in use.'
            }
        });
    }
    
    /**
     * Get alternative issue types
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.id The ID of the issue type.
     * @returns IssueTypeDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getAlternativeIssueTypes(data: GetAlternativeIssueTypesData): CancelablePromise<GetAlternativeIssueTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype/{id}/alternatives',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the issue type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Load issue type avatar
     * Loads an avatar for the issue type.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     * *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     * *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue type.
     * @param data.size The length of each side of the crop region.
     * @param data.requestBody
     * @param data.x The X coordinate of the top-left corner of the crop region.
     * @param data.y The Y coordinate of the top-left corner of the crop region.
     * @returns Avatar Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueTypeAvatar(data: CreateIssueTypeAvatarData): CancelablePromise<CreateIssueTypeAvatarResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuetype/{id}/avatar2',
            path: {
                id: data.id
            },
            query: {
                x: data.x,
                y: data.y,
                size: data.size
            },
            body: data.requestBody,
            mediaType: '*/*',
            errors: {
                400: `Returned if:

 *  an image isn't included in the request.
 *  the image type is unsupported.
 *  the crop parameters extend the crop area beyond the edge of the image.
 *  \`cropSize\` is missing.
 *  the issue type ID is invalid.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the issue type is not found.'
            }
        });
    }
    
}

export class IssueTypePropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue type property keys
     * Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     * @param data The data for the request.
     * @param data.issueTypeId The ID of the issue type.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypePropertyKeys(data: GetIssueTypePropertyKeysData): CancelablePromise<GetIssueTypePropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype/{issueTypeId}/properties',
            path: {
                issueTypeId: data.issueTypeId
            },
            errors: {
                400: 'Returned if the issue type ID is invalid.',
                404: `Returned if:

 *  the issue type is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Delete issue type property
     * Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeId The ID of the issue type.
     * @param data.propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     * @returns void Returned if the issue type property is deleted.
     * @throws ApiError
     */
    public deleteIssueTypeProperty(data: DeleteIssueTypePropertyData): CancelablePromise<DeleteIssueTypePropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
            path: {
                issueTypeId: data.issueTypeId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the issue type ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the issue type or property is not found.'
            }
        });
    }
    
    /**
     * Get issue type property
     * Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     * @param data The data for the request.
     * @param data.issueTypeId The ID of the issue type.
     * @param data.propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeProperty(data: GetIssueTypePropertyData): CancelablePromise<GetIssueTypePropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
            path: {
                issueTypeId: data.issueTypeId,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the issue type ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue type or property is not found or the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Set issue type property
     * Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeId The ID of the issue type.
     * @param data.propertyKey The key of the issue type property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the issue type property is updated.
     * @throws ApiError
     */
    public setIssueTypeProperty(data: SetIssueTypePropertyData): CancelablePromise<SetIssueTypePropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
            path: {
                issueTypeId: data.issueTypeId,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the issue type ID is invalid.
 *  a property value is not provided.
 *  the property value JSON content is invalid.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to modify the issue type.',
                404: `Returned if:

 *  the issue type is not found.
 *  the user does not have the permission view the issue type.`
            }
        });
    }
    
}

export class IssueTypeSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all issue type schemes
     * Returns a [paginated](#pagination) list of issue type schemes.
     *
     * Only issue type schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `name` Sorts by issue type scheme name.
     * *  `id` Sorts by issue type scheme ID.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
     * *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
     * @param data.queryString String used to perform a case-insensitive partial match with issue type scheme name.
     * @returns PageBeanIssueTypeScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getAllIssueTypeSchemes(data: GetAllIssueTypeSchemesData = {}): CancelablePromise<GetAllIssueTypeSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                orderBy: data.orderBy,
                expand: data.expand,
                queryString: data.queryString
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Create issue type scheme
     * Creates an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IssueTypeSchemeId Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueTypeScheme(data: CreateIssueTypeSchemeData): CancelablePromise<CreateIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuetypescheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                409: 'Returned if the scheme name is used by another scheme.'
            }
        });
    }
    
    /**
     * Get issue type scheme items
     * Returns a [paginated](#pagination) list of issue type scheme items.
     *
     * Only issue type scheme items used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.issueTypeSchemeId The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
     * @returns PageBeanIssueTypeSchemeMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeSchemesMapping(data: GetIssueTypeSchemesMappingData = {}): CancelablePromise<GetIssueTypeSchemesMappingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescheme/mapping',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                issueTypeSchemeId: data.issueTypeSchemeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Get issue type schemes for projects
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.
     *
     * Only issue type schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectId The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanIssueTypeSchemeProjects Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeSchemeForProjects(data: GetIssueTypeSchemeForProjectsData): CancelablePromise<GetIssueTypeSchemeForProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescheme/project',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Assign issue type scheme to project
     * Assigns an issue type scheme to a project.
     *
     * If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.
     *
     * Issue type schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public assignIssueTypeSchemeToProject(data: AssignIssueTypeSchemeToProjectData): CancelablePromise<AssignIssueTypeSchemeToProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescheme/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type scheme or the project is not found.'
            }
        });
    }
    
    /**
     * Delete issue type scheme
     * Deletes an issue type scheme.
     *
     * Only issue type schemes used in classic projects can be deleted.
     *
     * Any projects assigned to the scheme are reassigned to the default issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeSchemeId The ID of the issue type scheme.
     * @returns unknown Returned if the issue type scheme is deleted.
     * @throws ApiError
     */
    public deleteIssueTypeScheme(data: DeleteIssueTypeSchemeData): CancelablePromise<DeleteIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuetypescheme/{issueTypeSchemeId}',
            path: {
                issueTypeSchemeId: data.issueTypeSchemeId
            },
            errors: {
                400: 'Returned if the request is to delete the default issue type scheme.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type scheme is not found.'
            }
        });
    }
    
    /**
     * Update issue type scheme
     * Updates an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeSchemeId The ID of the issue type scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateIssueTypeScheme(data: UpdateIssueTypeSchemeData): CancelablePromise<UpdateIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescheme/{issueTypeSchemeId}',
            path: {
                issueTypeSchemeId: data.issueTypeSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type scheme is not found.'
            }
        });
    }
    
    /**
     * Add issue types to issue type scheme
     * Adds issue types to an issue type scheme.
     *
     * The added issue types are appended to the issue types list.
     *
     * If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeSchemeId The ID of the issue type scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addIssueTypesToIssueTypeScheme(data: AddIssueTypesToIssueTypeSchemeData): CancelablePromise<AddIssueTypesToIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype',
            path: {
                issueTypeSchemeId: data.issueTypeSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type or the issue type scheme is not found.'
            }
        });
    }
    
    /**
     * Change order of issue types
     * Changes the order of issue types in an issue type scheme.
     *
     * The request body parameters must meet the following requirements:
     *
     * *  all of the issue types must belong to the issue type scheme.
     * *  either `after` or `position` must be provided.
     * *  the issue type in `after` must not be in the issue type list.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeSchemeId The ID of the issue type scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public reorderIssueTypesInIssueTypeScheme(data: ReorderIssueTypesInIssueTypeSchemeData): CancelablePromise<ReorderIssueTypesInIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move',
            path: {
                issueTypeSchemeId: data.issueTypeSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type scheme is not found.'
            }
        });
    }
    
    /**
     * Remove issue type from issue type scheme
     * Removes an issue type from an issue type scheme.
     *
     * This operation cannot remove:
     *
     * *  any issue type used by issues.
     * *  any issue types from the default issue type scheme.
     * *  the last standard issue type from an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeSchemeId The ID of the issue type scheme.
     * @param data.issueTypeId The ID of the issue type.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeIssueTypeFromIssueTypeScheme(data: RemoveIssueTypeFromIssueTypeSchemeData): CancelablePromise<RemoveIssueTypeFromIssueTypeSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}',
            path: {
                issueTypeSchemeId: data.issueTypeSchemeId,
                issueTypeId: data.issueTypeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme.'
            }
        });
    }
    
}

export class IssueTypeScreenSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue type screen schemes
     * Returns a [paginated](#pagination) list of issue type screen schemes.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param data.queryString String used to perform a case-insensitive partial match with issue type screen scheme name.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `name` Sorts by issue type screen scheme name.
     * *  `id` Sorts by issue type screen scheme ID.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.
     * @returns PageBeanIssueTypeScreenScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeScreenSchemes(data: GetIssueTypeScreenSchemesData = {}): CancelablePromise<GetIssueTypeScreenSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescreenscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                queryString: data.queryString,
                orderBy: data.orderBy,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Create issue type screen scheme
     * Creates an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody An issue type screen scheme bean.
     * @returns IssueTypeScreenSchemeId Returned if the request is successful.
     * @throws ApiError
     */
    public createIssueTypeScreenScheme(data: CreateIssueTypeScreenSchemeData): CancelablePromise<CreateIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuetypescreenscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type or screen scheme is not found.',
                409: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.'
            }
        });
    }
    
    /**
     * Get issue type screen scheme items
     * Returns a [paginated](#pagination) list of issue type screen scheme items.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.issueTypeScreenSchemeId The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.
     * @returns PageBeanIssueTypeScreenSchemeItem Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeScreenSchemeMappings(data: GetIssueTypeScreenSchemeMappingsData = {}): CancelablePromise<GetIssueTypeScreenSchemeMappingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescreenscheme/mapping',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Get issue type screen schemes for projects
     * Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanIssueTypeScreenSchemesProjects Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueTypeScreenSchemeProjectAssociations(data: GetIssueTypeScreenSchemeProjectAssociationsData): CancelablePromise<GetIssueTypeScreenSchemeProjectAssociationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescreenscheme/project',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
    /**
     * Assign issue type screen scheme to project
     * Assigns an issue type screen scheme to a project.
     *
     * Issue type screen schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public assignIssueTypeScreenSchemeToProject(data: AssignIssueTypeScreenSchemeToProjectData): CancelablePromise<AssignIssueTypeScreenSchemeToProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescreenscheme/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  project is not found.
 *  issue type screen scheme is not found.
 *  the project is not a classic project.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type screen scheme or the project are missing.'
            }
        });
    }
    
    /**
     * Delete issue type screen scheme
     * Deletes an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @returns unknown Returned if the issue type screen scheme is deleted.
     * @throws ApiError
     */
    public deleteIssueTypeScreenScheme(data: DeleteIssueTypeScreenSchemeData): CancelablePromise<DeleteIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type screen scheme is not found.'
            }
        });
    }
    
    /**
     * Update issue type screen scheme
     * Updates an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param data.requestBody The issue type screen scheme update details.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateIssueTypeScreenScheme(data: UpdateIssueTypeScreenSchemeData): CancelablePromise<UpdateIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type screen scheme is not found.'
            }
        });
    }
    
    /**
     * Append mappings to issue type screen scheme
     * Appends issue type to screen scheme mappings to an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public appendMappingsForIssueTypeScreenScheme(data: AppendMappingsForIssueTypeScreenSchemeData): CancelablePromise<AppendMappingsForIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type screen scheme, issue type, or screen scheme is not found.',
                409: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.'
            }
        });
    }
    
    /**
     * Update issue type screen scheme default screen scheme
     * Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateDefaultScreenScheme(data: UpdateDefaultScreenSchemeData): CancelablePromise<UpdateDefaultScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: "Returned if the issue type screen scheme or the screen scheme is not found, or the screen scheme isn't used in classic projects."
            }
        });
    }
    
    /**
     * Remove mappings from issue type screen scheme
     * Removes issue type to screen scheme mappings from an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param data.requestBody
     * @returns unknown Returned if the screen scheme mappings are removed from the issue type screen scheme.
     * @throws ApiError
     */
    public removeMappingsFromIssueTypeScreenScheme(data: RemoveMappingsFromIssueTypeScreenSchemeData): CancelablePromise<RemoveMappingsFromIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the issue type screen scheme or one or more issue type mappings are not found.'
            }
        });
    }
    
    /**
     * Get issue type screen scheme projects
     * Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.
     *
     * Only company-managed projects associated with an issue type screen scheme are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.query
     * @returns PageBeanProjectDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectsForIssueTypeScreenScheme(data: GetProjectsForIssueTypeScreenSchemeData): CancelablePromise<GetProjectsForIssueTypeScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project',
            path: {
                issueTypeScreenSchemeId: data.issueTypeScreenSchemeId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                query: data.query
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.'
            }
        });
    }
    
}

export class JqlService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get field reference data (GET)
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
     *
     * To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns JqlReferenceData Returned if the request is successful.
     * @throws ApiError
     */
    public getAutoComplete(): CancelablePromise<GetAutoCompleteResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/jql/autocompletedata',
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get field reference data (POST)
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
     *
     * This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
     *
     * It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns JqlReferenceData Returned if the request is successful.
     * @throws ApiError
     */
    public getAutoCompletePost(data: GetAutoCompletePostData): CancelablePromise<GetAutoCompletePostResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/autocompletedata',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get field auto complete suggestions
     * Returns the JQL search auto complete suggestions for a field.
     *
     * Suggestions can be obtained by providing:
     *
     * *  `fieldName` to get a list of all values for the field.
     * *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
     * *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
     * *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.fieldName The name of the field.
     * @param data.fieldValue The partial field item name entered by the user.
     * @param data.predicateName The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.
     * @param data.predicateValue The partial predicate item name entered by the user.
     * @returns AutoCompleteSuggestions Returned if the request is successful.
     * @throws ApiError
     */
    public getFieldAutoCompleteForQueryString(data: GetFieldAutoCompleteForQueryStringData = {}): CancelablePromise<GetFieldAutoCompleteForQueryStringResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/jql/autocompletedata/suggestions',
            query: {
                fieldName: data.fieldName,
                fieldValue: data.fieldValue,
                predicateName: data.predicateName,
                predicateValue: data.predicateValue
            },
            errors: {
                400: 'Returned if an invalid combination of parameters is passed.',
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Parse JQL query
     * Parses and validates JQL queries.
     *
     * Validation is performed in context of the current user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.validation How to validate the JQL query and treat the validation results. Validation options include:
     *
     * *  `strict` Returns all errors. If validation fails, the query structure is not returned.
     * *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
     * *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.
     * @returns ParsedJqlQueries Returned if the request is successful.
     * @throws ApiError
     */
    public parseJqlQueries(data: ParseJqlQueriesData): CancelablePromise<ParseJqlQueriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/parse',
            query: {
                validation: data.validation
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Convert user identifiers to account IDs in JQL queries
     * Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
     *
     * You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConvertedJqlQueries Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.
     * @throws ApiError
     */
    public migrateQueries(data: MigrateQueriesData): CancelablePromise<MigrateQueriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/pdcleaner',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Sanitize JQL queries
     * Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.
     *
     * For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.
     *
     * Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).
     *
     * Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SanitizedJqlQueries Returned if the request is successful.
     * @throws ApiError
     */
    public sanitiseJqlQueries(data: SanitiseJqlQueriesData): CancelablePromise<SanitiseJqlQueriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/sanitize',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
}

export class JqlFunctionsAppsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get precomputations (apps)
     * Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.
     *
     * **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
     * @param data The data for the request.
     * @param data.functionKey The function key in format:
     *
     * *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`
     * *  Connect: `[App key]__[Module key]`
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `functionKey` Sorts by the functionKey.
     * *  `used` Sorts by the used timestamp.
     * *  `created` Sorts by the created timestamp.
     * *  `updated` Sorts by the updated timestamp.
     * @returns PageBeanJqlFunctionPrecomputationBean Returned if the request is successful.
     * @throws ApiError
     */
    public getPrecomputations(data: GetPrecomputationsData = {}): CancelablePromise<GetPrecomputationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/jql/function/computation',
            query: {
                functionKey: data.functionKey,
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the request is not authenticated as the app that provided the function.',
                404: 'Returned if the function is not found.'
            }
        });
    }
    
    /**
     * Update precomputations (apps)
     * Update the precomputation value of a function created by a Forge/Connect app.
     *
     * **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updatePrecomputations(data: UpdatePrecomputationsData): CancelablePromise<UpdatePrecomputationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/jql/function/computation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the request is not authenticated as the app that provided the function.',
                404: 'Returned if the function is not found.'
            }
        });
    }
    
}

export class LabelsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all labels
     * Returns a [paginated](#pagination) list of labels.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanString Returned if the request is successful.
     * @throws ApiError
     */
    public getAllLabels(data: GetAllLabelsData = {}): CancelablePromise<GetAllLabelsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/label',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            }
        });
    }
    
}

export class PermissionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get my permissions
     * Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.
     *
     * The user is reported as having a project permission:
     *
     * *  in the global context, if the user has the project permission in any project.
     * *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
     * *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
     * *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.
     *
     * This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.
     *
     * Global permissions are unaffected by context.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.projectKey The key of project. Ignored if `projectId` is provided.
     * @param data.projectId The ID of project.
     * @param data.issueKey The key of the issue. Ignored if `issueId` is provided.
     * @param data.issueId The ID of the issue.
     * @param data.permissions A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).
     * @param data.projectUuid
     * @param data.projectConfigurationUuid
     * @param data.commentId The ID of the comment.
     * @returns Permissions Returned if the request is successful.
     * @throws ApiError
     */
    public getMyPermissions(data: GetMyPermissionsData = {}): CancelablePromise<GetMyPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/mypermissions',
            query: {
                projectKey: data.projectKey,
                projectId: data.projectId,
                issueKey: data.issueKey,
                issueId: data.issueId,
                permissions: data.permissions,
                projectUuid: data.projectUuid,
                projectConfigurationUuid: data.projectConfigurationUuid,
                commentId: data.commentId
            },
            errors: {
                400: 'Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\\_PROJECTS when commentId is provided.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project or issue is not found or the user does not have permission to view the project or issue.'
            }
        });
    }
    
    /**
     * Get all permissions
     * Returns all permissions, including:
     *
     * *  global permissions.
     * *  project permissions.
     * *  global permissions added by plugins.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns Permissions Returned if the request is successful.
     * @throws ApiError
     */
    public getAllPermissions(): CancelablePromise<GetAllPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/permissions',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get bulk permissions
     * Returns:
     *
     * *  for a list of global permissions, the global permissions granted to a user.
     * *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.
     *
     * If no account ID is provided, the operation returns details for the logged in user.
     *
     * Note that:
     *
     * *  Invalid project and issue IDs are ignored.
     * *  A maximum of 1000 projects and 1000 issues can be checked.
     * *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
     * *  Empty strings in `projectPermissions.permissions` are ignored.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     * *  **Classic**: `read:jira-work`
     * *  **Granular**: `read:permission:jira`
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
     * @param data The data for the request.
     * @param data.requestBody Details of the permissions to check.
     * @returns BulkPermissionGrants Returned if the request is successful.
     * @throws ApiError
     */
    public getBulkPermissions(data: GetBulkPermissionsData): CancelablePromise<GetBulkPermissionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/permissions/check',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`projectPermissions\` is provided without at least one project permission being provided.
 *  an invalid global permission is provided in the global permissions list.
 *  an invalid project permission is provided in the project permissions list.
 *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.
 *  an invalid account ID is provided.`,
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get permitted projects
     * Returns all the projects where the user is granted a list of project permissions.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PermittedProjects Returned if the request is successful.
     * @throws ApiError
     */
    public getPermittedProjects(data: GetPermittedProjectsData): CancelablePromise<GetPermittedProjectsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/permissions/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if a project permission is not found.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
}

export class MyselfService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete preference
     * Deletes a preference of the user, which restores the default value of system defined settings.
     *
     * Note that these keys are deprecated:
     *
     * *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
     * *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.key The key of the preference.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removePreference(data: RemovePreferenceData): CancelablePromise<RemovePreferenceResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/mypreferences',
            query: {
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the key is not provided or not found.'
            }
        });
    }
    
    /**
     * Get preference
     * Returns the value of a preference of the current user.
     *
     * Note that these keys are deprecated:
     *
     * *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
     * *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
     *
     * These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
     *
     * *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
     * *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
     * *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
     * *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.key The key of the preference.
     * @returns string Returned if the request is successful.
     * @throws ApiError
     */
    public getPreference(data: GetPreferenceData): CancelablePromise<GetPreferenceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/mypreferences',
            query: {
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the key is not provided or not found.'
            }
        });
    }
    
    /**
     * Set preference
     * Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
     *
     * *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
     * *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
     * *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
     * *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
     * *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
     *
     * Note that these keys are deprecated:
     *
     * *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
     * *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
     *
     * These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
     *
     * *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
     * *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
     * *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
     * *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.key The key of the preference. The maximum length is 255 characters.
     * @param data.requestBody The value of the preference as a plain text string. The maximum length is 255 characters.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setPreference(data: SetPreferenceData): CancelablePromise<SetPreferenceResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/mypreferences',
            query: {
                key: data.key
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the key or value is not provided or invalid.'
            }
        });
    }
    
    /**
     * @deprecated
     * Delete locale
     * Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
     *
     * Deletes the locale of the user, which restores the default setting.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteLocale(): CancelablePromise<DeleteLocaleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/mypreferences/locale',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get locale
     * Returns the locale for the user.
     *
     * If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns Locale Returned if the request is successful.
     * @throws ApiError
     */
    public getLocale(): CancelablePromise<GetLocaleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/mypreferences/locale',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * @deprecated
     * Set locale
     * Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
     *
     * Sets the locale of the user. The locale must be one supported by the instance of Jira.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.requestBody The locale defined in a LocaleBean.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setLocale(data: SetLocaleData): CancelablePromise<SetLocaleResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/mypreferences/locale',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get current user
     * Returns details for the current user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `groups` Returns all groups, including nested groups, the user belongs to.
     * *  `applicationRoles` Returns the application roles the user is assigned to.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public getCurrentUser(data: GetCurrentUserData = {}): CancelablePromise<GetCurrentUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/myself',
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
}

export class IssueNotificationSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get notification schemes paginated
     * Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
     *
     * *Note that you should allow for events without recipients to appear in responses.*
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of notification schemes IDs to be filtered by
     * @param data.projectId The list of projects IDs to be filtered by
     * @param data.onlyDefault When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `all` Returns all expandable information
     * *  `field` Returns information about any custom fields assigned to receive an event
     * *  `group` Returns information about any groups assigned to receive an event
     * *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
     * *  `projectRole` Returns information about any project roles assigned to receive an event
     * *  `user` Returns information about any users assigned to receive an event
     * @returns PageBeanNotificationScheme Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.
     * @throws ApiError
     */
    public getNotificationSchemes(data: GetNotificationSchemesData = {}): CancelablePromise<GetNotificationSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/notificationscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                projectId: data.projectId,
                onlyDefault: data.onlyDefault,
                expand: data.expand
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create notification scheme
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns NotificationSchemeId Returned if the request is successful.
     * @throws ApiError
     */
    public createNotificationScheme(data: CreateNotificationSchemeData): CancelablePromise<CreateNotificationSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/notificationscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Get projects using notification schemes paginated
     * Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.notificationSchemeId The list of notifications scheme IDs to be filtered out
     * @param data.projectId The list of project IDs to be filtered out
     * @returns PageBeanNotificationSchemeAndProjectMappingJsonBean Returned if the request is successful.
     * @throws ApiError
     */
    public getNotificationSchemeToProjectMappings(data: GetNotificationSchemeToProjectMappingsData = {}): CancelablePromise<GetNotificationSchemeToProjectMappingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/notificationscheme/project',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                notificationSchemeId: data.notificationSchemeId,
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get notification scheme
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
     * @param data The data for the request.
     * @param data.id The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `all` Returns all expandable information
     * *  `field` Returns information about any custom fields assigned to receive an event
     * *  `group` Returns information about any groups assigned to receive an event
     * *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
     * *  `projectRole` Returns information about any project roles assigned to receive an event
     * *  `user` Returns information about any users assigned to receive an event
     * @returns NotificationScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getNotificationScheme(data: GetNotificationSchemeData): CancelablePromise<GetNotificationSchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/notificationscheme/{id}',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the notification scheme is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Update notification scheme
     * Updates a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the notification scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateNotificationScheme(data: UpdateNotificationSchemeData): CancelablePromise<UpdateNotificationSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/notificationscheme/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the notification scheme isn't found."
            }
        });
    }
    
    /**
     * Add notifications to notification scheme
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
     *
     * *Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the notification scheme.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public addNotifications(data: AddNotificationsData): CancelablePromise<AddNotificationsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/notificationscheme/{id}/notification',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the notification scheme isn't found."
            }
        });
    }
    
    /**
     * Delete notification scheme
     * Deletes a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.notificationSchemeId The ID of the notification scheme.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteNotificationScheme(data: DeleteNotificationSchemeData): CancelablePromise<DeleteNotificationSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/notificationscheme/{notificationSchemeId}',
            path: {
                notificationSchemeId: data.notificationSchemeId
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the notification scheme isn't found."
            }
        });
    }
    
    /**
     * Remove notification from notification scheme
     * Removes a notification from a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.notificationSchemeId The ID of the notification scheme.
     * @param data.notificationId The ID of the notification.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeNotificationFromNotificationScheme(data: RemoveNotificationFromNotificationSchemeData): CancelablePromise<RemoveNotificationFromNotificationSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}',
            path: {
                notificationSchemeId: data.notificationSchemeId,
                notificationId: data.notificationId
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if either the notification scheme or notification isn't found."
            }
        });
    }
    
}

export class PermissionSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all permission schemes
     * Returns all permission schemes.
     *
     * ### About permission schemes and grants ###
     *
     * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
     *
     * #### Holder object ####
     *
     * The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
     *
     * The `holder` object is defined by the following properties:
     *
     * *  `type` Identifies the user or group (see the list of types below).
     * *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
     * *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`
     *
     * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):
     *
     * *  `anyone` Grant for anonymous users.
     * *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     * *  `assignee` Grant for the user currently assigned to an issue.
     * *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     * *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     * *  `projectLead` Grant for a project lead.
     * *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     * *  `reporter` Grant for the user who reported the issue.
     * *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
     * *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
     * *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     *
     * #### Built-in permissions ####
     *
     * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
     *
     * **Project permissions**
     *
     * *  `ADMINISTER_PROJECTS`
     * *  `BROWSE_PROJECTS`
     * *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     * *  `SERVICEDESK_AGENT` (Jira Service Desk only)
     * *  `VIEW_DEV_TOOLS` (Jira Software only)
     * *  `VIEW_READONLY_WORKFLOW`
     *
     * **Issue permissions**
     *
     * *  `ASSIGNABLE_USER`
     * *  `ASSIGN_ISSUES`
     * *  `CLOSE_ISSUES`
     * *  `CREATE_ISSUES`
     * *  `DELETE_ISSUES`
     * *  `EDIT_ISSUES`
     * *  `LINK_ISSUES`
     * *  `MODIFY_REPORTER`
     * *  `MOVE_ISSUES`
     * *  `RESOLVE_ISSUES`
     * *  `SCHEDULE_ISSUES`
     * *  `SET_ISSUE_SECURITY`
     * *  `TRANSITION_ISSUES`
     *
     * **Voters and watchers permissions**
     *
     * *  `MANAGE_WATCHERS`
     * *  `VIEW_VOTERS_AND_WATCHERS`
     *
     * **Comments permissions**
     *
     * *  `ADD_COMMENTS`
     * *  `DELETE_ALL_COMMENTS`
     * *  `DELETE_OWN_COMMENTS`
     * *  `EDIT_ALL_COMMENTS`
     * *  `EDIT_OWN_COMMENTS`
     *
     * **Attachments permissions**
     *
     * *  `CREATE_ATTACHMENTS`
     * *  `DELETE_ALL_ATTACHMENTS`
     * *  `DELETE_OWN_ATTACHMENTS`
     *
     * **Time tracking permissions**
     *
     * *  `DELETE_ALL_WORKLOGS`
     * *  `DELETE_OWN_WORKLOGS`
     * *  `EDIT_ALL_WORKLOGS`
     * *  `EDIT_OWN_WORKLOGS`
     * *  `WORK_ON_ISSUES`
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionSchemes Returned if the request is successful.
     * @throws ApiError
     */
    public getAllPermissionSchemes(data: GetAllPermissionSchemesData = {}): CancelablePromise<GetAllPermissionSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/permissionscheme',
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create permission scheme
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody The permission scheme to create.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionScheme Returned if the permission scheme is created.
     * @throws ApiError
     */
    public createPermissionScheme(data: CreatePermissionSchemeData): CancelablePromise<CreatePermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/permissionscheme',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.'
            }
        });
    }
    
    /**
     * Delete permission scheme
     * Deletes a permission scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme being deleted.
     * @returns void Returned if the permission scheme is deleted.
     * @throws ApiError
     */
    public deletePermissionScheme(data: DeletePermissionSchemeData): CancelablePromise<DeletePermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/permissionscheme/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the permission scheme is not found.'
            }
        });
    }
    
    /**
     * Get permission scheme
     * Returns a permission scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme to return.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getPermissionScheme(data: GetPermissionSchemeData): CancelablePromise<GetPermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/permissionscheme/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the permission scheme is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Update permission scheme
     * Updates a permission scheme. Below are some important things to note when using this resource:
     *
     * *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
     * *  If you want to update only the name and description, then do not send a permissions list in the request.
     * *  Sending an empty list will remove all permission grants from the permission scheme.
     *
     * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
     *
     * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme to update.
     * @param data.requestBody
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionScheme Returned if the scheme is updated.
     * @throws ApiError
     */
    public updatePermissionScheme(data: UpdatePermissionSchemeData): CancelablePromise<UpdatePermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/permissionscheme/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: `Returned if:

 *  the user does not have the necessary permission to update permission schemes.
 *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.`,
                404: 'Returned if the permission scheme is not found.'
            }
        });
    }
    
    /**
     * Get permission scheme grants
     * Returns all permission grants for a permission scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
     *
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `user` Returns information about the user who is granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `all` Returns all expandable information.
     * @returns PermissionGrants Returned if the request is successful.
     * @throws ApiError
     */
    public getPermissionSchemeGrants(data: GetPermissionSchemeGrantsData): CancelablePromise<GetPermissionSchemeGrantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/permissionscheme/{schemeId}/permission',
            path: {
                schemeId: data.schemeId
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the permission schemes is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Create permission grant
     * Creates a permission grant in a permission scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme in which to create a new permission grant.
     * @param data.requestBody The permission grant to create.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
     *
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `user` Returns information about the user who is granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `all` Returns all expandable information.
     * @returns PermissionGrant Returned if the scheme permission is created.
     * @throws ApiError
     */
    public createPermissionGrant(data: CreatePermissionGrantData): CancelablePromise<CreatePermissionGrantResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/permissionscheme/{schemeId}/permission',
            path: {
                schemeId: data.schemeId
            },
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the value for expand is invalid or the same permission grant is present.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Delete permission scheme grant
     * Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme to delete the permission grant from.
     * @param data.permissionId The ID of the permission grant to delete.
     * @returns void Returned if the permission grant is deleted.
     * @throws ApiError
     */
    public deletePermissionSchemeEntity(data: DeletePermissionSchemeEntityData): CancelablePromise<DeletePermissionSchemeEntityResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}',
            path: {
                schemeId: data.schemeId,
                permissionId: data.permissionId
            },
            errors: {
                400: 'Returned if permission grant with the provided ID is not found.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get permission scheme grant
     * Returns a permission grant.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The ID of the permission scheme.
     * @param data.permissionId The ID of the permission grant.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionGrant Returned if the request is successful.
     * @throws ApiError
     */
    public getPermissionSchemeGrant(data: GetPermissionSchemeGrantData): CancelablePromise<GetPermissionSchemeGrantResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}',
            path: {
                schemeId: data.schemeId,
                permissionId: data.permissionId
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.'
            }
        });
    }
    
}

export class IssuePrioritiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @deprecated
     * Get priorities
     * Returns the list of all issue priorities.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns Priority Returned if the request is successful.
     * @throws ApiError
     */
    public getPriorities(): CancelablePromise<GetPrioritiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priority',
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Create priority
     * Creates an issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PriorityId Returned if the request is successful.
     * @throws ApiError
     */
    public createPriority(data: CreatePriorityData): CancelablePromise<CreatePriorityResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/priority',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Set default priority
     * Sets default issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setDefaultPriority(data: SetDefaultPriorityData): CancelablePromise<SetDefaultPriorityResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/priority/default',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue priority isn't found."
            }
        });
    }
    
    /**
     * Move priorities
     * Changes the order of issue priorities.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public movePriorities(data: MovePrioritiesData): CancelablePromise<MovePrioritiesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/priority/move',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue priority isn't found."
            }
        });
    }
    
    /**
     * Search priorities
     * Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
     *
     * *  a list of priority IDs. Any invalid priority IDs are ignored.
     * *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
     * *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`.
     * @param data.projectId The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&projectId=10111`.
     * @param data.priorityName The name of priority to search for.
     * @param data.onlyDefault Whether only the default priority is returned.
     * @param data.expand Use `schemes` to return the associated priority schemes for each priority. Limited to returning first 15 priority schemes per priority.
     * @returns PageBeanPriority Returned if the request is successful.
     * @throws ApiError
     */
    public searchPriorities(data: SearchPrioritiesData = {}): CancelablePromise<SearchPrioritiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priority/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                projectId: data.projectId,
                priorityName: data.priorityName,
                onlyDefault: data.onlyDefault,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * @deprecated
     * Delete priority
     * *Deprecated: please refer to the* [changelog](https://developer.atlassian.com/changelog/#CHANGE-1066) *for more details.*
     *
     * Deletes an issue priority.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue priority.
     * @param data.replaceWith The ID of the issue priority that will replace the currently selected resolution.
     * @throws ApiError
     */
    public deletePriority(data: DeletePriorityData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/priority/{id}',
            path: {
                id: data.id
            },
            query: {
                replaceWith: data.replaceWith
            },
            errors: {
                303: 'Returned if the request is successful.',
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue priority isn't found.",
                409: 'Returned if a task to delete the issue priority is already running.'
            }
        });
    }
    
    /**
     * Get priority
     * Returns an issue priority.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.id The ID of the issue priority.
     * @returns Priority Returned if the request is successful.
     * @throws ApiError
     */
    public getPriority(data: GetPriorityData): CancelablePromise<GetPriorityResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priority/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: "Returned if the issue priority isn't found."
            }
        });
    }
    
    /**
     * Update priority
     * Updates an issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue priority.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updatePriority(data: UpdatePriorityData): CancelablePromise<UpdatePriorityResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/priority/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue priority isn't found."
            }
        });
    }
    
}

export class PrioritySchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get priority schemes
     * Returns a [paginated](#pagination) list of priority schemes.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.priorityId A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
     * @param data.schemeId A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
     * @param data.schemeName The name of scheme to search for.
     * @param data.onlyDefault Whether only the default priority is returned.
     * @param data.orderBy The ordering to return the priority schemes by.
     * @param data.expand A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.
     * @returns PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects Returned if the request is successful.
     * @throws ApiError
     */
    public getPrioritySchemes(data: GetPrioritySchemesData = {}): CancelablePromise<GetPrioritySchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priorityscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                priorityId: data.priorityId,
                schemeId: data.schemeId,
                schemeName: data.schemeName,
                onlyDefault: data.onlyDefault,
                orderBy: data.orderBy,
                expand: data.expand
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Create priority scheme
     * Creates a new priority scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PrioritySchemeId Returned if the request is completed.
     * @throws ApiError
     */
    public createPriorityScheme(data: CreatePrioritySchemeData): CancelablePromise<CreatePrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/priorityscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.',
                403: "Returned if the user doesn't have the necessary permissions.",
                409: 'Returned if an action with this priority scheme is still in progress.'
            }
        });
    }
    
    /**
     * Suggested priorities for mappings
     * Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PageBeanPriorityWithSequence Returned if the request is successful.
     * @throws ApiError
     */
    public suggestedPrioritiesForMappings(data: SuggestedPrioritiesForMappingsData): CancelablePromise<SuggestedPrioritiesForMappingsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/priorityscheme/mappings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get available priorities by priority scheme
     * Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The priority scheme ID.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.query The string to query priorities on by name.
     * @param data.exclude A list of priority IDs to exclude from the results.
     * @returns PageBeanPriorityWithSequence Returned if the request is successful.
     * @throws ApiError
     */
    public getAvailablePrioritiesByPriorityScheme(data: GetAvailablePrioritiesByPrioritySchemeData): CancelablePromise<GetAvailablePrioritiesByPrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priorityscheme/priorities/available',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                query: data.query,
                schemeId: data.schemeId,
                exclude: data.exclude
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Delete priority scheme
     * Deletes a priority scheme.
     *
     * This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The priority scheme ID.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deletePriorityScheme(data: DeletePrioritySchemeData): CancelablePromise<DeletePrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/priorityscheme/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permissions."
            }
        });
    }
    
    /**
     * Update priority scheme
     * Updates a priority scheme. This includes its details, the lists of priorities and projects in it
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.schemeId The ID of the priority scheme.
     * @param data.requestBody
     * @returns UpdatePrioritySchemeResponseBean Returned if the request is accepted.
     * @throws ApiError
     */
    public updatePriorityScheme(data: UpdatePrioritySchemeData): CancelablePromise<UpdatePrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/priorityscheme/{schemeId}',
            path: {
                schemeId: data.schemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permissions.",
                409: 'Returned if an action with this priority scheme is still in progress.'
            }
        });
    }
    
    /**
     * Get priorities by priority scheme
     * Returns a [paginated](#pagination) list of priorities by scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The priority scheme ID.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanPriorityWithSequence Returned if the request is successful.
     * @throws ApiError
     */
    public getPrioritiesByPriorityScheme(data: GetPrioritiesByPrioritySchemeData): CancelablePromise<GetPrioritiesByPrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priorityscheme/{schemeId}/priorities',
            path: {
                schemeId: data.schemeId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get projects by priority scheme
     * Returns a [paginated](#pagination) list of projects by scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.schemeId The priority scheme ID.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.projectId The project IDs to filter by. For example, `projectId=10000&projectId=10001`.
     * @param data.query The string to query projects on by name.
     * @returns PageBeanProject Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectsByPriorityScheme(data: GetProjectsByPrioritySchemeData): CancelablePromise<GetProjectsByPrioritySchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/priorityscheme/{schemeId}/projects',
            path: {
                schemeId: data.schemeId
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                projectId: data.projectId,
                query: data.query
            },
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
}

export class ProjectsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @deprecated
     * Get all projects
     * Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
     *
     * *  `description` Returns the project description.
     * *  `issueTypes` Returns all issue types associated with the project.
     * *  `lead` Returns information about the project lead.
     * *  `projectKeys` Returns all project keys associated with the project.
     * @param data.recent Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
     * @param data.properties A list of project properties to return for the project. This parameter accepts a comma-separated list.
     * @returns Project Returned if the request is successful.
     * @throws ApiError
     */
    public getAllProjects(data: GetAllProjectsData = {}): CancelablePromise<GetAllProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project',
            query: {
                expand: data.expand,
                recent: data.recent,
                properties: data.properties
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create project
     * Creates a project based on a project type template, as shown in the following table:
     *
     * | Project Type Key | Project Template Key |
     * |--|--|
     * | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |
     * | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |
     * | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |
     * The project types are available according to the installed Jira features as follows:
     *
     * *  Jira Core, the default, enables `business` projects.
     * *  Jira Service Management enables `service_desk` projects.
     * *  Jira Software enables `software` projects.
     *
     * To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody The JSON representation of the project being created.
     * @returns ProjectIdentifiers Returned if the project is created.
     * @throws ApiError
     */
    public createProject(data: CreateProjectData): CancelablePromise<CreateProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid and the project could not be created.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to create projects.'
            }
        });
    }
    
    /**
     * Get recent projects
     * Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
     *
     * *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
     *
     * *  `description` Returns the project description.
     * *  `projectKeys` Returns all project keys associated with a project.
     * *  `lead` Returns information about the project lead.
     * *  `issueTypes` Returns all issue types associated with the project.
     * *  `url` Returns the URL associated with the project.
     * *  `permissions` Returns the permissions associated with the project.
     * *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
     * *  `*` Returns the project with all available expand options.
     * @param data.properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.
     * @returns Project Returned if the request is successful.
     * @throws ApiError
     */
    public getRecent(data: GetRecentData = {}): CancelablePromise<GetRecentResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/recent',
            query: {
                expand: data.expand,
                properties: data.properties
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get projects paginated
     * Returns a [paginated](#pagination) list of projects visible to the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
     *
     * *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field.
     *
     * *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
     * *  `issueCount` Sorts by the total number of issues in each project.
     * *  `key` Sorts by project key.
     * *  `lastIssueUpdatedTime` Sorts by the last issue update time.
     * *  `name` Sorts by project name.
     * *  `owner` Sorts by project lead.
     * *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
     * *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
     * @param data.id The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.
     * @param data.keys The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.
     * @param data.query Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).
     * @param data.typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.
     * @param data.categoryId The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
     * @param data.action Filter results by projects for which the user can:
     *
     * *  `view` the project, meaning that they have one of the following permissions:
     *
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  `edit` the project, meaning that they have one of the following permissions:
     *
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
     *
     * *  `description` Returns the project description.
     * *  `projectKeys` Returns all project keys associated with a project.
     * *  `lead` Returns information about the project lead.
     * *  `issueTypes` Returns all issue types associated with the project.
     * *  `url` Returns the URL associated with the project.
     * *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
     * @param data.status EXPERIMENTAL. Filter results by project status:
     *
     * *  `live` Search live projects.
     * *  `archived` Search archived projects.
     * *  `deleted` Search deleted projects, those in the recycle bin.
     * @param data.properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.
     * @param data.propertyQuery EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.
     * @returns PageBeanProject Returned if the request is successful.
     * @throws ApiError
     */
    public searchProjects(data: SearchProjectsData = {}): CancelablePromise<SearchProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy,
                id: data.id,
                keys: data.keys,
                query: data.query,
                typeKey: data.typeKey,
                categoryId: data.categoryId,
                action: data.action,
                expand: data.expand,
                status: data.status,
                properties: data.properties,
                propertyQuery: data.propertyQuery
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if no projects matching the search criteria are found.'
            }
        });
    }
    
    /**
     * Delete project
     * Deletes a project.
     *
     * You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.enableUndo Whether this project is placed in the Jira recycle bin where it will be available for restoration.
     * @returns void Returned if the project is deleted.
     * @throws ApiError
     */
    public deleteProject(data: DeleteProjectData): CancelablePromise<DeleteProjectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/project/{projectIdOrKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                enableUndo: data.enableUndo
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to delete it.'
            }
        });
    }
    
    /**
     * Get project
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
     *
     * *  `description` The project description.
     * *  `issueTypes` The issue types associated with the project.
     * *  `lead` The project lead.
     * *  `projectKeys` All project keys associated with the project.
     * *  `issueTypeHierarchy` The project issue type hierarchy.
     * @param data.properties A list of project properties to return for the project. This parameter accepts a comma-separated list.
     * @returns Project Returned if successful.
     * @throws ApiError
     */
    public getProject(data: GetProjectData): CancelablePromise<GetProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                expand: data.expand,
                properties: data.properties
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Update project
     * Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
     *
     * All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.requestBody The project details to be updated.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
     *
     * *  `description` The project description.
     * *  `issueTypes` The issue types associated with the project.
     * *  `lead` The project lead.
     * *  `projectKeys` All project keys associated with the project.
     * @returns Project Returned if the project is updated.
     * @throws ApiError
     */
    public updateProject(data: UpdateProjectData): CancelablePromise<UpdateProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: `Returned if:

 *  the user does not have the necessary permission to update project details.
 *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans.`,
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Archive project
     * Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public archiveProject(data: ArchiveProjectData): CancelablePromise<ArchiveProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project/{projectIdOrKey}/archive',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permissions.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Delete project asynchronously
     * Deletes a project asynchronously.
     *
     * This operation is:
     *
     * *  transactional, that is, if part of the delete fails the project is not deleted.
     * *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @throws ApiError
     */
    public deleteProjectAsynchronously(data: DeleteProjectAsynchronouslyData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project/{projectIdOrKey}/delete',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                303: 'Returned if the request is successful.',
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Restore deleted or archived project
     * Restores a project that has been archived or placed in the Jira recycle bin.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @returns Project Returned if the request is successful.
     * @throws ApiError
     */
    public restore(data: RestoreData): CancelablePromise<RestoreResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project/{projectIdOrKey}/restore',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get all statuses for project
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @returns IssueTypeWithStatus Returned if the request is successful.
     * @throws ApiError
     */
    public getAllStatuses(data: GetAllStatusesData): CancelablePromise<GetAllStatusesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/statuses',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get project issue type hierarchy
     * Get the issue type hierarchy for a next-gen project.
     *
     * The issue type hierarchy for a project consists of:
     *
     * *  *Epic* at level 1 (optional).
     * *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
     * *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectId The ID of the project.
     * @returns ProjectIssueTypeHierarchy Returned if the request is successful.
     * @throws ApiError
     */
    public getHierarchy(data: GetHierarchyData): CancelablePromise<GetHierarchyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectId}/hierarchy',
            path: {
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get project notification scheme
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectKeyOrId The project ID or project key (case sensitive).
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `all` Returns all expandable information
     * *  `field` Returns information about any custom fields assigned to receive an event
     * *  `group` Returns information about any groups assigned to receive an event
     * *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
     * *  `projectRole` Returns information about any project roles assigned to receive an event
     * *  `user` Returns information about any users assigned to receive an event
     * @returns NotificationScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getNotificationSchemeForProject(data: GetNotificationSchemeForProjectData): CancelablePromise<GetNotificationSchemeForProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectKeyOrId}/notificationscheme',
            path: {
                projectKeyOrId: data.projectKeyOrId
            },
            query: {
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user is not an administrator.'
            }
        });
    }
    
}

export class ProjectTypesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns ProjectType Returned if the request is successful.
     * @throws ApiError
     */
    public getAllProjectTypes(): CancelablePromise<GetAllProjectTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/type',
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get licensed project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
     * @returns ProjectType Returned if the request is successful.
     * @throws ApiError
     */
    public getAllAccessibleProjectTypes(): CancelablePromise<GetAllAccessibleProjectTypesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/type/accessible'
        });
    }
    
    /**
     * Get project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.projectTypeKey The key of the project type.
     * @returns ProjectType Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectTypeByKey(data: GetProjectTypeByKeyData): CancelablePromise<GetProjectTypeByKeyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/type/{projectTypeKey}',
            path: {
                projectTypeKey: data.projectTypeKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the project type is not found.'
            }
        });
    }
    
    /**
     * Get accessible project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.projectTypeKey The key of the project type.
     * @returns ProjectType Returned if the request is successful.
     * @throws ApiError
     */
    public getAccessibleProjectTypeByKey(data: GetAccessibleProjectTypeByKeyData): CancelablePromise<GetAccessibleProjectTypeByKeyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/type/{projectTypeKey}/accessible',
            path: {
                projectTypeKey: data.projectTypeKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project type is not accessible to the user.'
            }
        });
    }
    
}

export class ProjectAvatarsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Set project avatar
     * Sets the avatar displayed for a project.
     *
     * Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateProjectAvatar(data: UpdateProjectAvatarData): CancelablePromise<UpdateProjectAvatarResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}/avatar',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to administer the project.',
                404: 'Returned if the project or avatar is not found or the user does not have permission to view the project.'
            }
        });
    }
    
    /**
     * Delete project avatar
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or (case-sensitive) key.
     * @param data.id The ID of the avatar.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteProjectAvatar(data: DeleteProjectAvatarData): CancelablePromise<DeleteProjectAvatarResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/project/{projectIdOrKey}/avatar/{id}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the avatar is a system avatar or the user does not have permission to administer the project.',
                404: 'Returned if the project or avatar is not found or the user does not have permission to view the project.'
            }
        });
    }
    
    /**
     * Load project avatar
     * Loads an avatar for a project.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     * *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     * *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST `
     *
     * `--user email@example.com:<api_token> `
     *
     * `--header 'X-Atlassian-Token: no-check' `
     *
     * `--header 'Content-Type: image/< image_type>' `
     *
     * `--data-binary "<@/path/to/file/with/your/avatar>" `
     *
     * `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param data.requestBody
     * @param data.x The X coordinate of the top-left corner of the crop region.
     * @param data.y The Y coordinate of the top-left corner of the crop region.
     * @param data.size The length of each side of the crop region.
     * @returns Avatar Returned if the request is successful.
     * @throws ApiError
     */
    public createProjectAvatar(data: CreateProjectAvatarData): CancelablePromise<CreateProjectAvatarResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project/{projectIdOrKey}/avatar2',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                x: data.x,
                y: data.y,
                size: data.size
            },
            body: data.requestBody,
            mediaType: '*/*',
            errors: {
                400: `Returned if:

 *  an image isn't included in the request.
 *  the image type is unsupported.
 *  the crop parameters extend the crop area beyond the edge of the image.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to administer the project or an anonymous call is made to the operation.',
                404: 'Returned if the project is not found or the user does not have permission to view the project.'
            }
        });
    }
    
    /**
     * Get all project avatars
     * Returns all project avatars, grouped by system and custom avatars.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or (case-sensitive) key of the project.
     * @returns ProjectAvatars Returned if request is successful.
     * @throws ApiError
     */
    public getAllProjectAvatars(data: GetAllProjectAvatarsData): CancelablePromise<GetAllProjectAvatarsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/avatars',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or the user does not have permission to view the project.'
            }
        });
    }
    
}

export class ProjectClassificationLevelsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Remove the default data classification level from a project
     * Remove the default data classification level for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case-sensitive).
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public removeDefaultProjectClassification(data: RemoveDefaultProjectClassificationData): CancelablePromise<RemoveDefaultProjectClassificationResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/project/{projectIdOrKey}/classification-level/default',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Get the default data classification level of a project
     * Returns the default data classification for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case-sensitive).
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public getDefaultProjectClassification(data: GetDefaultProjectClassificationData): CancelablePromise<GetDefaultProjectClassificationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/classification-level/default',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                401: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Update the default data classification level of a project
     * Updates the default data classification level for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case-sensitive).
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateDefaultProjectClassification(data: UpdateDefaultProjectClassificationData): CancelablePromise<UpdateDefaultProjectClassificationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}/classification-level/default',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
}

export class ProjectFeaturesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project features
     * Returns the list of features for a project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or (case-sensitive) key of the project.
     * @returns ContainerForProjectFeatures Returned if the request is successful.
     * @throws ApiError
     */
    public getFeaturesForProject(data: GetFeaturesForProjectData): CancelablePromise<GetFeaturesForProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/features',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Set project feature state
     * Sets the state of a project feature.
     * @param data The data for the request.
     * @param data.projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param data.featureKey The key of the feature.
     * @param data.requestBody Details of the feature state change.
     * @returns ContainerForProjectFeatures Returned if the request is successful.
     * @throws ApiError
     */
    public toggleFeatureForProject(data: ToggleFeatureForProjectData): CancelablePromise<ToggleFeatureForProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}/features/{featureKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                featureKey: data.featureKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the project or project feature is not found.'
            }
        });
    }
    
}

export class ProjectPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project property keys
     * Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectPropertyKeys(data: GetProjectPropertyKeysData): CancelablePromise<GetProjectPropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/properties',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to view the project.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
    /**
     * Delete project property
     * Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.propertyKey The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.
     * @returns void Returned if the project property is deleted.
     * @throws ApiError
     */
    public deleteProjectProperty(data: DeleteProjectPropertyData): CancelablePromise<DeleteProjectPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to administer the project.',
                404: 'Returned if the project or property is not found.'
            }
        });
    }
    
    /**
     * Get project property
     * Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.propertyKey The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectProperty(data: GetProjectPropertyData): CancelablePromise<GetProjectPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to view the project.',
                404: 'Returned if the project or property is not found.'
            }
        });
    }
    
    /**
     * Set project property
     * Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.propertyKey The key of the project property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @returns unknown Returned if the project property is updated.
     * @throws ApiError
     */
    public setProjectProperty(data: SetProjectPropertyData): CancelablePromise<SetProjectPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the project key or id is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have permission to administer the project.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
}

export class ProjectRolesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project roles for project
     * Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.
     *
     * Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @returns string Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectRoles(data: GetProjectRolesData): CancelablePromise<GetProjectRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/role',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project.',
                404: 'Returned if the project is not found or or if the user does not have administrative permissions for the project.'
            }
        });
    }
    
    /**
     * Get project role for project
     * Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
     *
     * To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.excludeInactiveUsers Exclude inactive users.
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectRole(data: GetProjectRoleData): CancelablePromise<GetProjectRoleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/role/{id}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                id: data.id
            },
            query: {
                excludeInactiveUsers: data.excludeInactiveUsers
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the project or project role is not found.
 *  the user does not have administrative permission.`
            }
        });
    }
    
    /**
     * Get project role details
     * Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.currentMember Whether the roles should be filtered to include only those the user is assigned to.
     * @param data.excludeConnectAddons
     * @returns ProjectRoleDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectRoleDetails(data: GetProjectRoleDetailsData): CancelablePromise<GetProjectRoleDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/roledetails',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                currentMember: data.currentMember,
                excludeConnectAddons: data.excludeConnectAddons
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project is not found or if the user does not have the necessary permissions for the project.'
            }
        });
    }
    
    /**
     * Get all project roles
     * Gets a list of all project roles, complete with project role details and default actors.
     *
     * ### About project roles ###
     *
     * [Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
     *
     * Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
     *
     * #### Members and actors ####
     *
     * In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
     *
     * Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:
     *
     * *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
     * *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public getAllProjectRoles(): CancelablePromise<GetAllProjectRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/role',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.'
            }
        });
    }
    
    /**
     * Create project role
     * Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
     *
     * *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public createProjectRole(data: CreateProjectRoleData): CancelablePromise<CreateProjectRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/role',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                409: 'Returned if a project role with the provided name already exists.'
            }
        });
    }
    
    /**
     * Delete project role
     * Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.swap The ID of the project role that will replace the one being deleted.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteProjectRole(data: DeleteProjectRoleData): CancelablePromise<DeleteProjectRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/role/{id}',
            path: {
                id: data.id
            },
            query: {
                swap: data.swap
            },
            errors: {
                400: 'Returned if the request is invalid or if the replacement project role is not found.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role being deleted is not found.',
                409: 'Returned if the project role being deleted is in use and a replacement project role is not specified in the request.'
            }
        });
    }
    
    /**
     * Get project role by ID
     * Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectRoleById(data: GetProjectRoleByIdData): CancelablePromise<GetProjectRoleByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/role/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
    /**
     * Partial update project role
     * Updates either the project role's name or its description.
     *
     * You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.requestBody
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public partialUpdateProjectRole(data: PartialUpdateProjectRoleData): CancelablePromise<PartialUpdateProjectRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/role/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
    /**
     * Fully update project role
     * Updates the project role's name and description. You must include both a name and a description in the request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.requestBody
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public fullyUpdateProjectRole(data: FullyUpdateProjectRoleData): CancelablePromise<FullyUpdateProjectRoleResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/role/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
}

export class ProjectRoleActorsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete actors from project role
     * Deletes actors from a project role for the project.
     *
     * To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.user The user account ID of the user to remove from the project role.
     * @param data.group The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
     * @param data.groupId The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteActor(data: DeleteActorData): CancelablePromise<DeleteActorResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/project/{projectIdOrKey}/role/{id}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                id: data.id
            },
            query: {
                user: data.user,
                group: data.group,
                groupId: data.groupId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                404: `Returned if:

 *  the project or project role is not found.
 *  the calling user does not have administrative permission.`
            }
        });
    }
    
    /**
     * Add actors to project role
     * Adds actors to a project role for the project.
     *
     * To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.requestBody The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.
     * @returns ProjectRole Returned if the request is successful. The complete list of actors for the project is returned.
     *
     * For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.
     * @throws ApiError
     */
    public addActorUsers(data: AddActorUsersData): CancelablePromise<AddActorUsersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/project/{projectIdOrKey}/role/{id}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.',
                404: `Returned if:

 *  the project is not found.
 *  the user or group is not found.
 *  the group or user is not active.`
            }
        });
    }
    
    /**
     * Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.
     *
     * To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.requestBody The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.
     * @returns ProjectRole Returned if the request is successful. The complete list of actors for the project is returned.
     * @throws ApiError
     */
    public setActors(data: SetActorsData): CancelablePromise<SetActorsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectIdOrKey}/role/{id}',
            path: {
                projectIdOrKey: data.projectIdOrKey,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.',
                404: `Returned if:

 *  the project is not found.
 *  a user or group is not found.
 *  a group or user is not active.`
            }
        });
    }
    
    /**
     * Delete default actors from project role
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
     *
     * Changing a project role's default actors does not affect project role members for projects already created.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.user The user account ID of the user to remove as a default actor.
     * @param data.groupId The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.
     * @param data.group The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public deleteProjectRoleActorsFromRole(data: DeleteProjectRoleActorsFromRoleData): CancelablePromise<DeleteProjectRoleActorsFromRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/role/{id}/actors',
            path: {
                id: data.id
            },
            query: {
                user: data.user,
                groupId: data.groupId,
                group: data.group
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
    /**
     * Get default actors for project role
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectRoleActorsForRole(data: GetProjectRoleActorsForRoleData): CancelablePromise<GetProjectRoleActorsForRoleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/role/{id}/actors',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
    /**
     * Add default actors to project role
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
     *
     * Changing a project role's default actors does not affect project role members for projects already created.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param data.requestBody
     * @returns ProjectRole Returned if the request is successful.
     * @throws ApiError
     */
    public addProjectRoleActorsToRole(data: AddProjectRoleActorsToRoleData): CancelablePromise<AddProjectRoleActorsToRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/role/{id}/actors',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have administrative permissions.',
                404: 'Returned if the project role is not found.'
            }
        });
    }
    
}

export class ProjectVersionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project versions paginated
     * Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `description` Sorts by version description.
     * *  `name` Sorts by version name.
     * *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
     * *  `sequence` Sorts by the order of appearance in the user interface.
     * *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
     * @param data.query Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).
     * @param data.status A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `issuesstatus` Returns the number of issues in each status category for each version.
     * *  `operations` Returns actions that can be performed on the specified version.
     * *  `driver` Returns the Atlassian account ID of the version driver.
     * *  `approvers` Returns a list containing the approvers for this version.
     * @returns PageBeanVersion Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectVersionsPaginated(data: GetProjectVersionsPaginatedData): CancelablePromise<GetProjectVersionsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/version',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                orderBy: data.orderBy,
                query: data.query,
                status: data.status,
                expand: data.expand
            },
            errors: {
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get project versions
     * Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectIdOrKey The project ID or project key (case sensitive).
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.
     * @returns Version Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectVersions(data: GetProjectVersionsData): CancelablePromise<GetProjectVersionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectIdOrKey}/versions',
            path: {
                projectIdOrKey: data.projectIdOrKey
            },
            query: {
                expand: data.expand
            },
            errors: {
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Create version
     * Creates a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Version Returned if the request is successful.
     * @throws ApiError
     */
    public createVersion(data: CreateVersionData): CancelablePromise<CreateVersionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/version',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the project is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * @deprecated
     * Delete version
     * Deletes a project version.
     *
     * Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
     *
     * Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @param data.moveFixIssuesTo The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @param data.moveAffectedIssuesTo The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @returns void Returned if the version is deleted.
     * @throws ApiError
     */
    public deleteVersion(data: DeleteVersionData): CancelablePromise<DeleteVersionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/version/{id}',
            path: {
                id: data.id
            },
            query: {
                moveFixIssuesTo: data.moveFixIssuesTo,
                moveAffectedIssuesTo: data.moveAffectedIssuesTo
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: `Returned if:

 *  the authentication credentials are incorrect.
 *  the user does not have the required permissions.`,
                404: 'Returned if the version is not found.'
            }
        });
    }
    
    /**
     * Get version
     * Returns a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @param data.expand Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `operations` Returns the list of operations available for this version.
     * *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
     * *  `driver` Returns the Atlassian account ID of the version driver.
     * *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.
     * @returns Version Returned if the request is successful.
     * @throws ApiError
     */
    public getVersion(data: GetVersionData): CancelablePromise<GetVersionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/version/{id}',
            path: {
                id: data.id
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the version is not found or the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Update version
     * Updates a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @param data.requestBody
     * @returns Version Returned if the request is successful.
     * @throws ApiError
     */
    public updateVersion(data: UpdateVersionData): CancelablePromise<UpdateVersionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/version/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  the request is invalid.
 *  the user does not have the required permissions.`,
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if the version is not found.'
            }
        });
    }
    
    /**
     * Merge versions
     * Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
     *
     * Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version to delete.
     * @param data.moveIssuesTo The ID of the version to merge into.
     * @returns unknown Returned if the version is deleted.
     * @throws ApiError
     */
    public mergeVersions(data: MergeVersionsData): CancelablePromise<MergeVersionsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/version/{id}/mergeto/{moveIssuesTo}',
            path: {
                id: data.id,
                moveIssuesTo: data.moveIssuesTo
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: `Returned if:

 *  the authentication credentials are incorrect or missing.
 *  the user does not have the required permissions.`,
                404: 'Returned if the version to be deleted or the version to merge to are not found.'
            }
        });
    }
    
    /**
     * Move version
     * Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version to be moved.
     * @param data.requestBody
     * @returns Version Returned if the request is successful.
     * @throws ApiError
     */
    public moveVersion(data: MoveVersionData): CancelablePromise<MoveVersionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/version/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  no body parameters are provided.
 *  \`after\` and \`position\` are provided.
 *  \`position\` is invalid.`,
                401: `Returned if:

 *  the authentication credentials are incorrect or missing
 *  the user does not have the required commissions.`,
                404: 'Returned if the version or move after version are not found.'
            }
        });
    }
    
    /**
     * Get version's related issues count
     * Returns the following counts for a version:
     *
     * *  Number of issues where the `fixVersion` is set to the version.
     * *  Number of issues where the `affectedVersion` is set to the version.
     * *  Number of issues where a version custom field is set to the version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @returns VersionIssueCounts Returned if the request is successful.
     * @throws ApiError
     */
    public getVersionRelatedIssues(data: GetVersionRelatedIssuesData): CancelablePromise<GetVersionRelatedIssuesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/version/{id}/relatedIssueCounts',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.',
                404: `Returned if:

 *  the version is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Get related work
     * Returns related work items for the given version id.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @returns VersionRelatedWork Returned if the request is successful.
     * @throws ApiError
     */
    public getRelatedWork(data: GetRelatedWorkData): CancelablePromise<GetRelatedWorkResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/version/{id}/relatedwork',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the version is not found or the user does not have the necessary permission.',
                500: 'Returned if reading related work fails'
            }
        });
    }
    
    /**
     * Create related work
     * Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns VersionRelatedWork Returned if the request is successful.
     * @throws ApiError
     */
    public createRelatedWork(data: CreateRelatedWorkData): CancelablePromise<CreateRelatedWorkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/version/{id}/relatedwork',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the version is not found.'
            }
        });
    }
    
    /**
     * Update related work
     * Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version to update the related work on. For the related work id, pass it to the input JSON.
     * @param data.requestBody
     * @returns VersionRelatedWork Returned if the request is successful together with updated related work.
     * @throws ApiError
     */
    public updateRelatedWork(data: UpdateRelatedWorkData): CancelablePromise<UpdateRelatedWorkResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/version/{id}/relatedwork',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request data is invalid',
                401: 'Returned if the authentication credentials are incorrect.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the version or the related work is not found.'
            }
        });
    }
    
    /**
     * Delete and replace version
     * Deletes a project version.
     *
     * Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @param data.requestBody
     * @returns unknown Returned if the version is deleted.
     * @throws ApiError
     */
    public deleteAndReplaceVersion(data: DeleteAndReplaceVersionData): CancelablePromise<DeleteAndReplaceVersionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/version/{id}/removeAndSwap',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the version to delete is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Get version's unresolved issues count
     * Returns counts of the issues and unresolved issues for the project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     * @param data The data for the request.
     * @param data.id The ID of the version.
     * @returns VersionUnresolvedIssuesCount Returned if the request is successful.
     * @throws ApiError
     */
    public getVersionUnresolvedIssues(data: GetVersionUnresolvedIssuesData): CancelablePromise<GetVersionUnresolvedIssuesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/version/{id}/unresolvedIssueCount',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the version is not found.
 *  the user does not have the required permissions.`
            }
        });
    }
    
    /**
     * Delete related work
     * Deletes the given related work for the given version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param data The data for the request.
     * @param data.versionId The ID of the version that the target related work belongs to.
     * @param data.relatedWorkId The ID of the related work to delete.
     * @returns void Returned if the related work is deleted.
     * @throws ApiError
     */
    public deleteRelatedWork(data: DeleteRelatedWorkData): CancelablePromise<DeleteRelatedWorkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}',
            path: {
                versionId: data.versionId,
                relatedWorkId: data.relatedWorkId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: `Returned if

the authentication credentials are incorrect.`,
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the version/related work is not found.'
            }
        });
    }
    
}

export class ProjectEmailService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project's sender email
     * Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param data The data for the request.
     * @param data.projectId The project ID.
     * @returns ProjectEmailAddress Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectEmail(data: GetProjectEmailData): CancelablePromise<GetProjectEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectId}/email',
            path: {
                projectId: data.projectId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to read project.',
                404: "Returned if the project or project's sender email address is not found."
            }
        });
    }
    
    /**
     * Set project's sender email
     * Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
     *
     * If `emailAddress` is an empty string, the default email address is restored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.projectId The project ID.
     * @param data.requestBody The project's sender email address to be set.
     * @returns unknown Returned if the project's sender email address is successfully set.
     * @throws ApiError
     */
    public updateProjectEmail(data: UpdateProjectEmailData): CancelablePromise<UpdateProjectEmailResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectId}/email',
            path: {
                projectId: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid, if the email address is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have permission to administer the project.',
                404: 'Returned if the project is not found.'
            }
        });
    }
    
}

export class ProjectPermissionSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get project issue security scheme
     * Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectKeyOrId The project ID or project key (case sensitive).
     * @returns SecurityScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectIssueSecurityScheme(data: GetProjectIssueSecuritySchemeData): CancelablePromise<GetProjectIssueSecuritySchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme',
            path: {
                projectKeyOrId: data.projectKeyOrId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the project is visible to the user but the user doesn't have administrative permissions.",
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
    /**
     * Get assigned permission scheme
     * Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param data The data for the request.
     * @param data.projectKeyOrId The project ID or project key (case sensitive).
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getAssignedPermissionScheme(data: GetAssignedPermissionSchemeData): CancelablePromise<GetAssignedPermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectKeyOrId}/permissionscheme',
            path: {
                projectKeyOrId: data.projectKeyOrId
            },
            query: {
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user does not have permission to view the project's configuration.",
                404: 'Returned if the project is not found or the user does not have permission to view the project.'
            }
        });
    }
    
    /**
     * Assign permission scheme
     * Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
     * @param data The data for the request.
     * @param data.projectKeyOrId The project ID or project key (case sensitive).
     * @param data.requestBody
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
     *
     * *  `all` Returns all expandable information.
     * *  `field` Returns information about the custom field granted the permission.
     * *  `group` Returns information about the group that is granted the permission.
     * *  `permissions` Returns all permission grants for each permission scheme.
     * *  `projectRole` Returns information about the project role granted the permission.
     * *  `user` Returns information about the user who is granted the permission.
     * @returns PermissionScheme Returned if the request is successful.
     * @throws ApiError
     */
    public assignPermissionScheme(data: AssignPermissionSchemeData): CancelablePromise<AssignPermissionSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/project/{projectKeyOrId}/permissionscheme',
            path: {
                projectKeyOrId: data.projectKeyOrId
            },
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: `Returned if:

 *  the user does not have the necessary permission to edit the project's configuration.
 *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans.`,
                404: 'Returned if the project or permission scheme is not found.'
            }
        });
    }
    
    /**
     * Get project issue security levels
     * Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
     * @param data The data for the request.
     * @param data.projectKeyOrId The project ID or project key (case sensitive).
     * @returns ProjectIssueSecurityLevels Returned if the request is successful.
     * @throws ApiError
     */
    public getSecurityLevelsForProject(data: GetSecurityLevelsForProjectData): CancelablePromise<GetSecurityLevelsForProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/project/{projectKeyOrId}/securitylevel',
            path: {
                projectKeyOrId: data.projectKeyOrId
            },
            errors: {
                404: 'Returned if the project is not found or the user does not have permission to view it.'
            }
        });
    }
    
}

export class ProjectCategoriesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all project categories
     * Returns all project categories.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns ProjectCategory Returned if the request is successful.
     * @throws ApiError
     */
    public getAllProjectCategories(): CancelablePromise<GetAllProjectCategoriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/projectCategory',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create project category
     * Creates a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProjectCategory Returned if the request is successful.
     * @throws ApiError
     */
    public createProjectCategory(data: CreateProjectCategoryData): CancelablePromise<CreateProjectCategoryResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/projectCategory',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`name\` is not provided or exceeds 255 characters.
 *  \`description\` exceeds 1000 characters.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                409: 'Returned if the project category name is in use.'
            }
        });
    }
    
    /**
     * Delete project category
     * Deletes a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id ID of the project category to delete.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeProjectCategory(data: RemoveProjectCategoryData): CancelablePromise<RemoveProjectCategoryResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/projectCategory/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the project category is not found.'
            }
        });
    }
    
    /**
     * Get project category by ID
     * Returns a project category.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.id The ID of the project category.
     * @returns ProjectCategory Returned if the request is successful.
     * @throws ApiError
     */
    public getProjectCategoryById(data: GetProjectCategoryByIdData): CancelablePromise<GetProjectCategoryByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/projectCategory/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project category is not found.'
            }
        });
    }
    
    /**
     * Update project category
     * Updates a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UpdatedProjectCategory Returned if the request is successful.
     * @throws ApiError
     */
    public updateProjectCategory(data: UpdateProjectCategoryData): CancelablePromise<UpdateProjectCategoryResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/projectCategory/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:

 *  \`name\` has been modified and exceeds 255 characters.
 *  \`description\` has been modified and exceeds 1000 characters.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the project category is not found.'
            }
        });
    }
    
}

export class ProjectKeyAndNameValidationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Validate project key
     * Validates a project key by confirming the key is a valid string and not in use.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.key The project key.
     * @returns ErrorCollection Returned if the request is successful.
     * @throws ApiError
     */
    public validateProjectKey(data: ValidateProjectKeyData = {}): CancelablePromise<ValidateProjectKeyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/projectvalidate/key',
            query: {
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get valid project key
     * Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.key The project key.
     * @returns string Returned if the request is successful.
     * @throws ApiError
     */
    public getValidProjectKey(data: GetValidProjectKeyData = {}): CancelablePromise<GetValidProjectKeyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/projectvalidate/validProjectKey',
            query: {
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
    /**
     * Get valid project name
     * Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.name The project name.
     * @returns string Returned if the request is successful.
     * @throws ApiError
     */
    public getValidProjectName(data: GetValidProjectNameData): CancelablePromise<GetValidProjectNameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/projectvalidate/validProjectName',
            query: {
                name: data.name
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect.',
                404: 'Returned if a valid project name cannot be generated.'
            }
        });
    }
    
}

export class IssueResolutionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @deprecated
     * Get resolutions
     * Returns a list of all issue resolution values.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns Resolution Returned if the request is successful.
     * @throws ApiError
     */
    public getResolutions(): CancelablePromise<GetResolutionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/resolution',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Create resolution
     * Creates an issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResolutionId Returned if the request is successful.
     * @throws ApiError
     */
    public createResolution(data: CreateResolutionData): CancelablePromise<CreateResolutionResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/resolution',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission."
            }
        });
    }
    
    /**
     * Set default resolution
     * Sets default issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setDefaultResolution(data: SetDefaultResolutionData): CancelablePromise<SetDefaultResolutionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/resolution/default',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue resolution isn't found."
            }
        });
    }
    
    /**
     * Move resolutions
     * Changes the order of issue resolutions.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public moveResolutions(data: MoveResolutionsData): CancelablePromise<MoveResolutionsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/resolution/move',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue resolution isn't found."
            }
        });
    }
    
    /**
     * Search resolutions
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:
     *
     * *  a list of resolutions IDs.
     * *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of resolutions IDs to be filtered out
     * @param data.onlyDefault When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false
     * @returns PageBeanResolutionJsonBean Returned if the request is successful.
     * @throws ApiError
     */
    public searchResolutions(data: SearchResolutionsData = {}): CancelablePromise<SearchResolutionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/resolution/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                onlyDefault: data.onlyDefault
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Delete resolution
     * Deletes an issue resolution.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue resolution.
     * @param data.replaceWith The ID of the issue resolution that will replace the currently selected resolution.
     * @throws ApiError
     */
    public deleteResolution(data: DeleteResolutionData): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/resolution/{id}',
            path: {
                id: data.id
            },
            query: {
                replaceWith: data.replaceWith
            },
            errors: {
                303: 'Returned if the request is successful.',
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue resolution isn't found.",
                409: 'Returned if a task to delete the issue resolution is already running.'
            }
        });
    }
    
    /**
     * Get resolution
     * Returns an issue resolution value.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.id The ID of the issue resolution value.
     * @returns Resolution Returned if the request is successful.
     * @throws ApiError
     */
    public getResolution(data: GetResolutionData): CancelablePromise<GetResolutionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/resolution/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue resolution value is not found.'
            }
        });
    }
    
    /**
     * Update resolution
     * Updates an issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the issue resolution.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateResolution(data: UpdateResolutionData): CancelablePromise<UpdateResolutionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/resolution/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: "Returned if the request isn't valid.",
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the user doesn't have the necessary permission.",
                404: "Returned if the issue resolution isn't found."
            }
        });
    }
    
}

export class ScreenTabsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get bulk screen tabs
     * Returns the list of tabs for a bulk of screens.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.
     * @param data.tabId The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResult The maximum number of items to return per page. The maximum number is 100,
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public getBulkScreenTabs(data: GetBulkScreenTabsData = {}): CancelablePromise<GetBulkScreenTabsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screens/tabs',
            query: {
                screenId: data.screenId,
                tabId: data.tabId,
                startAt: data.startAt,
                maxResult: data.maxResult
            },
            errors: {
                400: 'Returned if the screen ID or the tab ID is empty.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Get all screen tabs
     * Returns the list of tabs for a screen.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.projectKey The key of the project.
     * @returns ScreenableTab Returned if the request is successful.
     * @throws ApiError
     */
    public getAllScreenTabs(data: GetAllScreenTabsData): CancelablePromise<GetAllScreenTabsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screens/{screenId}/tabs',
            path: {
                screenId: data.screenId
            },
            query: {
                projectKey: data.projectKey
            },
            errors: {
                400: 'Returned if the screen ID is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen is not found.'
            }
        });
    }
    
    /**
     * Create screen tab
     * Creates a tab for a screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.requestBody
     * @returns ScreenableTab Returned if the request is successful.
     * @throws ApiError
     */
    public addScreenTab(data: AddScreenTabData): CancelablePromise<AddScreenTabResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens/{screenId}/tabs',
            path: {
                screenId: data.screenId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen is not found.'
            }
        });
    }
    
    /**
     * Delete screen tab
     * Deletes a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteScreenTab(data: DeleteScreenTabData): CancelablePromise<DeleteScreenTabResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}',
            path: {
                screenId: data.screenId,
                tabId: data.tabId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen or screen tab is not found.'
            }
        });
    }
    
    /**
     * Update screen tab
     * Updates the name of a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.requestBody
     * @returns ScreenableTab Returned if the request is successful.
     * @throws ApiError
     */
    public renameScreenTab(data: RenameScreenTabData): CancelablePromise<RenameScreenTabResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}',
            path: {
                screenId: data.screenId,
                tabId: data.tabId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen or screen tab is not found.'
            }
        });
    }
    
    /**
     * Move screen tab
     * Moves a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.pos The position of tab. The base index is 0.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public moveScreenTab(data: MoveScreenTabData): CancelablePromise<MoveScreenTabResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}',
            path: {
                screenId: data.screenId,
                tabId: data.tabId,
                pos: data.pos
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen or screen tab is not found or the position is invalid.'
            }
        });
    }
    
}

export class ScreenTabFieldsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all screen tab fields
     * Returns all fields for a screen tab.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.projectKey The key of the project.
     * @returns ScreenableField Returned if the request is successful.
     * @throws ApiError
     */
    public getAllScreenTabFields(data: GetAllScreenTabFieldsData): CancelablePromise<GetAllScreenTabFieldsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields',
            path: {
                screenId: data.screenId,
                tabId: data.tabId
            },
            query: {
                projectKey: data.projectKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen or screen tab is not found.'
            }
        });
    }
    
    /**
     * Add screen tab field
     * Adds a field to a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.requestBody
     * @returns ScreenableField Returned if the request is successful.
     * @throws ApiError
     */
    public addScreenTabField(data: AddScreenTabFieldData): CancelablePromise<AddScreenTabFieldResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields',
            path: {
                screenId: data.screenId,
                tabId: data.tabId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen, screen tab, or field is not found.'
            }
        });
    }
    
    /**
     * Remove screen tab field
     * Removes a field from a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.id The ID of the field.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeScreenTabField(data: RemoveScreenTabFieldData): CancelablePromise<RemoveScreenTabFieldResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}',
            path: {
                screenId: data.screenId,
                tabId: data.tabId,
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen, screen tab, or field is not found.'
            }
        });
    }
    
    /**
     * Move screen tab field
     * Moves a screen tab field.
     *
     * If `after` and `position` are provided in the request, `position` is ignored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenId The ID of the screen.
     * @param data.tabId The ID of the screen tab.
     * @param data.id The ID of the field.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public moveScreenTabField(data: MoveScreenTabFieldData): CancelablePromise<MoveScreenTabFieldResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move',
            path: {
                screenId: data.screenId,
                tabId: data.tabId,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: "Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position."
            }
        });
    }
    
}

export class ScreenSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get screen schemes
     * Returns a [paginated](#pagination) list of screen schemes.
     *
     * Only screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.id The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param data.expand Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
     * @param data.queryString String used to perform a case-insensitive partial match with screen scheme name.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `id` Sorts by screen scheme ID.
     * *  `name` Sorts by screen scheme name.
     * @returns PageBeanScreenScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getScreenSchemes(data: GetScreenSchemesData = {}): CancelablePromise<GetScreenSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/screenscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                id: data.id,
                expand: data.expand,
                queryString: data.queryString,
                orderBy: data.orderBy
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Create screen scheme
     * Creates a screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ScreenSchemeId Returned if the request is successful.
     * @throws ApiError
     */
    public createScreenScheme(data: CreateScreenSchemeData): CancelablePromise<CreateScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/screenscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if a screen used as one of the screen types in the screen scheme is not found.'
            }
        });
    }
    
    /**
     * Delete screen scheme
     * Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.
     *
     * Only screens schemes used in classic projects can be deleted.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenSchemeId The ID of the screen scheme.
     * @returns void Returned if the screen scheme is deleted.
     * @throws ApiError
     */
    public deleteScreenScheme(data: DeleteScreenSchemeData): CancelablePromise<DeleteScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/screenscheme/{screenSchemeId}',
            path: {
                screenSchemeId: data.screenSchemeId
            },
            errors: {
                400: 'Returned if the screen scheme is used in an issue type screen scheme.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the screen scheme is not found.'
            }
        });
    }
    
    /**
     * Update screen scheme
     * Updates a screen scheme. Only screen schemes used in classic projects can be updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.screenSchemeId The ID of the screen scheme.
     * @param data.requestBody The screen scheme update details.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateScreenScheme(data: UpdateScreenSchemeData): CancelablePromise<UpdateScreenSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/screenscheme/{screenSchemeId}',
            path: {
                screenSchemeId: data.screenSchemeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the screen scheme or a screen used as one of the screen types is not found.'
            }
        });
    }
    
}

export class ServerInfoService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Jira instance info
     * Returns information about the Jira instance.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns ServerInformation Returned if the request is successful.
     * @throws ApiError
     */
    public getServerInfo(): CancelablePromise<GetServerInfoResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/serverInfo',
            errors: {
                401: 'Returned if the authentication credentials are incorrect.'
            }
        });
    }
    
}

export class IssueNavigatorSettingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get issue navigator default columns
     * Returns the default issue navigator columns.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @returns ColumnItem Returned if the request is successful.
     * @throws ApiError
     */
    public getIssueNavigatorDefaultColumns(): CancelablePromise<GetIssueNavigatorDefaultColumnsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/settings/columns',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Set issue navigator default columns
     * Sets the default issue navigator columns.
     *
     * The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
     *
     * If no column details are sent, then all default columns are removed.
     *
     * A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.formData A navigable field value.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setIssueNavigatorDefaultColumns(data: SetIssueNavigatorDefaultColumnsData): CancelablePromise<SetIssueNavigatorDefaultColumnsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/settings/columns',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Returned if invalid parameters are passed.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if a navigable field value is not found.'
            }
        });
    }
    
}

export class WorkflowStatusesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all statuses
     * Returns a list of all statuses associated with active workflows.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @returns StatusDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getStatuses(): CancelablePromise<GetStatusesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/status',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get status
     * Returns a status. The status must be associated with an active workflow to be returned.
     *
     * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
     *
     * This operation can be accessed anonymously.
     *
     * [Permissions](#permissions) required: None.
     * @param data The data for the request.
     * @param data.idOrName The ID or name of the status.
     * @returns StatusDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getStatus(data: GetStatusData): CancelablePromise<GetStatusResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/status/{idOrName}',
            path: {
                idOrName: data.idOrName
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: `Returned if:

 *  the status is not found.
 *  the status is not associated with a workflow.
 *  the user does not have the required permissions.`
            }
        });
    }
    
}

export class WorkflowStatusCategoriesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all status categories
     * Returns a list of all status categories.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @returns StatusCategory Returned if the request is successful.
     * @throws ApiError
     */
    public getStatusCategories(): CancelablePromise<GetStatusCategoriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/statuscategory',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get status category
     * Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.idOrKey The ID or key of the status category.
     * @returns StatusCategory Returned if the request is successful.
     * @throws ApiError
     */
    public getStatusCategory(data: GetStatusCategoryData): CancelablePromise<GetStatusCategoryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/statuscategory/{idOrKey}',
            path: {
                idOrKey: data.idOrKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the status category is not found.'
            }
        });
    }
    
}

export class StatusService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Bulk delete Statuses
     * Deletes statuses by ID.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
     *
     * Min items `1`, Max items `50`
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteStatusesById(data: DeleteStatusesByIdData): CancelablePromise<DeleteStatusesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/statuses',
            query: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Bulk get statuses
     * Returns a list of the statuses specified by one or more status IDs.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
     *
     * Min items `1`, Max items `50`
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `usages` Returns the project and issue types that use the status in their workflow.
     * *  `workflowUsages` Returns the workflows that use the status.
     * @returns JiraStatus Returned if the request is successful.
     * @throws ApiError
     */
    public getStatusesById(data: GetStatusesByIdData): CancelablePromise<GetStatusesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/statuses',
            query: {
                expand: data.expand,
                id: data.id
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Bulk create statuses
     * Creates statuses for a global or project scope.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.requestBody Details of the statuses being created and their scope.
     * @returns JiraStatus Returned if the request is successful.
     * @throws ApiError
     */
    public createStatuses(data: CreateStatusesData): CancelablePromise<CreateStatusesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/statuses',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
                409: 'Returned if another workflow configuration update task is ongoing.'
            }
        });
    }
    
    /**
     * Bulk update statuses
     * Updates statuses by ID.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.requestBody The list of statuses that will be updated.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public updateStatuses(data: UpdateStatusesData): CancelablePromise<UpdateStatusesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/statuses',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
                409: 'Returned if another workflow configuration update task is ongoing.'
            }
        });
    }
    
    /**
     * Search statuses paginated
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `usages` Returns the project and issue types that use the status in their workflow.
     * *  `workflowUsages` Returns the workflows that use the status.
     * @param data.projectId The project the status is part of or null for global statuses.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.searchString Term to match status names against or null to search for all statuses in the search scope.
     * @param data.statusCategory Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.
     * @returns PageOfStatuses Returned if the request is successful.
     * @throws ApiError
     */
    public search(data: SearchData = {}): CancelablePromise<SearchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/statuses/search',
            query: {
                expand: data.expand,
                projectId: data.projectId,
                startAt: data.startAt,
                maxResults: data.maxResults,
                searchString: data.searchString,
                statusCategory: data.statusCategory
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
}

export class TasksService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get task
     * Returns the status of a [long-running asynchronous task](#async).
     *
     * When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     * *  `read:jira-work`
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  Creator of the task.
     * @param data The data for the request.
     * @param data.taskId The ID of the task.
     * @returns TaskProgressBeanObject Returned if the request is successful.
     * @throws ApiError
     */
    public getTask(data: GetTaskData): CancelablePromise<GetTaskResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/task/{taskId}',
            path: {
                taskId: data.taskId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the task is not found.'
            }
        });
    }
    
    /**
     * Cancel task
     * Cancels a task.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * *  Creator of the task.
     * @param data The data for the request.
     * @param data.taskId The ID of the task.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public cancelTask(data: CancelTaskData): CancelablePromise<CancelTaskResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/task/{taskId}/cancel',
            path: {
                taskId: data.taskId
            },
            errors: {
                400: 'Returned if cancellation of the task is not possible.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the task is not found.'
            }
        });
    }
    
}

export class UiModificationsAppsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get UI modifications
     * Gets UI modifications. UI modifications can only be retrieved by Forge apps.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `data` Returns UI modification data.
     * *  `contexts` Returns UI modification contexts.
     * @returns PageBeanUiModificationDetails Returned if the request is successful.
     * @throws ApiError
     */
    public getUiModifications(data: GetUiModificationsData = {}): CancelablePromise<GetUiModificationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/uiModifications',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the request is not from a Forge app.'
            }
        });
    }
    
    /**
     * Create UI modification
     * Creates a UI modification. UI modification can only be created by Forge apps.
     *
     * Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *None* if the UI modification is created without contexts.
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     * @param data The data for the request.
     * @param data.requestBody Details of the UI modification.
     * @returns UiModificationIdentifiers Returned if the UI modification is created.
     * @throws ApiError
     */
    public createUiModification(data: CreateUiModificationData): CancelablePromise<CreateUiModificationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/uiModifications',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the request is not from a Forge app.',
                404: 'Returned if a project or an issue type in the context are not found.'
            }
        });
    }
    
    /**
     * Delete UI modification
     * Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.uiModificationId The ID of the UI modification.
     * @returns unknown Returned if the UI modification is deleted.
     * @throws ApiError
     */
    public deleteUiModification(data: DeleteUiModificationData): CancelablePromise<DeleteUiModificationResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/uiModifications/{uiModificationId}',
            path: {
                uiModificationId: data.uiModificationId
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the request is not from a Forge app.',
                404: 'Returned if the UI modification is not found.'
            }
        });
    }
    
    /**
     * Update UI modification
     * Updates a UI modification. UI modification can only be updated by Forge apps.
     *
     * Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *None* if the UI modification is created without contexts.
     * *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     * @param data The data for the request.
     * @param data.uiModificationId The ID of the UI modification.
     * @param data.requestBody Details of the UI modification.
     * @returns unknown Returned if the UI modification is updated.
     * @throws ApiError
     */
    public updateUiModification(data: UpdateUiModificationData): CancelablePromise<UpdateUiModificationResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/uiModifications/{uiModificationId}',
            path: {
                uiModificationId: data.uiModificationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the request is not from a Forge app.',
                404: 'Returned if the UI modification, a project or an issue type in the context are not found.'
            }
        });
    }
    
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete user
     * Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public removeUser(data: RemoveUserData): CancelablePromise<RemoveUserResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/user',
            query: {
                accountId: data.accountId,
                username: data.username,
                key: data.key
            },
            errors: {
                400: 'Returned if the user cannot be removed.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the user is not found.'
            }
        });
    }
    
    /**
     * Get user
     * Returns a user.
     *
     * Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
     * @param data.key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
     * @param data.expand Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `groups` includes all groups and nested groups to which the user belongs.
     * *  `applicationRoles` includes details of all the applications to which the user has access.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public getUser(data: GetUserData = {}): CancelablePromise<GetUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user',
            query: {
                accountId: data.accountId,
                username: data.username,
                key: data.key,
                expand: data.expand
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the calling user does not have the *Browse users and groups* global permission.',
                404: 'Returned if the user is not found.'
            }
        });
    }
    
    /**
     * Create user
     * Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
     *
     * If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody Details about the user to be created.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public createUser(data: CreateUserData): CancelablePromise<CreateUserResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid or the number of licensed users is exceeded.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Bulk get users
     * Returns a [paginated](#pagination) list of the users specified by one or more account IDs.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.accountId The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.key This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns PageBeanUser Returned if the request is successful.
     * @throws ApiError
     */
    public bulkGetUsers(data: BulkGetUsersData): CancelablePromise<BulkGetUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/bulk',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                username: data.username,
                key: data.key,
                accountId: data.accountId
            },
            errors: {
                400: 'Returned if `accountID` is missing.',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get account IDs for users
     * Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.username Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.
     * @param data.key Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.
     * @returns UserMigrationBean Returned if the request is successful.
     * @throws ApiError
     */
    public bulkGetUsersMigration(data: BulkGetUsersMigrationData = {}): CancelablePromise<BulkGetUsersMigrationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/bulk/migration',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                username: data.username,
                key: data.key
            },
            errors: {
                400: 'Returned if `key` or `username`',
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Reset user default columns
     * Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
     * *  Permission to access Jira, to set the calling user's columns.
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public resetUserColumns(data: ResetUserColumnsData = {}): CancelablePromise<ResetUserColumnsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/user/columns',
            query: {
                accountId: data.accountId,
                username: data.username
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.'
            }
        });
    }
    
    /**
     * Get user default columns
     * Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
     * *  Permission to access Jira, to get the calling user's column details.
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.username This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns ColumnItem Returned if the request is successful.
     * @throws ApiError
     */
    public getUserDefaultColumns(data: GetUserDefaultColumnsData = {}): CancelablePromise<GetUserDefaultColumnsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/columns',
            query: {
                accountId: data.accountId,
                username: data.username
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the requested user is not found.'
            }
        });
    }
    
    /**
     * Set user default columns
     * Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
     *
     * The parameters for this resource are expressed as HTML form data. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
     * *  Permission to access Jira, to set the calling user's columns.
     * @param data The data for the request.
     * @param data.formData The ID of a column to set. To set multiple columns, send multiple `columns` parameters.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public setUserColumns(data: SetUserColumnsData): CancelablePromise<SetUserColumnsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/user/columns',
            query: {
                accountId: data.accountId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the requested user is not found.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
                500: 'Returned if an invalid issue table column ID is sent.'
            }
        });
    }
    
    /**
     * Get user email
     * Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.
     * @returns UnrestrictedUserEmail Returned if the request is successful.
     * @throws ApiError
     */
    public getUserEmail(data: GetUserEmailData): CancelablePromise<GetUserEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/email',
            query: {
                accountId: data.accountId
            },
            errors: {
                400: 'Returned if the calling app is not approved to use this API.',
                401: 'Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API).',
                404: "Returned if a user with the given `accountId` doesn't exist",
                503: 'Indicates the API is not currently enabled'
            }
        });
    }
    
    /**
     * Get user email bulk
     * Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     * @param data The data for the request.
     * @param data.accountId The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).
     * @returns UnrestrictedUserEmail Returned if the request is successful.
     * @throws ApiError
     */
    public getUserEmailBulk(data: GetUserEmailBulkData): CancelablePromise<GetUserEmailBulkResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/email/bulk',
            query: {
                accountId: data.accountId
            },
            errors: {
                400: 'Returned if the calling app is not approved to use this API.',
                401: 'Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API).',
                503: 'Indicates the API is not currently enabled.'
            }
        });
    }
    
    /**
     * Get user groups
     * Returns the groups to which a user belongs.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns GroupName Returned if the request is successful.
     * @throws ApiError
     */
    public getUserGroups(data: GetUserGroupsData): CancelablePromise<GetUserGroupsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/groups',
            query: {
                accountId: data.accountId,
                username: data.username,
                key: data.key
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the calling user does not have the *Browse users and groups* global permission.',
                404: 'Returned if the user is not found.'
            }
        });
    }
    
    /**
     * Get all users default
     * Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return.
     * @param data.maxResults The maximum number of items to return.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public getAllUsersDefault(data: GetAllUsersDefaultData = {}): CancelablePromise<GetAllUsersDefaultResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/users',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                403: "Returned if the user doesn't have the necessary permission.",
                409: 'Returned if the request takes longer than 10 seconds or is interrupted.'
            }
        });
    }
    
    /**
     * Get all users
     * Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return.
     * @param data.maxResults The maximum number of items to return.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public getAllUsers(data: GetAllUsersData = {}): CancelablePromise<GetAllUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/users/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                403: "Returned if the user doesn't have the necessary permission.",
                409: 'Returned if the request takes longer than 10 seconds or is interrupted.'
            }
        });
    }
    
}

export class UserSearchService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find users assignable to projects
     * Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     * @param data The data for the request.
     * @param data.projectKeys A list of project keys (case sensitive). This parameter accepts a comma-separated list.
     * @param data.query A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.accountId A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public findBulkAssignableUsers(data: FindBulkAssignableUsersData): CancelablePromise<FindBulkAssignableUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/assignable/multiProjectSearch',
            query: {
                query: data.query,
                username: data.username,
                accountId: data.accountId,
                projectKeys: data.projectKeys,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: `Returned if:

 *  \`projectKeys\` is missing.
 *  \`query\` or \`accountId\` is missing.
 *  \`query\` and \`accountId\` are provided.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if one or more of the projects is not found.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
    /**
     * Find users assignable to issues
     * Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
     *
     * *  a new issue, by providing the `projectKeyOrId`.
     * *  an updated issue, by providing the `issueKey`.
     * *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
     *
     * In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @param data The data for the request.
     * @param data.query A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.
     * @param data.sessionId The sessionId of this request. SessionId is the same until the assignee is set.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.accountId A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
     * @param data.project The project ID or project key (case sensitive). Required, unless `issueKey` is specified.
     * @param data.issueKey The key of the issue. Required, unless `project` is specified.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.
     * @param data.actionDescriptorId The ID of the transition.
     * @param data.recommend
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public findAssignableUsers(data: FindAssignableUsersData = {}): CancelablePromise<FindAssignableUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/assignable/search',
            query: {
                query: data.query,
                sessionId: data.sessionId,
                username: data.username,
                accountId: data.accountId,
                project: data.project,
                issueKey: data.issueKey,
                startAt: data.startAt,
                maxResults: data.maxResults,
                actionDescriptorId: data.actionDescriptorId,
                recommend: data.recommend
            },
            errors: {
                400: `Returned if:

 *  \`issueKey\` or \`project\` is missing.
 *  \`query\` or \`accountId\` is missing.
 *  \`query\` and \`accountId\` are provided.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the project, issue, or transition is not found.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
    /**
     * Find users with permissions
     * Returns a list of users who fulfill these criteria:
     *
     * *  their user attributes match a search string.
     * *  they have a set of permissions for a project or issue.
     *
     * If no search string is provided, a list of all users with the permissions is returned.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
     * *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
     * @param data The data for the request.
     * @param data.permissions A comma separated list of permissions. Permissions can be specified as any:
     *
     * *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).
     * *  custom project permission added by Connect apps.
     * *  (deprecated) one of the following:
     *
     * *  ASSIGNABLE\_USER
     * *  ASSIGN\_ISSUE
     * *  ATTACHMENT\_DELETE\_ALL
     * *  ATTACHMENT\_DELETE\_OWN
     * *  BROWSE
     * *  CLOSE\_ISSUE
     * *  COMMENT\_DELETE\_ALL
     * *  COMMENT\_DELETE\_OWN
     * *  COMMENT\_EDIT\_ALL
     * *  COMMENT\_EDIT\_OWN
     * *  COMMENT\_ISSUE
     * *  CREATE\_ATTACHMENT
     * *  CREATE\_ISSUE
     * *  DELETE\_ISSUE
     * *  EDIT\_ISSUE
     * *  LINK\_ISSUE
     * *  MANAGE\_WATCHER\_LIST
     * *  MODIFY\_REPORTER
     * *  MOVE\_ISSUE
     * *  PROJECT\_ADMIN
     * *  RESOLVE\_ISSUE
     * *  SCHEDULE\_ISSUE
     * *  SET\_ISSUE\_SECURITY
     * *  TRANSITION\_ISSUE
     * *  VIEW\_VERSION\_CONTROL
     * *  VIEW\_VOTERS\_AND\_WATCHERS
     * *  VIEW\_WORKFLOW\_READONLY
     * *  WORKLOG\_DELETE\_ALL
     * *  WORKLOG\_DELETE\_OWN
     * *  WORKLOG\_EDIT\_ALL
     * *  WORKLOG\_EDIT\_OWN
     * *  WORK\_ISSUE
     * @param data.query A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.accountId A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
     * @param data.issueKey The issue key for the issue.
     * @param data.projectKey The project key for the project (case sensitive).
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public findUsersWithAllPermissions(data: FindUsersWithAllPermissionsData): CancelablePromise<FindUsersWithAllPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/permission/search',
            query: {
                query: data.query,
                username: data.username,
                accountId: data.accountId,
                permissions: data.permissions,
                issueKey: data.issueKey,
                projectKey: data.projectKey,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: `Returned if:

 *  \`issueKey\` or \`projectKey\` is missing.
 *  \`query\` or \`accountId\` is missing.
 *  \`query\` and \`accountId\` are provided.
 *  \`permissions\` is empty or contains an invalid entry.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the issue or project is not found.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
    /**
     * Find users for picker
     * Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
     *
     * This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
     * @param data The data for the request.
     * @param data.query A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.
     * @param data.maxResults The maximum number of items to return. The total number of matched users is returned in `total`.
     * @param data.showAvatar Include the URI to the user's avatar.
     * @param data.exclude This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.excludeAccountIds A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.
     * @param data.avatarSize
     * @param data.excludeConnectUsers
     * @returns FoundUsers Returned if the request is successful.
     * @throws ApiError
     */
    public findUsersForPicker(data: FindUsersForPickerData): CancelablePromise<FindUsersForPickerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/picker',
            query: {
                query: data.query,
                maxResults: data.maxResults,
                showAvatar: data.showAvatar,
                exclude: data.exclude,
                excludeAccountIds: data.excludeAccountIds,
                avatarSize: data.avatarSize,
                excludeConnectUsers: data.excludeConnectUsers
            },
            errors: {
                400: 'Returned if `exclude` and `excludeAccountIds` are provided.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
    /**
     * Find users
     * Returns a list of active users that match the search string and property.
     *
     * This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * This operation can be accessed anonymously.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
     * @param data The data for the request.
     * @param data.query A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.
     * @param data.username
     * @param data.accountId A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.
     * @param data.startAt The index of the first item to return in a page of filtered results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.property A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public findUsers(data: FindUsersData = {}): CancelablePromise<FindUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/search',
            query: {
                query: data.query,
                username: data.username,
                accountId: data.accountId,
                startAt: data.startAt,
                maxResults: data.maxResults,
                property: data.property
            },
            errors: {
                400: `Returned if:

 *  \`accountId\`, \`query\` or \`property\` is missing.
 *  \`query\` and \`accountId\` are provided.
 *  \`property\` parameter is not valid.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
    /**
     * Find users by query
     * Finds users with a structured query and returns a [paginated](#pagination) list of user details.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * The query statements are:
     *
     * *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
     * *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
     * *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
     * *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
     * *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
     * *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
     * *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
     * *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
     *
     * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
     *
     * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
     * @param data The data for the request.
     * @param data.query The search query.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanUser Returned if the request is successful.
     * @throws ApiError
     */
    public findUsersByQuery(data: FindUsersByQueryData): CancelablePromise<FindUsersByQueryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/search/query',
            query: {
                query: data.query,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the query is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                408: 'Returned if the search is timed out.'
            }
        });
    }
    
    /**
     * Find user keys by query
     * Finds users with a structured query and returns a [paginated](#pagination) list of user keys.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * The query statements are:
     *
     * *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
     * *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
     * *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
     * *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
     * *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
     * *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
     * *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
     * *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
     *
     * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
     *
     * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
     * @param data The data for the request.
     * @param data.query The search query.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResult The maximum number of items to return per page.
     * @returns PageBeanUserKey Returned if the request is successful.
     * @throws ApiError
     */
    public findUserKeysByQuery(data: FindUserKeysByQueryData): CancelablePromise<FindUserKeysByQueryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/search/query/key',
            query: {
                query: data.query,
                startAt: data.startAt,
                maxResult: data.maxResult
            },
            errors: {
                400: 'Returned if the query is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                408: 'Returned if the search is timed out.'
            }
        });
    }
    
    /**
     * Find users with browse permission
     * Returns a list of users who fulfill these criteria:
     *
     * *  their user attributes match a search string.
     * *  they have permission to browse issues.
     *
     * Use this resource to find users who can browse:
     *
     * *  an issue, by providing the `issueKey`.
     * *  any issue in a project, by providing the `projectKey`.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
     * @param data The data for the request.
     * @param data.query A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
     * @param data.username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.accountId A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
     * @param data.issueKey The issue key for the issue. Required, unless `projectKey` is specified.
     * @param data.projectKey The project key for the project (case sensitive). Required, unless `issueKey` is specified.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns User Returned if the request is successful.
     * @throws ApiError
     */
    public findUsersWithBrowsePermission(data: FindUsersWithBrowsePermissionData = {}): CancelablePromise<FindUsersWithBrowsePermissionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/viewissue/search',
            query: {
                query: data.query,
                username: data.username,
                accountId: data.accountId,
                issueKey: data.issueKey,
                projectKey: data.projectKey,
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: `Returned if:

 *  \`issueKey\` or \`projectKey\` is missing.
 *  \`query\` or \`accountId\` is missing.
 *  \`query\` and \`accountId\` are provided.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: 'Returned if the issue or project is not found.',
                429: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."
            }
        });
    }
    
}

export class UserPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get user property keys
     * Returns the keys of all properties for a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
     * *  Access to Jira, to access the calling user's property keys.
     * @param data The data for the request.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public getUserPropertyKeys(data: GetUserPropertyKeysData = {}): CancelablePromise<GetUserPropertyKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/properties',
            query: {
                accountId: data.accountId,
                userKey: data.userKey,
                username: data.username
            },
            errors: {
                400: 'Returned if `accountId` is missing.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the user is not found.'
            }
        });
    }
    
    /**
     * Delete user property
     * Deletes a property from a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
     * *  Access to Jira, to delete a property from the calling user's record.
     * @param data The data for the request.
     * @param data.propertyKey The key of the user's property.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns void Returned if the user property is deleted.
     * @throws ApiError
     */
    public deleteUserProperty(data: DeleteUserPropertyData): CancelablePromise<DeleteUserPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/user/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            query: {
                accountId: data.accountId,
                userKey: data.userKey,
                username: data.username
            },
            errors: {
                400: 'Returned if `accountId` is missing.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the user or the property is not found.'
            }
        });
    }
    
    /**
     * Get user property
     * Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
     * *  Access to Jira, to get a property from the calling user's record.
     * @param data The data for the request.
     * @param data.propertyKey The key of the user's property.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public getUserProperty(data: GetUserPropertyData): CancelablePromise<GetUserPropertyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/user/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            query: {
                accountId: data.accountId,
                userKey: data.userKey,
                username: data.username
            },
            errors: {
                400: 'Returned if `accountId` is missing.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the user is not found.'
            }
        });
    }
    
    /**
     * Set user property
     * Sets the value of a user's property. Use this resource to store custom data against a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
     * *  Access to Jira, to set a property on the calling user's record.
     * @param data The data for the request.
     * @param data.propertyKey The key of the user's property. The maximum length is 255 characters.
     * @param data.requestBody The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @param data.accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param data.userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param data.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @returns unknown Returned if the user property is updated.
     * @throws ApiError
     */
    public setUserProperty(data: SetUserPropertyData): CancelablePromise<SetUserPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/user/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            query: {
                accountId: data.accountId,
                userKey: data.userKey,
                username: data.username
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if `accountId` is missing.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission or is not accessing their user record.',
                404: 'Returned if the user is not found.',
                405: 'Returned if the property key is not specified.'
            }
        });
    }
    
}

export class WebhooksService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete webhooks by ID
     * Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWebhookById(data: DeleteWebhookByIdData): CancelablePromise<DeleteWebhookByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the list of webhook IDs is missing.',
                403: "Returned if the caller isn't an app."
            }
        });
    }
    
    /**
     * Get dynamic webhooks for app
     * Returns a [paginated](#pagination) list of the webhooks registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanWebhook Returned if the request is successful.
     * @throws ApiError
     */
    public getDynamicWebhooksForApp(data: GetDynamicWebhooksForAppData = {}): CancelablePromise<GetDynamicWebhooksForAppResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/webhook',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                400: 'Returned if the request is invalid.',
                403: "Returned if the caller isn't an app."
            }
        });
    }
    
    /**
     * Register dynamic webhooks
     * Registers webhooks.
     *
     * **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ContainerForRegisteredWebhooks Returned if the request is successful.
     * @throws ApiError
     */
    public registerDynamicWebhooks(data: RegisterDynamicWebhooksData): CancelablePromise<RegisterDynamicWebhooksResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: "Returned if the caller isn't an app."
            }
        });
    }
    
    /**
     * Get failed webhooks
     * Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
     *
     * After 72 hours the failure may no longer be returned by this operation.
     *
     * The oldest failure is returned first.
     *
     * This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
     *
     * **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     * @param data The data for the request.
     * @param data.maxResults The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.
     * @param data.after The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.
     * @returns FailedWebhooks Returned if the request is successful.
     * @throws ApiError
     */
    public getFailedWebhooks(data: GetFailedWebhooksData = {}): CancelablePromise<GetFailedWebhooksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/webhook/failed',
            query: {
                maxResults: data.maxResults,
                after: data.after
            },
            errors: {
                400: '400 response',
                403: 'Returned if the caller is not a Connect app.'
            }
        });
    }
    
    /**
     * Extend webhook life
     * Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.
     *
     * Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WebhooksExpirationDate Returned if the request is successful.
     * @throws ApiError
     */
    public refreshWebhooks(data: RefreshWebhooksData): CancelablePromise<RefreshWebhooksResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/webhook/refresh',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: "Returned if the caller isn't an app."
            }
        });
    }
    
}

export class WorkflowsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @deprecated
     * Get all workflows
     * Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
     *
     * If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.workflowName The name of the workflow to be returned. Only one workflow can be specified.
     * @returns DeprecatedWorkflow Returned if the request is successful.
     * @throws ApiError
     */
    public getAllWorkflows(data: GetAllWorkflowsData = {}): CancelablePromise<GetAllWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflow',
            query: {
                workflowName: data.workflowName
            },
            errors: {
                401: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * @deprecated
     * Create workflow
     * Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.
     *
     * #### Conditions ####
     *
     * Conditions enable workflow rules that govern whether a transition can execute.
     *
     * ##### Always false condition #####
     *
     * A condition that always fails.
     *
     * {
     * "type": "AlwaysFalseCondition"
     * }
     *
     * ##### Block transition until approval #####
     *
     * A condition that blocks issue transition if there is a pending approval.
     *
     * {
     * "type": "BlockInProgressApprovalCondition"
     * }
     *
     * ##### Compare number custom field condition #####
     *
     * A condition that allows transition if a comparison between a number custom field and a value is true.
     *
     * {
     * "type": "CompareNumberCFCondition",
     * "configuration": {
     * "comparator": "=",
     * "fieldId": "customfield_10029",
     * "fieldValue": 2
     * }
     * }
     *
     * *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
     * *  `fieldId` The custom numeric field ID. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     * *  `com.pyxis.greenhopper.jira:jsw-story-points`
     * *  `fieldValue` The value for comparison.
     *
     * ##### Hide from user condition #####
     *
     * A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.
     *
     * {
     * "type": "RemoteOnlyCondition"
     * }
     *
     * ##### Only assignee condition #####
     *
     * A condition that allows only the assignee to execute a transition.
     *
     * {
     * "type": "AllowOnlyAssignee"
     * }
     *
     * ##### Only Bamboo notifications workflow condition (deprecated) #####
     *
     * A condition that makes the transition available only to Bamboo build notifications.
     *
     * {
     * "type": "OnlyBambooNotificationsCondition"
     * }
     *
     * ##### Only reporter condition #####
     *
     * A condition that allows only the reporter to execute a transition.
     *
     * {
     * "type": "AllowOnlyReporter"
     * }
     *
     * ##### Permission condition #####
     *
     * A condition that allows only users with a permission to execute a transition.
     *
     * {
     * "type": "PermissionCondition",
     * "configuration": {
     * "permissionKey": "BROWSE_PROJECTS"
     * }
     * }
     *
     * *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     *
     * ##### Previous status condition #####
     *
     * A condition that allows a transition based on whether an issue has or has not transitioned through a status.
     *
     * {
     * "type": "PreviousStatusCondition",
     * "configuration": {
     * "ignoreLoopTransitions": true,
     * "includeCurrentStatus": true,
     * "mostRecentStatusOnly": true,
     * "reverseCondition": true,
     * "previousStatus": {
     * "id": "5"
     * }
     * }
     * }
     *
     * By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:
     *
     * *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
     * *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
     * *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
     * *  `reverseCondition` is `true`, then the status must not be present.
     *
     * ##### Separation of duties condition #####
     *
     * A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.
     *
     * {
     * "type": "SeparationOfDutiesCondition",
     * "configuration": {
     * "fromStatus": {
     * "id": "5"
     * },
     * "toStatus": {
     * "id": "6"
     * }
     * }
     * }
     *
     * *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
     * *  `toStatus` An object containing the ID of the target status of the transition that is blocked.
     *
     * ##### Subtask blocking condition #####
     *
     * A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.
     *
     * {
     * "type": "SubTaskBlockingCondition",
     * "configuration": {
     * "statuses": [
     * {
     * "id": "1"
     * },
     * {
     * "id": "3"
     * }
     * ]
     * }
     * }
     *
     * *  `statuses` A list of objects containing status IDs.
     *
     * ##### User is in any group condition #####
     *
     * A condition that allows users belonging to any group from a list of groups to execute a transition.
     *
     * {
     * "type": "UserInAnyGroupCondition",
     * "configuration": {
     * "groups": [
     * "administrators",
     * "atlassian-addons-admin"
     * ]
     * }
     * }
     *
     * *  `groups` A list of group names.
     *
     * ##### User is in any project role condition #####
     *
     * A condition that allows only users with at least one project roles from a list of project roles to execute a transition.
     *
     * {
     * "type": "InAnyProjectRoleCondition",
     * "configuration": {
     * "projectRoles": [
     * {
     * "id": "10002"
     * },
     * {
     * "id": "10003"
     * },
     * {
     * "id": "10012"
     * },
     * {
     * "id": "10013"
     * }
     * ]
     * }
     * }
     *
     * *  `projectRoles` A list of objects containing project role IDs.
     *
     * ##### User is in custom field condition #####
     *
     * A condition that allows only users listed in a given custom field to execute the transition.
     *
     * {
     * "type": "UserIsInCustomFieldCondition",
     * "configuration": {
     * "allowUserInField": false,
     * "fieldId": "customfield_10010"
     * }
     * }
     *
     * *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
     * *  `fieldId` The ID of the field containing the list of users.
     *
     * ##### User is in group condition #####
     *
     * A condition that allows users belonging to a group to execute a transition.
     *
     * {
     * "type": "UserInGroupCondition",
     * "configuration": {
     * "group": "administrators"
     * }
     * }
     *
     * *  `group` The name of the group.
     *
     * ##### User is in group custom field condition #####
     *
     * A condition that allows users belonging to a group specified in a custom field to execute a transition.
     *
     * {
     * "type": "InGroupCFCondition",
     * "configuration": {
     * "fieldId": "customfield_10012"
     * }
     * }
     *
     * *  `fieldId` The ID of the field. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     * *  `com.pyxis.greenhopper.jira:gh-epic-status`
     *
     * ##### User is in project role condition #####
     *
     * A condition that allows users with a project role to execute a transition.
     *
     * {
     * "type": "InProjectRoleCondition",
     * "configuration": {
     * "projectRole": {
     * "id": "10002"
     * }
     * }
     * }
     *
     * *  `projectRole` An object containing the ID of a project role.
     *
     * ##### Value field condition #####
     *
     * A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.
     *
     * {
     * "type": "ValueFieldCondition",
     * "configuration": {
     * "fieldId": "assignee",
     * "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
     * "comparisonType": "NUMBER",
     * "comparator": "="
     * }
     * }
     *
     * *  `fieldId` The ID of a field used in the comparison.
     * *  `fieldValue` The expected value of the field.
     * *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
     * *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     *
     * **Notes:**
     *
     * *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
     * *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
     * *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.
     *
     * #### Validators ####
     *
     * Validators check that any input made to the transition is valid before the transition is performed.
     *
     * ##### Date field validator #####
     *
     * A validator that compares two dates.
     *
     * {
     * "type": "DateFieldValidator",
     * "configuration": {
     * "comparator": ">",
     * "date1": "updated",
     * "date2": "created",
     * "expression": "1d",
     * "includeTime": true
     * }
     * }
     *
     * *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
     * *  `date1` The date field to validate. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     * *  `duedate`
     * *  `created`
     * *  `updated`
     * *  `resolutiondate`
     * *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     * *  `duedate`
     * *  `created`
     * *  `updated`
     * *  `resolutiondate`
     * *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
     * *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.
     *
     * ##### Windows date validator #####
     *
     * A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.
     *
     * {
     * "type": "WindowsDateValidator",
     * "configuration": {
     * "date1": "customfield_10009",
     * "date2": "created",
     * "windowsDays": 5
     * }
     * }
     *
     * *  `date1` The date field to validate. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     * *  `duedate`
     * *  `created`
     * *  `updated`
     * *  `resolutiondate`
     * *  `date2` The reference date. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     * *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     * *  `duedate`
     * *  `created`
     * *  `updated`
     * *  `resolutiondate`
     * *  `windowsDays` A positive integer indicating a number of days.
     *
     * ##### Field required validator #####
     *
     * A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.
     *
     * {
     * "type": "FieldRequiredValidator",
     * "configuration": {
     * "ignoreContext": true,
     * "errorMessage": "Hey",
     * "fieldIds": [
     * "versions",
     * "customfield_10037",
     * "customfield_10003"
     * ]
     * }
     * }
     *
     * *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
     * *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
     * *  `fieldIds` The list of fields to validate.
     *
     * ##### Field changed validator #####
     *
     * A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.
     *
     * {
     * "type": "FieldChangedValidator",
     * "configuration": {
     * "fieldId": "comment",
     * "errorMessage": "Hey",
     * "exemptedGroups": [
     * "administrators",
     * "atlassian-addons-admin"
     * ]
     * }
     * }
     *
     * *  `fieldId` The ID of a field.
     * *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
     * *  `exemptedGroups` OPTIONAL. The list of groups.
     *
     * ##### Field has single value validator #####
     *
     * A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.
     *
     * {
     * "type": "FieldHasSingleValueValidator",
     * "configuration": {
     * "fieldId": "attachment,
     * "excludeSubtasks": true
     * }
     * }
     *
     * *  `fieldId` The ID of a field.
     * *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.
     *
     * ##### Parent status validator #####
     *
     * A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.
     *
     * {
     * "type": "ParentStatusValidator",
     * "configuration": {
     * "parentStatuses": [
     * {
     * "id":"1"
     * },
     * {
     * "id":"2"
     * }
     * ]
     * }
     * }
     *
     * *  `parentStatus` The list of required parent issue statuses.
     *
     * ##### Permission validator #####
     *
     * A validator that checks the user has a permission.
     *
     * {
     * "type": "PermissionValidator",
     * "configuration": {
     * "permissionKey": "ADMINISTER_PROJECTS"
     * }
     * }
     *
     * *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     *
     * ##### Previous status validator #####
     *
     * A validator that checks if the issue has held a status.
     *
     * {
     * "type": "PreviousStatusValidator",
     * "configuration": {
     * "mostRecentStatusOnly": false,
     * "previousStatus": {
     * "id": "15"
     * }
     * }
     * }
     *
     * *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
     * *  `previousStatus` An object containing the ID of an issue status.
     *
     * ##### Regular expression validator #####
     *
     * A validator that checks the content of a field against a regular expression.
     *
     * {
     * "type": "RegexpFieldValidator",
     * "configuration": {
     * "regExp": "[0-9]",
     * "fieldId": "customfield_10029"
     * }
     * }
     *
     * *  `regExp`A regular expression.
     * *  `fieldId` The ID of a field. Allowed field types:
     *
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
     * *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     * *  `com.pyxis.greenhopper.jira:jsw-story-points`
     * *  `com.pyxis.greenhopper.jira:gh-epic-status`
     * *  `description`
     * *  `summary`
     *
     * ##### User permission validator #####
     *
     * A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.
     *
     * {
     * "type": "UserPermissionValidator",
     * "configuration": {
     * "permissionKey": "BROWSE_PROJECTS",
     * "nullAllowed": false,
     * "username": "TestUser"
     * }
     * }
     *
     * *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     * *  `nullAllowed` If `true`, allows the transition when `username` is empty.
     * *  `username` The username to validate against the `permissionKey`.
     *
     * #### Post functions ####
     *
     * Post functions carry out any additional processing required after a Jira workflow transition is executed.
     *
     * ##### Fire issue event function #####
     *
     * A post function that fires an event that is processed by the listeners.
     *
     * {
     * "type": "FireIssueEventFunction",
     * "configuration": {
     * "event": {
     * "id":"1"
     * }
     * }
     * }
     *
     * **Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.
     *
     * *  `event` An object containing the ID of the issue event.
     *
     * ##### Update issue status #####
     *
     * A post function that sets issue status to the linked status of the destination workflow status.
     *
     * {
     * "type": "UpdateIssueStatusFunction"
     * }
     *
     * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
     *
     * ##### Create comment #####
     *
     * A post function that adds a comment entered during the transition to an issue.
     *
     * {
     * "type": "CreateCommentFunction"
     * }
     *
     * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
     *
     * ##### Store issue #####
     *
     * A post function that stores updates to an issue.
     *
     * {
     * "type": "IssueStoreFunction"
     * }
     *
     * **Note:** This post function can only be added to the initial transition and can only be added once.
     *
     * ##### Assign to current user function #####
     *
     * A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.
     *
     * {
     * "type": "AssignToCurrentUserFunction"
     * }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Assign to lead function #####
     *
     * A post function that assigns the issue to the project or component lead developer.
     *
     * {
     * "type": "AssignToLeadFunction"
     * }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Assign to reporter function #####
     *
     * A post function that assigns the issue to the reporter.
     *
     * {
     * "type": "AssignToReporterFunction"
     * }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Clear field value function #####
     *
     * A post function that clears the value from a field.
     *
     * {
     * "type": "ClearFieldValuePostFunction",
     * "configuration": {
     * "fieldId": "assignee"
     * }
     * }
     *
     * *  `fieldId` The ID of the field.
     *
     * ##### Copy value from other field function #####
     *
     * A post function that copies the value of one field to another, either within an issue or from parent to subtask.
     *
     * {
     * "type": "CopyValueFromOtherFieldPostFunction",
     * "configuration": {
     * "sourceFieldId": "assignee",
     * "destinationFieldId": "creator",
     * "copyType": "same"
     * }
     * }
     *
     * *  `sourceFieldId` The ID of the source field.
     * *  `destinationFieldId` The ID of the destination field.
     * *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.
     *
     * ##### Create Crucible review workflow function (deprecated) #####
     *
     * A post function that creates a Crucible review for all unreviewed code for the issue.
     *
     * {
     * "type": "CreateCrucibleReviewWorkflowFunction"
     * }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Set issue security level based on user's project role function #####
     *
     * A post function that sets the issue's security level if the current user has a project role.
     *
     * {
     * "type": "SetIssueSecurityFromRoleFunction",
     * "configuration": {
     * "projectRole": {
     * "id":"10002"
     * },
     * "issueSecurityLevel": {
     * "id":"10000"
     * }
     * }
     * }
     *
     * *  `projectRole` An object containing the ID of the project role.
     * *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.
     *
     * ##### Trigger a webhook function #####
     *
     * A post function that triggers a webhook.
     *
     * {
     * "type": "TriggerWebhookFunction",
     * "configuration": {
     * "webhook": {
     * "id": "1"
     * }
     * }
     * }
     *
     * *  `webhook` An object containing the ID of the webhook listener to trigger.
     *
     * ##### Update issue custom field function #####
     *
     * A post function that updates the content of an issue custom field.
     *
     * {
     * "type": "UpdateIssueCustomFieldPostFunction",
     * "configuration": {
     * "mode": "append",
     * "fieldId": "customfield_10003",
     * "fieldValue": "yikes"
     * }
     * }
     *
     * *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
     * *  `fieldId` The ID of the field.
     * *  `fieldValue` The update content.
     *
     * ##### Update issue field function #####
     *
     * A post function that updates a simple issue field.
     *
     * {
     * "type": "UpdateIssueFieldFunction",
     * "configuration": {
     * "fieldId": "assignee",
     * "fieldValue": "5f0c277e70b8a90025a00776"
     * }
     * }
     *
     * *  `fieldId` The ID of the field. Allowed field types:
     *
     * *  `assignee`
     * *  `description`
     * *  `environment`
     * *  `priority`
     * *  `resolution`
     * *  `summary`
     * *  `timeoriginalestimate`
     * *  `timeestimate`
     * *  `timespent`
     * *  `fieldValue` The update value.
     * *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
     *
     * *  an account ID.
     * *  `automatic`.
     * *  a blank string, which sets the value to `unassigned`.
     *
     * #### Connect rules ####
     *
     * Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.
     *
     * {
     * "type": "appKey__moduleKey",
     * "configuration": {
     * "value":"{\"isValid\":\"true\"}"
     * }
     * }
     *
     * *  `type` A Connect rule key in a form of `appKey__moduleKey`.
     * *  `value` The stringified JSON configuration of a Connect rule.
     *
     * #### Forge rules ####
     *
     * Forge transition rules are not yet supported.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody The workflow details.
     * @returns WorkflowIds Returned if the workflow is created.
     * @throws ApiError
     */
    public createWorkflow(data: CreateWorkflowData): CancelablePromise<CreateWorkflowResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflow',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if one or more statuses is not found.'
            }
        });
    }
    
    /**
     * Get workflows paginated
     * Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
     *
     * This operation does not return next-gen workflows.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.workflowName The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `transitions` For each workflow, returns information about the transitions inside the workflow.
     * *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
     * *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
     * *  `statuses` For each workflow, returns information about the statuses inside the workflow.
     * *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
     * *  `default` For each workflow, returns information about whether this is the default workflow.
     * *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
     * *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
     * *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
     * *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.
     * @param data.queryString String used to perform a case-insensitive partial match with workflow name.
     * @param data.orderBy [Order](#ordering) the results by a field:
     *
     * *  `name` Sorts by workflow name.
     * *  `created` Sorts by create time.
     * *  `updated` Sorts by update time.
     * @param data.isActive Filters active and inactive workflows.
     * @returns PageBeanWorkflow Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowsPaginated(data: GetWorkflowsPaginatedData = {}): CancelablePromise<GetWorkflowsPaginatedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflow/search',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                workflowName: data.workflowName,
                expand: data.expand,
                queryString: data.queryString,
                orderBy: data.orderBy,
                isActive: data.isActive
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Delete inactive workflow
     * Deletes a workflow.
     *
     * The workflow cannot be deleted if it is:
     *
     * *  an active workflow.
     * *  a system workflow.
     * *  associated with any workflow scheme.
     * *  associated with any draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.entityId The entity ID of the workflow.
     * @returns void Returned if the workflow is deleted.
     * @throws ApiError
     */
    public deleteInactiveWorkflow(data: DeleteInactiveWorkflowData): CancelablePromise<DeleteInactiveWorkflowResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflow/{entityId}',
            path: {
                entityId: data.entityId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the workflow is not found.'
            }
        });
    }
    
    /**
     * Bulk get workflows
     * Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* global permission to access all, including project-scoped, workflows
     * *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
     * *  `statuses.usages` Returns the project and issue types that each status is associated with.
     * @returns WorkflowReadResponse Returned if the request is successful.
     * @throws ApiError
     */
    public readWorkflows(data: ReadWorkflowsData): CancelablePromise<ReadWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflows',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Get available workflow capabilities
     * Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to access all, including global-scoped, workflows
     * *  *Administer projects* project permissions to access project-scoped workflows
     *
     * The current list of Atlassian-provided rules:
     *
     * #### Validators ####
     *
     * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
     *
     * ##### Permission validator #####
     *
     * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
     *
     * {
     * "ruleKey": "system:check-permission-validator",
     * "parameters": {
     * "permissionKey": "ADMINISTER_PROJECTS"
     * }
     * }
     *
     * Parameters:
     *
     * *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
     *
     * ##### Parent or child blocking validator #####
     *
     * A validator to block the child issue\’s transition depending on the parent issue\’s status.
     *
     * {
     * "ruleKey" : "system:parent-or-child-blocking-validator"
     * "parameters" : {
     * "blocker" : "PARENT"
     * "statusIds" : "1,2,3"
     * }
     * }
     *
     * Parameters:
     *
     * *  `blocker` currently only supports `PARENT`.
     * *  `statusIds` a comma-separated list of status IDs.
     *
     * ##### Previous status validator #####
     *
     * A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.
     *
     * {
     * "ruleKey": "system:previous-status-validator",
     * "parameters": {
     * "previousStatusIds": "10014",
     * "mostRecentStatusOnly": "true"
     * }
     * }
     *
     * Parameters:
     *
     * *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
     * *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
     *
     * ##### Validate a field value #####
     *
     * A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.
     *
     * Depending on the rule type, the result will vary:
     *
     * ###### Field required ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "fieldRequired",
     * "fieldsRequired": "assignee",
     * "ignoreContext": "true",
     * "errorMessage": "An assignee must be set!"
     * }
     * }
     *
     * Parameters:
     *
     * *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
     * *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
     * *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
     *
     * ###### Field changed ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "fieldChanged",
     * "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
     * "fieldKey": "versions",
     * "errorMessage": "Affect versions must be modified before transition"
     * }
     * }
     *
     * Parameters:
     *
     * *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
     * *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
     * *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
     *
     * ###### Field has a single value ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "fieldHasSingleValue",
     * "fieldKey": "created",
     * "excludeSubtasks": "true"
     * }
     * }
     *
     * Parameters:
     *
     * *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
     * *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.
     *
     * ###### Field matches regular expression ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "fieldMatchesRegularExpression",
     * "regexp": "[0-9]{4}",
     * "fieldKey": "description"
     * }
     * }
     *
     * Parameters:
     *
     * *  `regexp` the regular expression used to validate the field\’s content.
     * *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
     *
     * ###### Date field comparison ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "dateFieldComparison",
     * "date1FieldKey": "duedate",
     * "date2FieldKey": "customfield_10054",
     * "includeTime": "true",
     * "conditionSelected": ">="
     * }
     * }
     *
     * Parameters:
     *
     * *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
     * *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
     * *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
     * *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     *
     * ###### Date range comparison ######
     *
     * {
     * "ruleKey": "system:validate-field-value",
     * "parameters": {
     * "ruleType": "windowDateComparison",
     * "date1FieldKey": "customfield_10009",
     * "date2FieldKey": "customfield_10054",
     * "numberOfDays": "3"
     * }
     * }
     *
     * Parameters:
     *
     * *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
     * *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
     * *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.
     *
     * This rule is composed by aggregating the following legacy rules:
     *
     * *  FieldRequiredValidator
     * *  FieldChangedValidator
     * *  FieldHasSingleValueValidator
     * *  RegexpFieldValidator
     * *  DateFieldValidator
     * *  WindowsDateValidator
     *
     * ##### Proforma: Forms attached validator #####
     *
     * Validates that one or more forms are attached to the issue.
     *
     * {
     * "ruleKey" : "system:proforma-forms-attached"
     * "parameters" : {}
     * }
     *
     * ##### Proforma: Forms submitted validator #####
     *
     * Validates that all forms attached to the issue have been submitted.
     *
     * {
     * "ruleKey" : "system:proforma-forms-submitted"
     * "parameters" : {}
     * }
     *
     * #### Conditions ####
     *
     * Conditions enable workflow rules that govern whether a transition can execute.
     *
     * ##### Check field value #####
     *
     * A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.
     *
     * {
     * "ruleKey": "system:check-field-value",
     * "parameters": {
     * "fieldId": "description",
     * "fieldValue": "[\"Done\"]",
     * "comparator": "=",
     * "comparisonType": "STRING"
     * }
     * }
     *
     * Parameters:
     *
     * *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
     * *  `fieldValue` the list of values to check against the field\’s value.
     * *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     * *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.
     *
     * ##### Restrict issue transition #####
     *
     * This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.
     *
     * {
     * "ruleKey": "system:restrict-issue-transition",
     * "parameters": {
     * "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
     * "roleIds": "10002,10004",
     * "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
     * "permissionKeys": "ADMINISTER_PROJECTS",
     * "groupCustomFields": "customfield_10028",
     * "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
     * "denyUserCustomFields": "customfield_10107"
     * }
     * }
     *
     * Parameters:
     *
     * *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
     * *  `roleIds` a comma-separated list of role IDs.
     * *  `groupIds` a comma-separated list of group IDs.
     * *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
     * *  `groupCustomFields` a comma-separated list of group custom field IDs.
     * *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
     * *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.
     *
     * This rule is composed by aggregating the following legacy rules:
     *
     * *  AllowOnlyAssignee
     * *  AllowOnlyReporter
     * *  InAnyProjectRoleCondition
     * *  InProjectRoleCondition
     * *  UserInAnyGroupCondition
     * *  UserInGroupCondition
     * *  PermissionCondtion
     * *  InGroupCFCondition
     * *  UserIsInCustomFieldCondition
     *
     * ##### Previous status condition #####
     *
     * A condition that evaluates based on an issue's previous status(es) and specific criteria.
     *
     * {
     * "ruleKey" : "system:previous-status-condition"
     * "parameters" : {
     * "previousStatusIds" : "10004",
     * "not": "true",
     * "mostRecentStatusOnly" : "true",
     * "includeCurrentStatus": "true",
     * "ignoreLoopTransitions": "true"
     * }
     * }
     *
     * Parameters:
     *
     * *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
     * *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
     * *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
     * *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
     * *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.
     *
     * ##### Parent or child blocking condition #####
     *
     * A condition to block the parent\’s issue transition depending on the child\’s issue status.
     *
     * {
     * "ruleKey" : "system:parent-or-child-blocking-condition"
     * "parameters" : {
     * "blocker" : "CHILD",
     * "statusIds" : "1,2,3"
     * }
     * }
     *
     * Parameters:
     *
     * *  `blocker` currently only supports `CHILD`.
     * *  `statusIds` a comma-separated list of status IDs.
     *
     * ##### Separation of duties #####
     *
     * A condition preventing the user from performing, if the user has already performed a transition on the issue.
     *
     * {
     * "ruleKey": "system:separation-of-duties",
     * "parameters": {
     * "fromStatusId": "10161",
     * "toStatusId": "10160"
     * }
     * }
     *
     * Parameters:
     *
     * *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
     * *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.
     *
     * ##### Restrict transitions #####
     *
     * A condition preventing all users from transitioning the issue can also optionally include APIs as well.
     *
     * {
     * "ruleKey": "system:restrict-from-all-users",
     * "parameters": {
     * "restrictMode": "users"
     * }
     * }
     *
     * Parameters:
     *
     * *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.
     *
     * ##### Jira Service Management block until approved #####
     *
     * Block an issue transition until approval. Note: This is only supported in team-managed projects.
     *
     * {
     * "ruleKey": "system:jsd-approvals-block-until-approved",
     * "parameters": {
     * "approvalConfigurationJson": "{"statusExternalUuid...}"
     * }
     * }
     *
     * Parameters:
     *
     * *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
     *
     * ##### Jira Service Management block until rejected #####
     *
     * Block an issue transition until rejected. Note: This is only supported in team-managed projects.
     *
     * {
     * "ruleKey": "system:jsd-approvals-block-until-rejected",
     * "parameters": {
     * "approvalConfigurationJson": "{"statusExternalUuid...}"
     * }
     * }
     *
     * Parameters:
     *
     * *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
     *
     * ##### Block in progress approval #####
     *
     * Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.
     *
     * {
     * "ruleKey": "system:block-in-progress-approval",
     * "parameters": {}
     * }
     *
     * #### Post functions ####
     *
     * Post functions carry out any additional processing required after a workflow transition is executed.
     *
     * ##### Change assignee #####
     *
     * A post function rule that changes the assignee of an issue after a transition.
     *
     * {
     * "ruleKey": "system:change-assignee",
     * "parameters": {
     * "type": "to-selected-user",
     * "accountId": "example-account-id"
     * }
     * }
     *
     * Parameters:
     *
     * *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
     * *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.
     *
     * ##### Copy field value #####
     *
     * A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.
     *
     * {
     * "ruleKey": "system:copy-value-from-other-field",
     * "parameters": {
     * "sourceFieldKey": "description",
     * "targetFieldKey": "components",
     * "issueSource": "SAME"
     * }
     * }
     *
     * Parameters:
     *
     * *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
     * *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
     * *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.
     *
     * ##### Update field #####
     *
     * A post function that updates or appends a specific field with the given value.
     *
     * {
     * "ruleKey": "system:update-field",
     * "parameters": {
     * "field": "customfield_10056",
     * "value": "asdf",
     * "mode": "append"
     * }
     * }
     *
     * Parameters:
     *
     * *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
     * *  `value` the value to update the field with.
     * *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.
     *
     * ##### Trigger webhook #####
     *
     * A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.
     *
     * {
     * "ruleKey": "system:trigger-webhook",
     * "parameters": {
     * "webhookId": "1"
     * }
     * }
     *
     * Parameters:
     *
     * *  `webhookId` the ID of the webhook.
     *
     * #### Screen ####
     *
     * ##### Remind people to update fields #####
     *
     * A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.
     *
     * {
     * "ruleKey": "system:remind-people-to-update-fields",
     * "params": {
     * "remindingFieldIds": "assignee,customfield_10025",
     * "remindingMessage": "The message",
     * "remindingAlwaysAsk": "true"
     * }
     * }
     *
     * Parameters:
     *
     * *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
     * *  `remindingMessage` the message to display when prompting the users to update the fields.
     * *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.
     *
     * ##### Shared transition screen #####
     *
     * A common screen that is shared between transitions in a workflow.
     *
     * {
     * "ruleKey": "system:transition-screen",
     * "params": {
     * "screenId": "3"
     * }
     * }
     *
     * Parameters:
     *
     * *  `screenId` the ID of the screen.
     *
     * #### Connect & Forge ####
     *
     * ##### Connect rules #####
     *
     * Validator/Condition/Post function for Connect app.
     *
     * {
     * "ruleKey": "connect:expression-validator",
     * "parameters": {
     * "appKey": "com.atlassian.app",
     * "config": "",
     * "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
     * "disabled": "false",
     * "tag": ""
     * }
     * }
     *
     * Parameters:
     *
     * *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
     * *  `appKey` the reference to the Connect app
     * *  `config` a JSON payload string describing the configuration
     * *  `id` the ID of the rule
     * *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
     * *  `tag` additional tags for the Connect app
     *
     * ##### Forge rules #####
     *
     * Validator/Condition/Post function for Forge app.
     *
     * {
     * "ruleKey": "forge:expression-validator",
     * "parameters": {
     * "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
     * "config": "{"searchString":"workflow validator"}",
     * "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
     * }
     * }
     *
     * Parameters:
     *
     * *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
     * *  `key` the identifier for the Forge app
     * *  `config` the persistent stringified JSON configuration for the Forge rule
     * *  `id` the ID of the Forge rule
     * @param data The data for the request.
     * @param data.workflowId
     * @param data.projectId
     * @param data.issueTypeId
     * @returns WorkflowCapabilities Returned if the request is successful.
     * @throws ApiError
     */
    public workflowCapabilities(data: WorkflowCapabilitiesData = {}): CancelablePromise<WorkflowCapabilitiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflows/capabilities',
            query: {
                workflowId: data.workflowId,
                projectId: data.projectId,
                issueTypeId: data.issueTypeId
            },
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Bulk create workflows
     * Create workflows and related statuses.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to create all, including global-scoped, workflows
     * *  *Administer projects* project permissions to create project-scoped workflows
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowCreateResponse Returned if the request is successful.
     * @throws ApiError
     */
    public createWorkflows(data: CreateWorkflowsData): CancelablePromise<CreateWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflows/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Validate create workflows
     * Validate the payload for bulk create workflows.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to create all, including global-scoped, workflows
     * *  *Administer projects* project permissions to create project-scoped workflows
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowValidationErrorList Returned if the request is successful.
     * @throws ApiError
     */
    public validateCreateWorkflows(data: ValidateCreateWorkflowsData): CancelablePromise<ValidateCreateWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflows/create/validation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Bulk update workflows
     * Update workflows and related statuses.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to create all, including global-scoped, workflows
     * *  *Administer projects* project permissions to create project-scoped workflows
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
     * *  `statuses.usages` Returns the project and issue types that each status is associated with.
     * @returns WorkflowUpdateResponse Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflows(data: UpdateWorkflowsData): CancelablePromise<UpdateWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflows/update',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Validate update workflows
     * Validate the payload for bulk update workflows.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to create all, including global-scoped, workflows
     * *  *Administer projects* project permissions to create project-scoped workflows
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowValidationErrorList Returned if the request is successful.
     * @throws ApiError
     */
    public validateUpdateWorkflows(data: ValidateUpdateWorkflowsData): CancelablePromise<ValidateUpdateWorkflowsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflows/update/validation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
}

export class WorkflowTransitionRulesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get workflow transition rule configurations
     * Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
     *
     * *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
     * *  matching one or more transition rule keys.
     *
     * Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.
     *
     * Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.types The types of the transition rules to return.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @param data.keys The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.
     * @param data.workflowNames The list of workflow names to filter by.
     * @param data.withTags The list of `tags` to filter by.
     * @param data.draft Whether draft or published workflows are returned. If not provided, both workflow types are returned.
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.
     * @returns PageBeanWorkflowTransitionRules Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowTransitionRuleConfigurations(data: GetWorkflowTransitionRuleConfigurationsData): CancelablePromise<GetWorkflowTransitionRuleConfigurationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflow/rule/config',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults,
                types: data.types,
                keys: data.keys,
                workflowNames: data.workflowNames,
                withTags: data.withTags,
                draft: data.draft,
                expand: data.expand
            },
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the caller is not a Connect or Forge app.',
                404: 'Returned if any transition rule type is not supported.',
                503: 'Returned if we encounter a problem while trying to access the required data.'
            }
        });
    }
    
    /**
     * Update workflow transition rule configurations
     * Updates configuration of workflow transition rules. The following rule types are supported:
     *
     * *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
     * *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
     * *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
     *
     * Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.
     *
     * To assist with app migration, this operation can be used to:
     *
     * *  Disable a rule.
     * *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
     *
     * Rules are enabled if the `disabled` parameter is not provided.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowTransitionRulesUpdateErrors Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflowTransitionRuleConfigurations(data: UpdateWorkflowTransitionRuleConfigurationsData): CancelablePromise<UpdateWorkflowTransitionRuleConfigurationsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflow/rule/config',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the caller is not a Connect or Forge app.',
                503: 'Returned if we encounter a problem while trying to access the required data.'
            }
        });
    }
    
    /**
     * Delete workflow transition rule configurations
     * Deletes workflow transition rules from one or more workflows. These rule types are supported:
     *
     * *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
     * *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
     * *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
     *
     * Only rules created by the calling Connect app can be deleted.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can use this operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowTransitionRulesUpdateErrors Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowTransitionRuleConfigurations(data: DeleteWorkflowTransitionRuleConfigurationsData): CancelablePromise<DeleteWorkflowTransitionRuleConfigurationsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflow/rule/config/delete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: 'Returned if the caller is not a Connect app.'
            }
        });
    }
    
}

export class WorkflowTransitionPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Delete workflow transition property
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param data.key The name of the transition property to delete, also known as the name of the property.
     * @param data.workflowName The name of the workflow that the transition belongs to.
     * @param data.workflowMode The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
     * @returns unknown 200 response
     * @throws ApiError
     */
    public deleteWorkflowTransitionProperty(data: DeleteWorkflowTransitionPropertyData): CancelablePromise<DeleteWorkflowTransitionPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflow/transitions/{transitionId}/properties',
            path: {
                transitionId: data.transitionId
            },
            query: {
                key: data.key,
                workflowName: data.workflowName,
                workflowMode: data.workflowMode
            },
            errors: {
                304: 'Returned if no changes were made by the request. For example, trying to delete a property that cannot be found.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow transition is not found.'
            }
        });
    }
    
    /**
     * Get workflow transition properties
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
     * @param data.workflowName The name of the workflow that the transition belongs to.
     * @param data.includeReservedKeys Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
     * @param data.key The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
     * @param data.workflowMode The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
     * @returns WorkflowTransitionProperty 200 response
     * @throws ApiError
     */
    public getWorkflowTransitionProperties(data: GetWorkflowTransitionPropertiesData): CancelablePromise<GetWorkflowTransitionPropertiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflow/transitions/{transitionId}/properties',
            path: {
                transitionId: data.transitionId
            },
            query: {
                includeReservedKeys: data.includeReservedKeys,
                key: data.key,
                workflowName: data.workflowName,
                workflowMode: data.workflowMode
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have admin permission',
                404: 'Returned if the workflow transition or property is not found.'
            }
        });
    }
    
    /**
     * Create workflow transition property
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param data.key The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
     * @param data.workflowName The name of the workflow that the transition belongs to.
     * @param data.requestBody
     * @param data.workflowMode The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
     * @returns WorkflowTransitionProperty 200 response
     * @throws ApiError
     */
    public createWorkflowTransitionProperty(data: CreateWorkflowTransitionPropertyData): CancelablePromise<CreateWorkflowTransitionPropertyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflow/transitions/{transitionId}/properties',
            path: {
                transitionId: data.transitionId
            },
            query: {
                key: data.key,
                workflowName: data.workflowName,
                workflowMode: data.workflowMode
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if a workflow property with the same key is present on the transition.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow transition is not found.'
            }
        });
    }
    
    /**
     * Update workflow transition property
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param data.key The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
     * @param data.workflowName The name of the workflow that the transition belongs to.
     * @param data.requestBody
     * @param data.workflowMode The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
     * @returns WorkflowTransitionProperty 200 response
     * @throws ApiError
     */
    public updateWorkflowTransitionProperty(data: UpdateWorkflowTransitionPropertyData): CancelablePromise<UpdateWorkflowTransitionPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflow/transitions/{transitionId}/properties',
            path: {
                transitionId: data.transitionId
            },
            query: {
                key: data.key,
                workflowName: data.workflowName,
                workflowMode: data.workflowMode
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                304: 'Returned if no changes were made by the request. For example, attempting to update a property with its current value.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow transition is not found.'
            }
        });
    }
    
}

export class WorkflowSchemesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all workflow schemes
     * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.startAt The index of the first item to return in a page of results (page offset).
     * @param data.maxResults The maximum number of items to return per page.
     * @returns PageBeanWorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getAllWorkflowSchemes(data: GetAllWorkflowSchemesData = {}): CancelablePromise<GetAllWorkflowSchemesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme',
            query: {
                startAt: data.startAt,
                maxResults: data.maxResults
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Create workflow scheme
     * Creates a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public createWorkflowScheme(data: CreateWorkflowSchemeData): CancelablePromise<CreateWorkflowSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Bulk get workflow schemes
     * Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
     * *  *Administer projects* project permissions to access project-scoped workflow schemes
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
     *
     * *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.
     * @returns WorkflowSchemeReadResponse Returned if the request is successful.
     * @throws ApiError
     */
    public readWorkflowSchemes(data: ReadWorkflowSchemesData): CancelablePromise<ReadWorkflowSchemesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme/read',
            query: {
                expand: data.expand
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Update workflow scheme
     * Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
     * *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful and there is no asynchronous task.
     * @throws ApiError
     */
    public updateSchemes(data: UpdateSchemesData): CancelablePromise<UpdateSchemesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme/update',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the request is successful and there is an asynchronous task for the migrations.',
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Get required status mappings for workflow scheme update
     * Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.
     *
     * **[Permissions](#permissions) required:**
     *
     * *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
     * *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WorkflowSchemeUpdateRequiredMappingsResponse Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflowSchemeMappings(data: UpdateWorkflowSchemeMappingsData): CancelablePromise<UpdateWorkflowSchemeMappingsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme/update/mappings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation."
            }
        });
    }
    
    /**
     * Delete workflow scheme
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowScheme(data: DeleteWorkflowSchemeData): CancelablePromise<DeleteWorkflowSchemeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the scheme is active.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Get workflow scheme
     * Returns a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @param data.returnDraftIfExists Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowScheme(data: GetWorkflowSchemeData): CancelablePromise<GetWorkflowSchemeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}',
            path: {
                id: data.id
            },
            query: {
                returnDraftIfExists: data.returnDraftIfExists
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Classic update workflow scheme
     * Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @param data.requestBody
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflowScheme(data: UpdateWorkflowSchemeData): CancelablePromise<UpdateWorkflowSchemeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Delete default workflow
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public deleteDefaultWorkflow(data: DeleteDefaultWorkflowData): CancelablePromise<DeleteDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/default',
            path: {
                id: data.id
            },
            query: {
                updateDraftIfNeeded: data.updateDraftIfNeeded
            },
            errors: {
                400: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Get default workflow
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.returnDraftIfExists Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
     * @returns DefaultWorkflow Returned if the request is successful.
     * @throws ApiError
     */
    public getDefaultWorkflow(data: GetDefaultWorkflowData): CancelablePromise<GetDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/default',
            path: {
                id: data.id
            },
            query: {
                returnDraftIfExists: data.returnDraftIfExists
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Update default workflow
     * Sets the default workflow for a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.requestBody The new default workflow.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateDefaultWorkflow(data: UpdateDefaultWorkflowData): CancelablePromise<UpdateDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/default',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme is not found.'
            }
        });
    }
    
    /**
     * Delete workflow for issue type in workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.issueType The ID of the issue type.
     * @param data.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowSchemeIssueType(data: DeleteWorkflowSchemeIssueTypeData): CancelablePromise<DeleteWorkflowSchemeIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            query: {
                updateDraftIfNeeded: data.updateDraftIfNeeded
            },
            errors: {
                400: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Get workflow for issue type in workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.issueType The ID of the issue type.
     * @param data.returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @returns IssueTypeWorkflowMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowSchemeIssueType(data: GetWorkflowSchemeIssueTypeData): CancelablePromise<GetWorkflowSchemeIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            query: {
                returnDraftIfExists: data.returnDraftIfExists
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Set workflow for issue type in workflow scheme
     * Sets the workflow for an issue type in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.issueType The ID of the issue type.
     * @param data.requestBody The issue type-project mapping.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public setWorkflowSchemeIssueType(data: SetWorkflowSchemeIssueTypeData): CancelablePromise<SetWorkflowSchemeIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Delete issue types for workflow in workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.workflowName The name of the workflow.
     * @param data.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowMapping(data: DeleteWorkflowMappingData): CancelablePromise<DeleteWorkflowMappingResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName,
                updateDraftIfNeeded: data.updateDraftIfNeeded
            },
            errors: {
                400: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow is not found.
 *  The workflow is not specified.`
            }
        });
    }
    
    /**
     * Get issue types for workflows in workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param data.returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @returns IssueTypesWorkflowMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflow(data: GetWorkflowData): CancelablePromise<GetWorkflowResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName,
                returnDraftIfExists: data.returnDraftIfExists
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if either the workflow scheme or workflow is not found.'
            }
        });
    }
    
    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme.
     * @param data.workflowName The name of the workflow.
     * @param data.requestBody
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflowMapping(data: UpdateWorkflowMappingData): CancelablePromise<UpdateWorkflowMappingResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow is not found.
 *  The workflow is not specified.`
            }
        });
    }
    
}

export class WorkflowSchemeProjectAssociationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get workflow scheme project associations
     * Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.
     *
     * If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.projectId The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.
     * @returns ContainerOfWorkflowSchemeAssociations Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowSchemeProjectAssociations(data: GetWorkflowSchemeProjectAssociationsData): CancelablePromise<GetWorkflowSchemeProjectAssociationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/project',
            query: {
                projectId: data.projectId
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Assign workflow scheme to project
     * Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.
     *
     * Workflow schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public assignSchemeToProject(data: AssignSchemeToProjectData): CancelablePromise<AssignSchemeToProjectResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/project',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the required permissions.',
                404: 'Returned if the workflow scheme or the project are not found.'
            }
        });
    }
    
}

export class WorkflowSchemeDraftsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create draft workflow scheme
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the active workflow scheme that the draft is created from.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public createWorkflowSchemeDraftFromParent(data: CreateWorkflowSchemeDraftFromParentData): CancelablePromise<CreateWorkflowSchemeDraftFromParentResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme/{id}/createdraft',
            path: {
                id: data.id
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.'
            }
        });
    }
    
    /**
     * Delete draft workflow scheme
     * Deletes a draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the active workflow scheme that the draft was created from.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowSchemeDraft(data: DeleteWorkflowSchemeDraftData): CancelablePromise<DeleteWorkflowSchemeDraftResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/draft',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission..',
                404: `Returned if:

 *  the original active workflow scheme is not found.
 *  the original active workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Get draft workflow scheme
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.
     * Note that:
     *
     * *  Only active workflow schemes can have draft workflow schemes.
     * *  An active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the active workflow scheme that the draft was created from.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowSchemeDraft(data: GetWorkflowSchemeDraftData): CancelablePromise<GetWorkflowSchemeDraftResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/draft',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if:

 *  the original active workflow scheme is not found.
 *  the original active workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Update draft workflow scheme
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the active workflow scheme that the draft was created from.
     * @param data.requestBody
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateWorkflowSchemeDraft(data: UpdateWorkflowSchemeDraftData): CancelablePromise<UpdateWorkflowSchemeDraftResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/draft',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if:

 *  the original active workflow scheme is not found.
 *  the original active workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Delete draft default workflow
     * Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public deleteDraftDefaultWorkflow(data: DeleteDraftDefaultWorkflowData): CancelablePromise<DeleteDraftDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/draft/default',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Get draft default workflow
     * Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @returns DefaultWorkflow Returned if the request is successful.
     * @throws ApiError
     */
    public getDraftDefaultWorkflow(data: GetDraftDefaultWorkflowData): CancelablePromise<GetDraftDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/draft/default',
            path: {
                id: data.id
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission..',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Update draft default workflow
     * Sets the default workflow for a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.requestBody The object for the new default workflow.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateDraftDefaultWorkflow(data: UpdateDraftDefaultWorkflowData): CancelablePromise<UpdateDraftDefaultWorkflowResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/draft/default',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.`
            }
        });
    }
    
    /**
     * Delete workflow for issue type in draft workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.issueType The ID of the issue type.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public deleteWorkflowSchemeDraftIssueType(data: DeleteWorkflowSchemeDraftIssueTypeData): CancelablePromise<DeleteWorkflowSchemeDraftIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Get workflow for issue type in draft workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.issueType The ID of the issue type.
     * @returns IssueTypeWorkflowMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getWorkflowSchemeDraftIssueType(data: GetWorkflowSchemeDraftIssueTypeData): CancelablePromise<GetWorkflowSchemeDraftIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Set workflow for issue type in draft workflow scheme
     * Sets the workflow for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.issueType The ID of the issue type.
     * @param data.requestBody The issue type-project mapping.
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public setWorkflowSchemeDraftIssueType(data: SetWorkflowSchemeDraftIssueTypeData): CancelablePromise<SetWorkflowSchemeDraftIssueTypeResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
            path: {
                id: data.id,
                issueType: data.issueType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if the workflow scheme or issue type is not found.'
            }
        });
    }
    
    /**
     * Publish draft workflow scheme
     * Publishes a draft workflow scheme.
     *
     * Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.requestBody Details of the status mappings.
     * @param data.validateOnly Whether the request only performs a validation.
     * @returns void Returned if the request is only for validation and is successful.
     * @throws ApiError
     */
    public publishDraftWorkflowScheme(data: PublishDraftWorkflowSchemeData): CancelablePromise<PublishDraftWorkflowSchemeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/api/3/workflowscheme/{id}/draft/publish',
            path: {
                id: data.id
            },
            query: {
                validateOnly: data.validateOnly
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                303: 'Returned if the request is successful.',
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of these are true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.
 *  A new status in the draft workflow scheme is not found.`
            }
        });
    }
    
    /**
     * Delete issue types for workflow in draft workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.workflowName The name of the workflow.
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public deleteDraftWorkflowMapping(data: DeleteDraftWorkflowMappingData): CancelablePromise<DeleteDraftWorkflowMappingResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/api/3/workflowscheme/{id}/draft/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.
 *  The workflow is not found.
 *  The workflow is not specified.`
            }
        });
    }
    
    /**
     * Get issue types for workflows in draft workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @returns IssueTypesWorkflowMapping Returned if the request is successful.
     * @throws ApiError
     */
    public getDraftWorkflow(data: GetDraftWorkflowData): CancelablePromise<GetDraftWorkflowResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/api/3/workflowscheme/{id}/draft/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: 'Returned if either the workflow scheme or workflow (if specified) is not found. session.'
            }
        });
    }
    
    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param data The data for the request.
     * @param data.id The ID of the workflow scheme that the draft belongs to.
     * @param data.workflowName The name of the workflow.
     * @param data.requestBody
     * @returns WorkflowScheme Returned if the request is successful.
     * @throws ApiError
     */
    public updateDraftWorkflowMapping(data: UpdateDraftWorkflowMappingData): CancelablePromise<UpdateDraftWorkflowMappingResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/api/3/workflowscheme/{id}/draft/workflow',
            path: {
                id: data.id
            },
            query: {
                workflowName: data.workflowName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: 'Returned if the user does not have the necessary permission.',
                404: `Returned if any of the following is true:

 *  The workflow scheme is not found.
 *  The workflow scheme does not have a draft.
 *  The workflow is not found.
 *  The workflow is not specified.`
            }
        });
    }
    
}

export class AppPropertiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get app properties
     * Gets all the properties of an app.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * @param data The data for the request.
     * @param data.addonKey The key of the app, as defined in its descriptor.
     * @returns PropertyKeys Returned if the request is successful.
     * @throws ApiError
     */
    public addonPropertiesResourceGetAddonPropertiesGet(data: AddonPropertiesResourceGetAddonPropertiesGetData): CancelablePromise<AddonPropertiesResourceGetAddonPropertiesGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/atlassian-connect/1/addons/{addonKey}/properties',
            path: {
                addonKey: data.addonKey
            },
            errors: {
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Delete app property
     * Deletes an app's property.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * @param data The data for the request.
     * @param data.addonKey The key of the app, as defined in its descriptor.
     * @param data.propertyKey The key of the property.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public addonPropertiesResourceDeleteAddonPropertyDelete(data: AddonPropertiesResourceDeleteAddonPropertyDeleteData): CancelablePromise<AddonPropertiesResourceDeleteAddonPropertyDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
            path: {
                addonKey: data.addonKey,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the property key is longer than 127 characters.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: "Returned if the property is not found or doesn't belong to the app."
            }
        });
    }
    
    /**
     * Get app property
     * Returns the key and value of an app's property.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * @param data The data for the request.
     * @param data.addonKey The key of the app, as defined in its descriptor.
     * @param data.propertyKey The key of the property.
     * @returns EntityProperty Returned if the request is successful.
     * @throws ApiError
     */
    public addonPropertiesResourceGetAddonPropertyGet(data: AddonPropertiesResourceGetAddonPropertyGetData): CancelablePromise<AddonPropertiesResourceGetAddonPropertyGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
            path: {
                addonKey: data.addonKey,
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the property key is longer than 127 characters.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                404: "Returned if the property is not found or doesn't belong to the app."
            }
        });
    }
    
    /**
     * Set app property
     * Sets the value of an app's property. Use this resource to store custom data for your app.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * @param data The data for the request.
     * @param data.addonKey The key of the app, as defined in its descriptor.
     * @param data.propertyKey The key of the property.
     * @param data.requestBody
     * @returns OperationMessage Returned if the property is updated.
     * @throws ApiError
     */
    public addonPropertiesResourcePutAddonPropertyPut(data: AddonPropertiesResourcePutAddonPropertyPutData): CancelablePromise<AddonPropertiesResourcePutAddonPropertyPutResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
            path: {
                addonKey: data.addonKey,
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:
  * the property key is longer than 127 characters.
  * the value is not valid JSON.
  * the value is longer than 32768 characters.`,
                401: 'Returned if the authentication credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Delete app property (Forge)
     * Deletes a Forge app's property.
     *
     * **[Permissions](#permissions) required:** Only Forge apps can make this request.
     * @param data The data for the request.
     * @param data.propertyKey The key of the property.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public deleteForgeAppProperty(data: DeleteForgeAppPropertyData): CancelablePromise<DeleteForgeAppPropertyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/forge/1/app/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            errors: {
                400: 'Returned if the property key is longer than 127 characters.',
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the request isn't made directly by an app or if it's an impersonated request.",
                404: "Returned if the property isn't found or doesn't belong to the app."
            }
        });
    }
    
    /**
     * Set app property (Forge)
     * Sets the value of a Forge app's property.
     * These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
     * through the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).
     *
     * For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** Only Forge apps can make this request.
     * @param data The data for the request.
     * @param data.propertyKey The key of the property.
     * @param data.requestBody
     * @returns OperationMessage Returned if the property is updated.
     * @throws ApiError
     */
    public putForgeAppProperty(data: PutForgeAppPropertyData): CancelablePromise<PutForgeAppPropertyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/forge/1/app/properties/{propertyKey}',
            path: {
                propertyKey: data.propertyKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:
  * the property key is longer than 127 characters.
  * the value isn't valid JSON.
  * the value is longer than 32768 characters.`,
                401: 'Returned if the authentication credentials are incorrect or missing.',
                403: "Returned if the request isn't made directly by an app or if it's an impersonated request."
            }
        });
    }
    
}

export class DynamicModulesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Remove modules
     * Remove all or a list of modules registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     * @param data The data for the request.
     * @param data.moduleKey The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
     * For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
     * Nonexistent keys are ignored.
     * @returns void Returned if the request is successful.
     * @throws ApiError
     */
    public dynamicModulesResourceRemoveModulesDelete(data: DynamicModulesResourceRemoveModulesDeleteData = {}): CancelablePromise<DynamicModulesResourceRemoveModulesDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/rest/atlassian-connect/1/app/module/dynamic',
            query: {
                moduleKey: data.moduleKey
            },
            errors: {
                401: 'Returned if the call is not from a Connect app.'
            }
        });
    }
    
    /**
     * Get modules
     * Returns all modules registered dynamically by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     * @returns ConnectModules Returned if the request is successful.
     * @throws ApiError
     */
    public dynamicModulesResourceGetModulesGet(): CancelablePromise<DynamicModulesResourceGetModulesGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/atlassian-connect/1/app/module/dynamic',
            errors: {
                401: 'Returned if the call is not from a Connect app.'
            }
        });
    }
    
    /**
     * Register modules
     * Registers a list of modules.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public dynamicModulesResourceRegisterModulesPost(data: DynamicModulesResourceRegisterModulesPostData): CancelablePromise<DynamicModulesResourceRegisterModulesPostResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/atlassian-connect/1/app/module/dynamic',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Returned if:
* any of the provided modules is invalid. For example, required properties are missing.
* any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.

Details of the issues encountered are included in the error message.`,
                401: 'Returned if the call is not from a Connect app.'
            }
        });
    }
    
}

export class AppMigrationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Bulk update custom field value
     * Updates the value of a custom field added by Connect apps on one or more issues.
     * The values of up to 200 custom fields can be updated.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request
     * @param data The data for the request.
     * @param data.atlassianTransferId The ID of the transfer.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public appIssueFieldValueUpdateResourceUpdateIssueFieldsPut(data: AppIssueFieldValueUpdateResourceUpdateIssueFieldsPutData): CancelablePromise<AppIssueFieldValueUpdateResourceUpdateIssueFieldsPutResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/atlassian-connect/1/migration/field',
            headers: {
                'Atlassian-Transfer-Id': data.atlassianTransferId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is invalid.',
                403: `Returned if:
* the transfer ID is not found.
* the authorisation credentials are incorrect or missing.`
            }
        });
    }
    
    /**
     * Bulk update entity properties
     * Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
     * @param data The data for the request.
     * @param data.atlassianTransferId The app migration transfer ID.
     * @param data.entityType The type indicating the object that contains the entity properties.
     * @param data.requestBody
     * @returns unknown Returned if the request is successful.
     * @throws ApiError
     */
    public migrationResourceUpdateEntityPropertiesValuePut(data: MigrationResourceUpdateEntityPropertiesValuePutData): CancelablePromise<MigrationResourceUpdateEntityPropertiesValuePutResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/rest/atlassian-connect/1/migration/properties/{entityType}',
            path: {
                entityType: data.entityType
            },
            headers: {
                'Atlassian-Transfer-Id': data.atlassianTransferId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                403: 'Returned if the authorisation credentials are incorrect or missing.'
            }
        });
    }
    
    /**
     * Get workflow transition rule configurations
     * Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
     * @param data The data for the request.
     * @param data.atlassianTransferId The app migration transfer ID.
     * @param data.requestBody
     * @returns WorkflowRulesSearchDetails Returned if the request is successful.
     * @throws ApiError
     */
    public migrationResourceWorkflowRuleSearchPost(data: MigrationResourceWorkflowRuleSearchPostData): CancelablePromise<MigrationResourceWorkflowRuleSearchPostResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rest/atlassian-connect/1/migration/workflow/rule/search',
            headers: {
                'Atlassian-Transfer-Id': data.atlassianTransferId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Returned if the request is not valid.',
                403: 'Returned if the authorisation credentials are incorrect or missing.'
            }
        });
    }
    
}

export class ServiceRegistryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Retrieve the attributes of service registries
     * Retrieve the attributes of given service registries.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting
     * @param data The data for the request.
     * @param data.serviceIds The ID of the services (the strings starting with "b:" need to be decoded in Base64).
     * @returns ServiceRegistry Returned if the request is successful.
     * @throws ApiError
     */
    public serviceRegistryResourceServicesGet(data: ServiceRegistryResourceServicesGetData): CancelablePromise<ServiceRegistryResourceServicesGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/rest/atlassian-connect/1/service-registry',
            query: {
                serviceIds: data.serviceIds
            },
            errors: {
                400: 'Returned if the request is invalid.',
                401: 'The request needs to be authenticated.',
                403: "The request isn't authorized.",
                500: 'The endpoint failed internally.',
                501: "The endpoint isn't ready for receiving requests.",
                504: 'The upstream service is busy.'
            }
        });
    }
    
}